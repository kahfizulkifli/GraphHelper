digraph HloModule {
	"p9.115" [label="p9.115 \n bf16[4,4]"];
	"p16.250" [label="p16.250 \n bf16[] parameter(16), frontend_attributes="];
	"broadcast.251" [label="broadcast.251 \n bf16[4,4]"];
	"multiply.252" [label="multiply.252 \n bf16[4,4]"];
	"p15.249" [label="p15.249 \n bf16[] parameter(15), frontend_attributes="];
	"broadcast.253" [label="broadcast.253 \n bf16[4,4]"];
	"multiply.255" [label="multiply.255 \n bf16[4,4]"];
	"subtract.256" [label="subtract.256 \n bf16[4,4]"];
	"p14.235" [label="p14.235 \n bf16[] parameter(14), frontend_attributes="];
	"multiply.0" [label="multiply.0 \n bf16[] multiply(bf16[] %constant.1, bf16[] %p14.235), metadata="];
	"broadcast.2" [label="broadcast.2 \n bf16[4,4]"];
	"p6.22" [label="p6.22 \n bf16[] parameter(6), frontend_attributes="];
	"p5.21" [label="p5.21 \n bf16[] parameter(5), frontend_attributes="];
	"divide.1" [label="divide.1 \n bf16[] divide(bf16[] %p6.22, bf16[] %p5.21), metadata="];
	"broadcast.58" [label="broadcast.58 \n bf16[1,4]"];
	"p7.64" [label="p7.64 \n bf16[1,4]"];
	"multiply.21" [label="multiply.21 \n bf16[1,4]"];
	"reshape.148" [label="reshape.148 \n bf16[4]"];
	"broadcast.43" [label="broadcast.43 \n bf16[4,4]"];
	"p10.124" [label="p10.124 \n bf16[4,4]"];
	"transpose.157" [label="transpose.157 \n bf16[4,4]"];
	"dot.1" [label="dot.1 \n bf16[4,4]"];
	"constant.3" [label="constant.3 \n bf16[1]"];
	"p11.180" [label="p11.180 \n bf16[1]"];
	"multiply.169" [label="multiply.169 \n bf16[4,4]"];
	"constant.170" [label="constant.170 \n bf16[] constant(0), metadata="];
	"reduce.176" [label="reduce.176 \n bf16[] reduce(bf16[4,4]"];
	"sqrt.177" [label="sqrt.177 \n bf16[] sqrt(bf16[] %reduce.176), metadata="];
	"multiply.179" [label="multiply.179 \n bf16[] multiply(bf16[] %sqrt.177, bf16[] %sqrt.177), metadata="];
	"reshape.13" [label="reshape.13 \n bf16[1]"];
	"add.182" [label="add.182 \n bf16[1]"];
	"transpose.123" [label="transpose.123 \n bf16[4,4]"];
	"dot.125" [label="dot.125 \n bf16[4,4]"];
	"p8.107" [label="p8.107 \n bf16[4]"];
	"broadcast.129" [label="broadcast.129 \n bf16[4,4]"];
	"add.130" [label="add.130 \n bf16[4,4]"];
	"broadcast.60" [label="broadcast.60 \n bf16[4,4]"];
	"multiply.22" [label="multiply.22 \n bf16[4,4]"];
	"convert.2" [label="convert.2 \n f32[4,4]"];
	"convert.1" [label="convert.1 \n bf16[4]"];
	"reshape.22" [label="reshape.22 \n bf16[1,4]"];
	"multiply.143" [label="multiply.143 \n bf16[1,4]"];
	"constant.144" [label="constant.144 \n bf16[] constant(0), metadata="];
	"reduce.150" [label="reduce.150 \n bf16[] reduce(bf16[1,4]"];
	"sqrt.151" [label="sqrt.151 \n bf16[] sqrt(bf16[] %reduce.150), metadata="];
	"multiply.153" [label="multiply.153 \n bf16[] multiply(bf16[] %sqrt.151, bf16[] %sqrt.151), metadata="];
	"reshape.23" [label="reshape.23 \n bf16[1]"];
	"add.184" [label="add.184 \n bf16[1]"];
	"constant.75" [label="constant.75 \n bf16[] constant(0), metadata="];
	"reduce.81" [label="reduce.81 \n bf16[4]"];
	"multiply.93" [label="multiply.93 \n bf16[4]"];
	"constant.94" [label="constant.94 \n bf16[] constant(0), metadata="];
	"reduce.100" [label="reduce.100 \n bf16[] reduce(bf16[4]"];
	"sqrt.101" [label="sqrt.101 \n bf16[] sqrt(bf16[] %reduce.100), metadata="];
	"multiply.103" [label="multiply.103 \n bf16[] multiply(bf16[] %sqrt.101, bf16[] %sqrt.101), metadata="];
	"reshape.29" [label="reshape.29 \n bf16[1]"];
	"add.186" [label="add.186 \n bf16[1]"];
	"broadcast.4" [label="broadcast.4 \n bf16[4,1]"];
	"constant.32" [label="constant.32 \n bf16[] constant(0), metadata="];
	"reduce.38" [label="reduce.38 \n bf16[1]"];
	"multiply.23" [label="multiply.23 \n bf16[1]"];
	"add.188" [label="add.188 \n bf16[1]"];
	"constant.6" [label="constant.6 \n bf16[1]"];
	"power.191" [label="power.191 \n bf16[1]"];
	"p4.12" [label="p4.12 \n bf16[] parameter(4), frontend_attributes="];
	"reshape.36" [label="reshape.36 \n bf16[1]"];
	"add.193" [label="add.193 \n bf16[1]"];
	"divide.196" [label="divide.196 \n bf16[1]"];
	"constant.12" [label="constant.12 \n bf16[1]"];
	"compare.203" [label="compare.203 \n pred[1]"];
	"constant.13" [label="constant.13 \n bf16[1]"];
	"select.205" [label="select.205 \n bf16[1]"];
	"reshape.207" [label="reshape.207 \n bf16[] reshape(bf16[1]"];
	"broadcast.209" [label="broadcast.209 \n bf16[4,4]"];
	"multiply.210" [label="multiply.210 \n bf16[4,4]"];
	"p13.229" [label="p13.229 \n bf16[] parameter(13), frontend_attributes="];
	"broadcast.233" [label="broadcast.233 \n bf16[4,4]"];
	"multiply.234" [label="multiply.234 \n bf16[4,4]"];
	"add.243" [label="add.243 \n bf16[4,4]"];
	"p12.211" [label="p12.211 \n bf16[] parameter(12), frontend_attributes="];
	"multiply.7" [label="multiply.7 \n bf16[] multiply(bf16[] %constant.15, bf16[] %p12.211), metadata="];
	"broadcast.14" [label="broadcast.14 \n bf16[4,4]"];
	"multiply.220" [label="multiply.220 \n bf16[4,4]"];
	"p3.6" [label="p3.6 \n f32[] parameter(3), frontend_attributes="];
	"convert.219" [label="convert.219 \n bf16[] convert(f32[] %p3.6), metadata="];
	"broadcast.221" [label="broadcast.221 \n bf16[4,4]"];
	"multiply.222" [label="multiply.222 \n bf16[4,4]"];
	"add.223" [label="add.223 \n bf16[4,4]"];
	"sqrt.224" [label="sqrt.224 \n bf16[4,4]"];
	"p2.5" [label="p2.5 \n bf16[] parameter(2), frontend_attributes="];
	"broadcast.225" [label="broadcast.225 \n bf16[4,4]"];
	"divide.226" [label="divide.226 \n bf16[4,4]"];
	"p1.3" [label="p1.3 \n bf16[] parameter(1), frontend_attributes="];
	"broadcast.227" [label="broadcast.227 \n bf16[4,4]"];
	"add.228" [label="add.228 \n bf16[4,4]"];
	"divide.258" [label="divide.258 \n bf16[4,4]"];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"convert.257" [label="convert.257 \n bf16[] convert(f32[] %p0.1), metadata="];
	"broadcast.259" [label="broadcast.259 \n bf16[4,4]"];
	"multiply.260" [label="multiply.260 \n bf16[4,4]"];
	"add.261" [label="add.261 \n bf16[4,4]"];
	"broadcast.314" [label="broadcast.314 \n bf16[4]"];
	"multiply.315" [label="multiply.315 \n bf16[4]"];
	"broadcast.15" [label="broadcast.15 \n bf16[4]"];
	"multiply.318" [label="multiply.318 \n bf16[4]"];
	"subtract.319" [label="subtract.319 \n bf16[4]"];
	"multiply.10" [label="multiply.10 \n bf16[] multiply(bf16[] %constant.22, bf16[] %p14.235), metadata="];
	"broadcast.19" [label="broadcast.19 \n bf16[4]"];
	"constant.25" [label="constant.25 \n bf16[1]"];
	"compare.271" [label="compare.271 \n pred[1]"];
	"constant.26" [label="constant.26 \n bf16[1]"];
	"select.273" [label="select.273 \n bf16[1]"];
	"reshape.275" [label="reshape.275 \n bf16[] reshape(bf16[1]"];
	"broadcast.276" [label="broadcast.276 \n bf16[4]"];
	"multiply.277" [label="multiply.277 \n bf16[4]"];
	"broadcast.298" [label="broadcast.298 \n bf16[4]"];
	"multiply.299" [label="multiply.299 \n bf16[4]"];
	"add.307" [label="add.307 \n bf16[4]"];
	"multiply.11" [label="multiply.11 \n bf16[] multiply(bf16[] %constant.27, bf16[] %p12.211), metadata="];
	"broadcast.22" [label="broadcast.22 \n bf16[4]"];
	"multiply.286" [label="multiply.286 \n bf16[4]"];
	"convert.285" [label="convert.285 \n bf16[] convert(f32[] %p3.6), metadata="];
	"broadcast.287" [label="broadcast.287 \n bf16[4]"];
	"multiply.288" [label="multiply.288 \n bf16[4]"];
	"add.289" [label="add.289 \n bf16[4]"];
	"sqrt.290" [label="sqrt.290 \n bf16[4]"];
	"broadcast.291" [label="broadcast.291 \n bf16[4]"];
	"divide.292" [label="divide.292 \n bf16[4]"];
	"broadcast.293" [label="broadcast.293 \n bf16[4]"];
	"add.294" [label="add.294 \n bf16[4]"];
	"divide.321" [label="divide.321 \n bf16[4]"];
	"convert.320" [label="convert.320 \n bf16[] convert(f32[] %p0.1), metadata="];
	"broadcast.322" [label="broadcast.322 \n bf16[4]"];
	"multiply.323" [label="multiply.323 \n bf16[4]"];
	"add.324" [label="add.324 \n bf16[4]"];
	"broadcast.377" [label="broadcast.377 \n bf16[1,4]"];
	"multiply.378" [label="multiply.378 \n bf16[1,4]"];
	"broadcast.379" [label="broadcast.379 \n bf16[1,4]"];
	"multiply.381" [label="multiply.381 \n bf16[1,4]"];
	"subtract.382" [label="subtract.382 \n bf16[1,4]"];
	"multiply.19" [label="multiply.19 \n bf16[] multiply(bf16[] %constant.42, bf16[] %p14.235), metadata="];
	"broadcast.26" [label="broadcast.26 \n bf16[1,4]"];
	"constant.30" [label="constant.30 \n bf16[1]"];
	"compare.334" [label="compare.334 \n pred[1]"];
	"constant.31" [label="constant.31 \n bf16[1]"];
	"select.336" [label="select.336 \n bf16[1]"];
	"reshape.338" [label="reshape.338 \n bf16[] reshape(bf16[1]"];
	"broadcast.53" [label="broadcast.53 \n bf16[1,4]"];
	"multiply.341" [label="multiply.341 \n bf16[1,4]"];
	"broadcast.362" [label="broadcast.362 \n bf16[1,4]"];
	"multiply.363" [label="multiply.363 \n bf16[1,4]"];
	"add.371" [label="add.371 \n bf16[1,4]"];
	"multiply.20" [label="multiply.20 \n bf16[] multiply(bf16[] %constant.43, bf16[] %p12.211), metadata="];
	"broadcast.32" [label="broadcast.32 \n bf16[1,4]"];
	"multiply.350" [label="multiply.350 \n bf16[1,4]"];
	"convert.349" [label="convert.349 \n bf16[] convert(f32[] %p3.6), metadata="];
	"broadcast.351" [label="broadcast.351 \n bf16[1,4]"];
	"multiply.352" [label="multiply.352 \n bf16[1,4]"];
	"add.353" [label="add.353 \n bf16[1,4]"];
	"sqrt.354" [label="sqrt.354 \n bf16[1,4]"];
	"broadcast.355" [label="broadcast.355 \n bf16[1,4]"];
	"divide.356" [label="divide.356 \n bf16[1,4]"];
	"broadcast.357" [label="broadcast.357 \n bf16[1,4]"];
	"add.358" [label="add.358 \n bf16[1,4]"];
	"divide.384" [label="divide.384 \n bf16[1,4]"];
	"convert.383" [label="convert.383 \n bf16[] convert(f32[] %p0.1), metadata="];
	"broadcast.385" [label="broadcast.385 \n bf16[1,4]"];
	"multiply.386" [label="multiply.386 \n bf16[1,4]"];
	"add.387" [label="add.387 \n bf16[1,4]"];
	"p17.429" [label="p17.429 \n bf16[1]"];
	"reshape.81" [label="reshape.81 \n bf16[1]"];
	"multiply.431" [label="multiply.431 \n bf16[1]"];
	"constant.35" [label="constant.35 \n bf16[1]"];
	"multiply.434" [label="multiply.434 \n bf16[1]"];
	"subtract.435" [label="subtract.435 \n bf16[1]"];
	"multiply.18" [label="multiply.18 \n bf16[] multiply(bf16[] %constant.44, bf16[] %p14.235), metadata="];
	"reshape.136" [label="reshape.136 \n bf16[1]"];
	"constant.39" [label="constant.39 \n bf16[1]"];
	"compare.397" [label="compare.397 \n pred[1]"];
	"constant.40" [label="constant.40 \n bf16[1]"];
	"select.399" [label="select.399 \n bf16[1]"];
	"multiply.400" [label="multiply.400 \n bf16[1]"];
	"reshape.92" [label="reshape.92 \n bf16[1]"];
	"multiply.418" [label="multiply.418 \n bf16[1]"];
	"add.424" [label="add.424 \n bf16[1]"];
	"multiply.17" [label="multiply.17 \n bf16[] multiply(bf16[] %constant.45, bf16[] %p12.211), metadata="];
	"reshape.133" [label="reshape.133 \n bf16[1]"];
	"multiply.407" [label="multiply.407 \n bf16[1]"];
	"convert.406" [label="convert.406 \n bf16[] convert(f32[] %p3.6), metadata="];
	"reshape.95" [label="reshape.95 \n bf16[1]"];
	"multiply.409" [label="multiply.409 \n bf16[1]"];
	"add.410" [label="add.410 \n bf16[1]"];
	"sqrt.411" [label="sqrt.411 \n bf16[1]"];
	"reshape.96" [label="reshape.96 \n bf16[1]"];
	"divide.413" [label="divide.413 \n bf16[1]"];
	"reshape.97" [label="reshape.97 \n bf16[1]"];
	"add.415" [label="add.415 \n bf16[1]"];
	"divide.437" [label="divide.437 \n bf16[1]"];
	"convert.436" [label="convert.436 \n bf16[] convert(f32[] %p0.1), metadata="];
	"reshape.98" [label="reshape.98 \n bf16[1]"];
	"multiply.439" [label="multiply.439 \n bf16[1]"];
	"add.440" [label="add.440 \n bf16[1]"];
	"tuple.441" [label="tuple.441 \n (bf16[4,4]"]; 
 	"p16.250" -> "broadcast.251";
	"p9.115" -> "multiply.252";
	"broadcast.251" -> "multiply.252";
	"p15.249" -> "broadcast.253";
	"multiply.252" -> "multiply.255";
	"broadcast.253" -> "multiply.255";
	"p9.115" -> "subtract.256";
	"multiply.255" -> "subtract.256";
	"constant.1" -> "multiply.0";
	"p14.235" -> "multiply.0";
	"multiply.0" -> "broadcast.2";
	"p6.22" -> "divide.1";
	"p5.21" -> "divide.1";
	"divide.1" -> "broadcast.58";
	"p7.64" -> "custom-call.7";
	"broadcast.58" -> "multiply.21";
	"custom-call.7" -> "multiply.21";
	"multiply.21" -> "reshape.148";
	"reshape.148" -> "broadcast.43";
	"p10.124" -> "transpose.157";
	"broadcast.43" -> "dot.1";
	"transpose.157" -> "dot.1";
	"dot.1" -> "custom-call.8";
	"custom-call.8" -> "multiply.169";
	"custom-call.8" -> "multiply.169";
	"multiply.169" -> "reduce.176";
	"constant.170" -> "reduce.176";
	"AddComputation.172" -> "reduce.176";
	"reduce.176" -> "sqrt.177";
	"sqrt.177" -> "multiply.179";
	"sqrt.177" -> "multiply.179";
	"multiply.179" -> "reshape.13";
	"p11.180" -> "add.182";
	"reshape.13" -> "add.182";
	"p9.115" -> "custom-call.9";
	"custom-call.9" -> "transpose.123";
	"p10.124" -> "dot.125";
	"transpose.123" -> "dot.125";
	"p8.107" -> "custom-call.10";
	"custom-call.10" -> "broadcast.129";
	"dot.125" -> "add.130";
	"broadcast.129" -> "add.130";
	"divide.1" -> "broadcast.60";
	"add.130" -> "multiply.22";
	"broadcast.60" -> "multiply.22";
	"multiply.22" -> "convert.2";
	"convert.2" -> "reduce";
	"constant" -> "reduce";
	"scalar_add_computation" -> "reduce";
	"reduce" -> "convert.1";
	"convert.1" -> "reshape.22";
	"reshape.22" -> "custom-call.11";
	"custom-call.11" -> "multiply.143";
	"custom-call.11" -> "multiply.143";
	"multiply.143" -> "reduce.150";
	"constant.144" -> "reduce.150";
	"AddComputation.146" -> "reduce.150";
	"reduce.150" -> "sqrt.151";
	"sqrt.151" -> "multiply.153";
	"sqrt.151" -> "multiply.153";
	"multiply.153" -> "reshape.23";
	"add.182" -> "add.184";
	"reshape.23" -> "add.184";
	"broadcast.43" -> "reduce.81";
	"constant.75" -> "reduce.81";
	"AddComputation.77" -> "reduce.81";
	"reduce.81" -> "custom-call.12";
	"custom-call.12" -> "multiply.93";
	"custom-call.12" -> "multiply.93";
	"multiply.93" -> "reduce.100";
	"constant.94" -> "reduce.100";
	"AddComputation.96" -> "reduce.100";
	"reduce.100" -> "sqrt.101";
	"sqrt.101" -> "multiply.103";
	"sqrt.101" -> "multiply.103";
	"multiply.103" -> "reshape.29";
	"add.184" -> "add.186";
	"reshape.29" -> "add.186";
	"divide.1" -> "broadcast.4";
	"broadcast.4" -> "reduce.38";
	"constant.32" -> "reduce.38";
	"AddComputation.34" -> "reduce.38";
	"reduce.38" -> "custom-call.13";
	"custom-call.13" -> "multiply.23";
	"custom-call.13" -> "multiply.23";
	"add.186" -> "add.188";
	"multiply.23" -> "add.188";
	"add.188" -> "power.191";
	"constant.6" -> "power.191";
	"p4.12" -> "reshape.36";
	"power.191" -> "add.193";
	"reshape.36" -> "add.193";
	"constant.3" -> "divide.196";
	"add.193" -> "divide.196";
	"divide.196" -> "compare.203";
	"constant.12" -> "compare.203";
	"compare.203" -> "select.205";
	"divide.196" -> "select.205";
	"constant.13" -> "select.205";
	"select.205" -> "reshape.207";
	"reshape.207" -> "broadcast.209";
	"custom-call.8" -> "multiply.210";
	"broadcast.209" -> "multiply.210";
	"p13.229" -> "broadcast.233";
	"multiply.210" -> "multiply.234";
	"broadcast.233" -> "multiply.234";
	"broadcast.2" -> "add.243";
	"multiply.234" -> "add.243";
	"constant.15" -> "multiply.7";
	"p12.211" -> "multiply.7";
	"multiply.7" -> "broadcast.14";
	"multiply.210" -> "multiply.220";
	"multiply.210" -> "multiply.220";
	"p3.6" -> "convert.219";
	"convert.219" -> "broadcast.221";
	"multiply.220" -> "multiply.222";
	"broadcast.221" -> "multiply.222";
	"broadcast.14" -> "add.223";
	"multiply.222" -> "add.223";
	"add.223" -> "sqrt.224";
	"p2.5" -> "broadcast.225";
	"sqrt.224" -> "divide.226";
	"broadcast.225" -> "divide.226";
	"p1.3" -> "broadcast.227";
	"divide.226" -> "add.228";
	"broadcast.227" -> "add.228";
	"add.243" -> "divide.258";
	"add.228" -> "divide.258";
	"p0.1" -> "convert.257";
	"convert.257" -> "broadcast.259";
	"divide.258" -> "multiply.260";
	"broadcast.259" -> "multiply.260";
	"subtract.256" -> "add.261";
	"multiply.260" -> "add.261";
	"p16.250" -> "broadcast.314";
	"p8.107" -> "multiply.315";
	"broadcast.314" -> "multiply.315";
	"constant.21" -> "broadcast.15";
	"multiply.315" -> "multiply.318";
	"broadcast.15" -> "multiply.318";
	"p8.107" -> "subtract.319";
	"multiply.318" -> "subtract.319";
	"constant.22" -> "multiply.10";
	"p14.235" -> "multiply.10";
	"multiply.10" -> "broadcast.19";
	"divide.196" -> "compare.271";
	"constant.25" -> "compare.271";
	"compare.271" -> "select.273";
	"divide.196" -> "select.273";
	"constant.26" -> "select.273";
	"select.273" -> "reshape.275";
	"reshape.275" -> "broadcast.276";
	"custom-call.12" -> "multiply.277";
	"broadcast.276" -> "multiply.277";
	"p13.229" -> "broadcast.298";
	"multiply.277" -> "multiply.299";
	"broadcast.298" -> "multiply.299";
	"broadcast.19" -> "add.307";
	"multiply.299" -> "add.307";
	"constant.27" -> "multiply.11";
	"p12.211" -> "multiply.11";
	"multiply.11" -> "broadcast.22";
	"multiply.277" -> "multiply.286";
	"multiply.277" -> "multiply.286";
	"p3.6" -> "convert.285";
	"convert.285" -> "broadcast.287";
	"multiply.286" -> "multiply.288";
	"broadcast.287" -> "multiply.288";
	"broadcast.22" -> "add.289";
	"multiply.288" -> "add.289";
	"add.289" -> "sqrt.290";
	"p2.5" -> "broadcast.291";
	"sqrt.290" -> "divide.292";
	"broadcast.291" -> "divide.292";
	"p1.3" -> "broadcast.293";
	"divide.292" -> "add.294";
	"broadcast.293" -> "add.294";
	"add.307" -> "divide.321";
	"add.294" -> "divide.321";
	"p0.1" -> "convert.320";
	"convert.320" -> "broadcast.322";
	"divide.321" -> "multiply.323";
	"broadcast.322" -> "multiply.323";
	"subtract.319" -> "add.324";
	"multiply.323" -> "add.324";
	"p16.250" -> "broadcast.377";
	"p7.64" -> "multiply.378";
	"broadcast.377" -> "multiply.378";
	"p15.249" -> "broadcast.379";
	"multiply.378" -> "multiply.381";
	"broadcast.379" -> "multiply.381";
	"p7.64" -> "subtract.382";
	"multiply.381" -> "subtract.382";
	"constant.42" -> "multiply.19";
	"p14.235" -> "multiply.19";
	"multiply.19" -> "broadcast.26";
	"divide.196" -> "compare.334";
	"constant.30" -> "compare.334";
	"compare.334" -> "select.336";
	"divide.196" -> "select.336";
	"constant.31" -> "select.336";
	"select.336" -> "reshape.338";
	"reshape.338" -> "broadcast.53";
	"custom-call.11" -> "multiply.341";
	"broadcast.53" -> "multiply.341";
	"p13.229" -> "broadcast.362";
	"multiply.341" -> "multiply.363";
	"broadcast.362" -> "multiply.363";
	"broadcast.26" -> "add.371";
	"multiply.363" -> "add.371";
	"constant.43" -> "multiply.20";
	"p12.211" -> "multiply.20";
	"multiply.20" -> "broadcast.32";
	"multiply.341" -> "multiply.350";
	"multiply.341" -> "multiply.350";
	"p3.6" -> "convert.349";
	"convert.349" -> "broadcast.351";
	"multiply.350" -> "multiply.352";
	"broadcast.351" -> "multiply.352";
	"broadcast.32" -> "add.353";
	"multiply.352" -> "add.353";
	"add.353" -> "sqrt.354";
	"p2.5" -> "broadcast.355";
	"sqrt.354" -> "divide.356";
	"broadcast.355" -> "divide.356";
	"p1.3" -> "broadcast.357";
	"divide.356" -> "add.358";
	"broadcast.357" -> "add.358";
	"add.371" -> "divide.384";
	"add.358" -> "divide.384";
	"p0.1" -> "convert.383";
	"convert.383" -> "broadcast.385";
	"divide.384" -> "multiply.386";
	"broadcast.385" -> "multiply.386";
	"subtract.382" -> "add.387";
	"multiply.386" -> "add.387";
	"p16.250" -> "reshape.81";
	"p17.429" -> "multiply.431";
	"reshape.81" -> "multiply.431";
	"multiply.431" -> "multiply.434";
	"constant.35" -> "multiply.434";
	"p17.429" -> "subtract.435";
	"multiply.434" -> "subtract.435";
	"constant.44" -> "multiply.18";
	"p14.235" -> "multiply.18";
	"multiply.18" -> "reshape.136";
	"divide.196" -> "compare.397";
	"constant.39" -> "compare.397";
	"compare.397" -> "select.399";
	"divide.196" -> "select.399";
	"constant.40" -> "select.399";
	"custom-call.13" -> "multiply.400";
	"select.399" -> "multiply.400";
	"p13.229" -> "reshape.92";
	"multiply.400" -> "multiply.418";
	"reshape.92" -> "multiply.418";
	"reshape.136" -> "add.424";
	"multiply.418" -> "add.424";
	"constant.45" -> "multiply.17";
	"p12.211" -> "multiply.17";
	"multiply.17" -> "reshape.133";
	"multiply.400" -> "multiply.407";
	"multiply.400" -> "multiply.407";
	"p3.6" -> "convert.406";
	"convert.406" -> "reshape.95";
	"multiply.407" -> "multiply.409";
	"reshape.95" -> "multiply.409";
	"reshape.133" -> "add.410";
	"multiply.409" -> "add.410";
	"add.410" -> "sqrt.411";
	"p2.5" -> "reshape.96";
	"sqrt.411" -> "divide.413";
	"reshape.96" -> "divide.413";
	"p1.3" -> "reshape.97";
	"divide.413" -> "add.415";
	"reshape.97" -> "add.415";
	"add.424" -> "divide.437";
	"add.415" -> "divide.437";
	"p0.1" -> "convert.436";
	"convert.436" -> "reshape.98";
	"divide.437" -> "multiply.439";
	"reshape.98" -> "multiply.439";
	"subtract.435" -> "add.440";
	"multiply.439" -> "add.440";
	"add.261" -> "tuple.441";
	"add.324" -> "tuple.441";
	"add.387" -> "tuple.441";
	"add.440" -> "tuple.441";
	"p10.124" -> "tuple.441";
	"multiply.400" -> "tuple.441";
	"multiply.341" -> "tuple.441";
	"multiply.277" -> "tuple.441";
	"multiply.210" -> "tuple.441";
	"power.191" -> "tuple.441";
	"add.243" -> "tuple.441";
	"add.223" -> "tuple.441";
	"add.371" -> "tuple.441";
	"add.353" -> "tuple.441";
	"add.307" -> "tuple.441";
	"add.289" -> "tuple.441";
	"add.424" -> "tuple.441";
	"add.410" -> "tuple.441";
}