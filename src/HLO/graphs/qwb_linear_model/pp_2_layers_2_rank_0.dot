digraph HloModule {
	"p14.146" [label="p14.146 \n bf16[4,4]"];
	"p13.145" [label="p13.145 \n bf16[] parameter(13), frontend_attributes="];
	"broadcast.147" [label="broadcast.147 \n bf16[4,4]"];
	"multiply.148" [label="multiply.148 \n bf16[4,4]"];
	"p12.144" [label="p12.144 \n bf16[] parameter(12), frontend_attributes="];
	"broadcast.149" [label="broadcast.149 \n bf16[4,4]"];
	"multiply.151" [label="multiply.151 \n bf16[4,4]"];
	"subtract.152" [label="subtract.152 \n bf16[4,4]"];
	"p11.130" [label="p11.130 \n bf16[] parameter(11), frontend_attributes="];
	"multiply.2" [label="multiply.2 \n bf16[] multiply(bf16[] %constant.1, bf16[] %p11.130), metadata="];
	"broadcast.2" [label="broadcast.2 \n bf16[4,4]"];
	"p7.23" [label="p7.23 \n bf16[4]"];
	"p6.19" [label="p6.19 \n bf16[4,4]"];
	"p5.17" [label="p5.17 \n f32[] parameter(5), frontend_attributes="];
	"convert.26" [label="convert.26 \n bf16[] convert(f32[] %p5.17), metadata="];
	"constant.3" [label="constant.3 \n bf16[1]"];
	"p8.67" [label="p8.67 \n bf16[1]"];
	"multiply.56" [label="multiply.56 \n bf16[4,4]"];
	"constant.57" [label="constant.57 \n bf16[] constant(0), metadata="];
	"reduce.63" [label="reduce.63 \n bf16[] reduce(bf16[4,4]"];
	"sqrt.64" [label="sqrt.64 \n bf16[] sqrt(bf16[] %reduce.63), metadata="];
	"multiply.66" [label="multiply.66 \n bf16[] multiply(bf16[] %sqrt.64, bf16[] %sqrt.64), metadata="];
	"add.69" [label="add.69 \n bf16[1]"];
	"multiply.43" [label="multiply.43 \n bf16[4]"];
	"constant.44" [label="constant.44 \n bf16[] constant(0), metadata="];
	"reduce.50" [label="reduce.50 \n bf16[] reduce(bf16[4]"];
	"sqrt.51" [label="sqrt.51 \n bf16[] sqrt(bf16[] %reduce.50), metadata="];
	"multiply.53" [label="multiply.53 \n bf16[] multiply(bf16[] %sqrt.51, bf16[] %sqrt.51), metadata="];
	"reshape.1" [label="reshape.1 \n bf16[1]"];
	"add.71" [label="add.71 \n bf16[1]"];
	"constant.4" [label="constant.4 \n bf16[1]"];
	"power.86" [label="power.86 \n bf16[1]"];
	"p4.12" [label="p4.12 \n bf16[] parameter(4), frontend_attributes="];
	"reshape.10" [label="reshape.10 \n bf16[1]"];
	"add.88" [label="add.88 \n bf16[1]"];
	"divide.91" [label="divide.91 \n bf16[1]"];
	"constant.8" [label="constant.8 \n bf16[1]"];
	"compare.98" [label="compare.98 \n pred[1]"];
	"constant.9" [label="constant.9 \n bf16[1]"];
	"select.100" [label="select.100 \n bf16[1]"];
	"reshape.102" [label="reshape.102 \n bf16[] reshape(bf16[1]"];
	"broadcast.104" [label="broadcast.104 \n bf16[4,4]"];
	"multiply.105" [label="multiply.105 \n bf16[4,4]"];
	"p10.124" [label="p10.124 \n bf16[] parameter(10), frontend_attributes="];
	"broadcast.128" [label="broadcast.128 \n bf16[4,4]"];
	"multiply.129" [label="multiply.129 \n bf16[4,4]"];
	"add.138" [label="add.138 \n bf16[4,4]"];
	"p9.106" [label="p9.106 \n bf16[] parameter(9), frontend_attributes="];
	"multiply.3" [label="multiply.3 \n bf16[] multiply(bf16[] %constant.12, bf16[] %p9.106), metadata="];
	"broadcast.6" [label="broadcast.6 \n bf16[4,4]"];
	"multiply.115" [label="multiply.115 \n bf16[4,4]"];
	"p3.6" [label="p3.6 \n f32[] parameter(3), frontend_attributes="];
	"convert.114" [label="convert.114 \n bf16[] convert(f32[] %p3.6), metadata="];
	"broadcast.116" [label="broadcast.116 \n bf16[4,4]"];
	"multiply.117" [label="multiply.117 \n bf16[4,4]"];
	"add.118" [label="add.118 \n bf16[4,4]"];
	"sqrt.119" [label="sqrt.119 \n bf16[4,4]"];
	"p2.5" [label="p2.5 \n bf16[] parameter(2), frontend_attributes="];
	"broadcast.120" [label="broadcast.120 \n bf16[4,4]"];
	"divide.121" [label="divide.121 \n bf16[4,4]"];
	"p1.3" [label="p1.3 \n bf16[] parameter(1), frontend_attributes="];
	"broadcast.122" [label="broadcast.122 \n bf16[4,4]"];
	"add.123" [label="add.123 \n bf16[4,4]"];
	"divide.154" [label="divide.154 \n bf16[4,4]"];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"convert.153" [label="convert.153 \n bf16[] convert(f32[] %p0.1), metadata="];
	"broadcast.155" [label="broadcast.155 \n bf16[4,4]"];
	"multiply.156" [label="multiply.156 \n bf16[4,4]"];
	"add.157" [label="add.157 \n bf16[4,4]"];
	"p15.210" [label="p15.210 \n bf16[4]"];
	"broadcast.211" [label="broadcast.211 \n bf16[4]"];
	"multiply.212" [label="multiply.212 \n bf16[4]"];
	"broadcast.7" [label="broadcast.7 \n bf16[4]"];
	"multiply.215" [label="multiply.215 \n bf16[4]"];
	"subtract.216" [label="subtract.216 \n bf16[4]"];
	"multiply.7" [label="multiply.7 \n bf16[] multiply(bf16[] %constant.16, bf16[] %p11.130), metadata="];
	"broadcast.11" [label="broadcast.11 \n bf16[4]"];
	"constant.19" [label="constant.19 \n bf16[1]"];
	"compare.167" [label="compare.167 \n pred[1]"];
	"constant.20" [label="constant.20 \n bf16[1]"];
	"select.169" [label="select.169 \n bf16[1]"];
	"reshape.171" [label="reshape.171 \n bf16[] reshape(bf16[1]"];
	"broadcast.172" [label="broadcast.172 \n bf16[4]"];
	"multiply.173" [label="multiply.173 \n bf16[4]"];
	"broadcast.194" [label="broadcast.194 \n bf16[4]"];
	"multiply.195" [label="multiply.195 \n bf16[4]"];
	"add.203" [label="add.203 \n bf16[4]"];
	"multiply.8" [label="multiply.8 \n bf16[] multiply(bf16[] %constant.21, bf16[] %p9.106), metadata="];
	"broadcast.14" [label="broadcast.14 \n bf16[4]"];
	"multiply.182" [label="multiply.182 \n bf16[4]"];
	"convert.181" [label="convert.181 \n bf16[] convert(f32[] %p3.6), metadata="];
	"broadcast.183" [label="broadcast.183 \n bf16[4]"];
	"multiply.184" [label="multiply.184 \n bf16[4]"];
	"add.185" [label="add.185 \n bf16[4]"];
	"sqrt.186" [label="sqrt.186 \n bf16[4]"];
	"broadcast.187" [label="broadcast.187 \n bf16[4]"];
	"divide.188" [label="divide.188 \n bf16[4]"];
	"broadcast.189" [label="broadcast.189 \n bf16[4]"];
	"add.190" [label="add.190 \n bf16[4]"];
	"divide.218" [label="divide.218 \n bf16[4]"];
	"convert.217" [label="convert.217 \n bf16[] convert(f32[] %p0.1), metadata="];
	"broadcast.219" [label="broadcast.219 \n bf16[4]"];
	"multiply.220" [label="multiply.220 \n bf16[4]"];
	"add.221" [label="add.221 \n bf16[4]"];
	"tuple.222" [label="tuple.222 \n (bf16[4,4]"]; 
 	"p13.145" -> "broadcast.147";
	"p14.146" -> "multiply.148";
	"broadcast.147" -> "multiply.148";
	"p12.144" -> "broadcast.149";
	"multiply.148" -> "multiply.151";
	"broadcast.149" -> "multiply.151";
	"p14.146" -> "subtract.152";
	"multiply.151" -> "subtract.152";
	"constant.1" -> "multiply.2";
	"p11.130" -> "multiply.2";
	"multiply.2" -> "broadcast.2";
	"p5.17" -> "convert.26";
	"p7.23" -> "all-reduce.35";
	"p6.19" -> "all-reduce.35";
	"convert.26" -> "all-reduce.35";
	"AddComputation.31" -> "all-reduce.35";
	"all-reduce.35" -> "get-tuple-element.37";
	"get-tuple-element.37" -> "multiply.56";
	"get-tuple-element.37" -> "multiply.56";
	"multiply.56" -> "reduce.63";
	"constant.57" -> "reduce.63";
	"AddComputation.59" -> "reduce.63";
	"reduce.63" -> "sqrt.64";
	"sqrt.64" -> "multiply.66";
	"sqrt.64" -> "multiply.66";
	"multiply.66" -> "reshape";
	"p8.67" -> "add.69";
	"reshape" -> "add.69";
	"all-reduce.35" -> "get-tuple-element.36";
	"get-tuple-element.36" -> "multiply.43";
	"get-tuple-element.36" -> "multiply.43";
	"multiply.43" -> "reduce.50";
	"constant.44" -> "reduce.50";
	"AddComputation.46" -> "reduce.50";
	"reduce.50" -> "sqrt.51";
	"sqrt.51" -> "multiply.53";
	"sqrt.51" -> "multiply.53";
	"multiply.53" -> "reshape.1";
	"add.69" -> "add.71";
	"reshape.1" -> "add.71";
	"all-reduce.35" -> "get-tuple-element.77";
	"add.71" -> "all-reduce.82";
	"get-tuple-element.77" -> "all-reduce.82";
	"AddComputation.78" -> "all-reduce.82";
	"all-reduce.82" -> "get-tuple-element.83";
	"get-tuple-element.83" -> "power.86";
	"constant.4" -> "power.86";
	"p4.12" -> "reshape.10";
	"power.86" -> "add.88";
	"reshape.10" -> "add.88";
	"constant.3" -> "divide.91";
	"add.88" -> "divide.91";
	"divide.91" -> "compare.98";
	"constant.8" -> "compare.98";
	"compare.98" -> "select.100";
	"divide.91" -> "select.100";
	"constant.9" -> "select.100";
	"select.100" -> "reshape.102";
	"reshape.102" -> "broadcast.104";
	"get-tuple-element.37" -> "multiply.105";
	"broadcast.104" -> "multiply.105";
	"p10.124" -> "broadcast.128";
	"multiply.105" -> "multiply.129";
	"broadcast.128" -> "multiply.129";
	"broadcast.2" -> "add.138";
	"multiply.129" -> "add.138";
	"constant.12" -> "multiply.3";
	"p9.106" -> "multiply.3";
	"multiply.3" -> "broadcast.6";
	"multiply.105" -> "multiply.115";
	"multiply.105" -> "multiply.115";
	"p3.6" -> "convert.114";
	"convert.114" -> "broadcast.116";
	"multiply.115" -> "multiply.117";
	"broadcast.116" -> "multiply.117";
	"broadcast.6" -> "add.118";
	"multiply.117" -> "add.118";
	"add.118" -> "sqrt.119";
	"p2.5" -> "broadcast.120";
	"sqrt.119" -> "divide.121";
	"broadcast.120" -> "divide.121";
	"p1.3" -> "broadcast.122";
	"divide.121" -> "add.123";
	"broadcast.122" -> "add.123";
	"add.138" -> "divide.154";
	"add.123" -> "divide.154";
	"p0.1" -> "convert.153";
	"convert.153" -> "broadcast.155";
	"divide.154" -> "multiply.156";
	"broadcast.155" -> "multiply.156";
	"subtract.152" -> "add.157";
	"multiply.156" -> "add.157";
	"p13.145" -> "broadcast.211";
	"p15.210" -> "multiply.212";
	"broadcast.211" -> "multiply.212";
	"constant.15" -> "broadcast.7";
	"multiply.212" -> "multiply.215";
	"broadcast.7" -> "multiply.215";
	"p15.210" -> "subtract.216";
	"multiply.215" -> "subtract.216";
	"constant.16" -> "multiply.7";
	"p11.130" -> "multiply.7";
	"multiply.7" -> "broadcast.11";
	"divide.91" -> "compare.167";
	"constant.19" -> "compare.167";
	"compare.167" -> "select.169";
	"divide.91" -> "select.169";
	"constant.20" -> "select.169";
	"select.169" -> "reshape.171";
	"reshape.171" -> "broadcast.172";
	"get-tuple-element.36" -> "multiply.173";
	"broadcast.172" -> "multiply.173";
	"p10.124" -> "broadcast.194";
	"multiply.173" -> "multiply.195";
	"broadcast.194" -> "multiply.195";
	"broadcast.11" -> "add.203";
	"multiply.195" -> "add.203";
	"constant.21" -> "multiply.8";
	"p9.106" -> "multiply.8";
	"multiply.8" -> "broadcast.14";
	"multiply.173" -> "multiply.182";
	"multiply.173" -> "multiply.182";
	"p3.6" -> "convert.181";
	"convert.181" -> "broadcast.183";
	"multiply.182" -> "multiply.184";
	"broadcast.183" -> "multiply.184";
	"broadcast.14" -> "add.185";
	"multiply.184" -> "add.185";
	"add.185" -> "sqrt.186";
	"p2.5" -> "broadcast.187";
	"sqrt.186" -> "divide.188";
	"broadcast.187" -> "divide.188";
	"p1.3" -> "broadcast.189";
	"divide.188" -> "add.190";
	"broadcast.189" -> "add.190";
	"add.203" -> "divide.218";
	"add.190" -> "divide.218";
	"p0.1" -> "convert.217";
	"convert.217" -> "broadcast.219";
	"divide.218" -> "multiply.220";
	"broadcast.219" -> "multiply.220";
	"subtract.216" -> "add.221";
	"multiply.220" -> "add.221";
	"add.157" -> "tuple.222";
	"add.221" -> "tuple.222";
	"multiply.173" -> "tuple.222";
	"multiply.105" -> "tuple.222";
	"power.86" -> "tuple.222";
	"add.138" -> "tuple.222";
	"add.118" -> "tuple.222";
	"add.203" -> "tuple.222";
	"add.185" -> "tuple.222";
}