digraph HloModule {
	"p20.254" [label="p20.254 \n bf16[4,4]"];
	"p19.253" [label="p19.253 \n bf16[] parameter(19), frontend_attributes="];
	"broadcast.255" [label="broadcast.255 \n bf16[4,4]"];
	"multiply.256" [label="multiply.256 \n bf16[4,4]"];
	"p18.252" [label="p18.252 \n bf16[] parameter(18), frontend_attributes="];
	"broadcast.257" [label="broadcast.257 \n bf16[4,4]"];
	"multiply.259" [label="multiply.259 \n bf16[4,4]"];
	"subtract.260" [label="subtract.260 \n bf16[4,4]"];
	"p17.243" [label="p17.243 \n bf16[4,4]"];
	"p16.242" [label="p16.242 \n bf16[] parameter(16), frontend_attributes="];
	"broadcast.244" [label="broadcast.244 \n bf16[4,4]"];
	"multiply.245" [label="multiply.245 \n bf16[4,4]"];
	"p6.135" [label="p6.135 \n bf16[4,4]"];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"convert.136" [label="convert.136 \n bf16[] convert(f32[] %p0.1), metadata="];
	"constant.5" [label="constant.5 \n bf16[1]"];
	"p7.159" [label="p7.159 \n bf16[1]"];
	"multiply.148" [label="multiply.148 \n bf16[4,4]"];
	"constant.149" [label="constant.149 \n bf16[] constant(0), metadata="];
	"reduce.155" [label="reduce.155 \n bf16[] reduce(bf16[4,4]"];
	"sqrt.156" [label="sqrt.156 \n bf16[] sqrt(bf16[] %reduce.155), metadata="];
	"multiply.158" [label="multiply.158 \n bf16[] multiply(bf16[] %sqrt.156, bf16[] %sqrt.156), metadata="];
	"reshape.5" [label="reshape.5 \n bf16[1]"];
	"add.161" [label="add.161 \n bf16[1]"];
	"p5.109" [label="p5.109 \n bf16[4,4]"];
	"convert.110" [label="convert.110 \n bf16[] convert(f32[] %p0.1), metadata="];
	"multiply.122" [label="multiply.122 \n bf16[4,4]"];
	"constant.123" [label="constant.123 \n bf16[] constant(0), metadata="];
	"reduce.129" [label="reduce.129 \n bf16[] reduce(bf16[4,4]"];
	"sqrt.130" [label="sqrt.130 \n bf16[] sqrt(bf16[] %reduce.129), metadata="];
	"multiply.132" [label="multiply.132 \n bf16[] multiply(bf16[] %sqrt.130, bf16[] %sqrt.130), metadata="];
	"reshape.6" [label="reshape.6 \n bf16[1]"];
	"add.163" [label="add.163 \n bf16[1]"];
	"p4.83" [label="p4.83 \n bf16[1,4]"];
	"convert.84" [label="convert.84 \n bf16[] convert(f32[] %p0.1), metadata="];
	"multiply.96" [label="multiply.96 \n bf16[1,4]"];
	"constant.97" [label="constant.97 \n bf16[] constant(0), metadata="];
	"reduce.103" [label="reduce.103 \n bf16[] reduce(bf16[1,4]"];
	"sqrt.104" [label="sqrt.104 \n bf16[] sqrt(bf16[] %reduce.103), metadata="];
	"multiply.106" [label="multiply.106 \n bf16[] multiply(bf16[] %sqrt.104, bf16[] %sqrt.104), metadata="];
	"reshape.7" [label="reshape.7 \n bf16[1]"];
	"add.165" [label="add.165 \n bf16[1]"];
	"p3.57" [label="p3.57 \n bf16[4]"];
	"convert.58" [label="convert.58 \n bf16[] convert(f32[] %p0.1), metadata="];
	"multiply.70" [label="multiply.70 \n bf16[4]"];
	"constant.71" [label="constant.71 \n bf16[] constant(0), metadata="];
	"reduce.77" [label="reduce.77 \n bf16[] reduce(bf16[4]"];
	"sqrt.78" [label="sqrt.78 \n bf16[] sqrt(bf16[] %reduce.77), metadata="];
	"multiply.80" [label="multiply.80 \n bf16[] multiply(bf16[] %sqrt.78, bf16[] %sqrt.78), metadata="];
	"reshape.8" [label="reshape.8 \n bf16[1]"];
	"add.167" [label="add.167 \n bf16[1]"];
	"p2.31" [label="p2.31 \n bf16[4]"];
	"convert.32" [label="convert.32 \n bf16[] convert(f32[] %p0.1), metadata="];
	"multiply.44" [label="multiply.44 \n bf16[4]"];
	"constant.45" [label="constant.45 \n bf16[] constant(0), metadata="];
	"reduce.51" [label="reduce.51 \n bf16[] reduce(bf16[4]"];
	"sqrt.52" [label="sqrt.52 \n bf16[] sqrt(bf16[] %reduce.51), metadata="];
	"multiply.54" [label="multiply.54 \n bf16[] multiply(bf16[] %sqrt.52, bf16[] %sqrt.52), metadata="];
	"reshape.9" [label="reshape.9 \n bf16[1]"];
	"add.169" [label="add.169 \n bf16[1]"];
	"p1.5" [label="p1.5 \n bf16[1]"];
	"convert.6" [label="convert.6 \n bf16[] convert(f32[] %p0.1), metadata="];
	"multiply.10" [label="multiply.10 \n bf16[1]"];
	"add.171" [label="add.171 \n bf16[1]"];
	"convert.174" [label="convert.174 \n bf16[] convert(f32[] %p0.1), metadata="];
	"constant.7" [label="constant.7 \n bf16[1]"];
	"power.202" [label="power.202 \n bf16[1]"];
	"p12.197" [label="p12.197 \n bf16[] parameter(12), frontend_attributes="];
	"reshape.14" [label="reshape.14 \n bf16[1]"];
	"add.204" [label="add.204 \n bf16[1]"];
	"divide.207" [label="divide.207 \n bf16[1]"];
	"constant.33" [label="constant.33 \n bf16[1]"];
	"compare.214" [label="compare.214 \n pred[1]"];
	"constant.34" [label="constant.34 \n bf16[1]"];
	"select.216" [label="select.216 \n bf16[1]"];
	"reshape.218" [label="reshape.218 \n bf16[] reshape(bf16[1]"];
	"broadcast.220" [label="broadcast.220 \n bf16[4,4]"];
	"multiply.221" [label="multiply.221 \n bf16[4,4]"];
	"p15.236" [label="p15.236 \n bf16[] parameter(15), frontend_attributes="];
	"broadcast.240" [label="broadcast.240 \n bf16[4,4]"];
	"multiply.241" [label="multiply.241 \n bf16[4,4]"];
	"add.246" [label="add.246 \n bf16[4,4]"];
	"p14.223" [label="p14.223 \n bf16[4,4]"];
	"p13.222" [label="p13.222 \n bf16[] parameter(13), frontend_attributes="];
	"broadcast.224" [label="broadcast.224 \n bf16[4,4]"];
	"multiply.225" [label="multiply.225 \n bf16[4,4]"];
	"multiply.227" [label="multiply.227 \n bf16[4,4]"];
	"p11.191" [label="p11.191 \n f32[] parameter(11), frontend_attributes="];
	"convert.226" [label="convert.226 \n bf16[] convert(f32[] %p11.191), metadata="];
	"broadcast.228" [label="broadcast.228 \n bf16[4,4]"];
	"multiply.229" [label="multiply.229 \n bf16[4,4]"];
	"add.230" [label="add.230 \n bf16[4,4]"];
	"sqrt.231" [label="sqrt.231 \n bf16[4,4]"];
	"p10.190" [label="p10.190 \n bf16[] parameter(10), frontend_attributes="];
	"broadcast.232" [label="broadcast.232 \n bf16[4,4]"];
	"divide.233" [label="divide.233 \n bf16[4,4]"];
	"p9.188" [label="p9.188 \n bf16[] parameter(9), frontend_attributes="];
	"broadcast.234" [label="broadcast.234 \n bf16[4,4]"];
	"add.235" [label="add.235 \n bf16[4,4]"];
	"divide.262" [label="divide.262 \n bf16[4,4]"];
	"p8.186" [label="p8.186 \n f32[] parameter(8), frontend_attributes="];
	"convert.261" [label="convert.261 \n bf16[] convert(f32[] %p8.186), metadata="];
	"broadcast.263" [label="broadcast.263 \n bf16[4,4]"];
	"multiply.264" [label="multiply.264 \n bf16[4,4]"];
	"add.265" [label="add.265 \n bf16[4,4]"];
	"p29.447" [label="p29.447 \n bf16[4]"];
	"broadcast.448" [label="broadcast.448 \n bf16[4]"];
	"multiply.449" [label="multiply.449 \n bf16[4]"];
	"broadcast.1" [label="broadcast.1 \n bf16[4]"];
	"multiply.452" [label="multiply.452 \n bf16[4]"];
	"subtract.453" [label="subtract.453 \n bf16[4]"];
	"p28.437" [label="p28.437 \n bf16[4]"];
	"broadcast.438" [label="broadcast.438 \n bf16[4]"];
	"multiply.439" [label="multiply.439 \n bf16[4]"];
	"constant.22" [label="constant.22 \n bf16[1]"];
	"compare.412" [label="compare.412 \n pred[1]"];
	"constant.23" [label="constant.23 \n bf16[1]"];
	"select.414" [label="select.414 \n bf16[1]"];
	"reshape.416" [label="reshape.416 \n bf16[] reshape(bf16[1]"];
	"broadcast.417" [label="broadcast.417 \n bf16[4]"];
	"multiply.418" [label="multiply.418 \n bf16[4]"];
	"broadcast.435" [label="broadcast.435 \n bf16[4]"];
	"multiply.436" [label="multiply.436 \n bf16[4]"];
	"add.440" [label="add.440 \n bf16[4]"];
	"p27.419" [label="p27.419 \n bf16[4]"];
	"broadcast.420" [label="broadcast.420 \n bf16[4]"];
	"multiply.421" [label="multiply.421 \n bf16[4]"];
	"multiply.423" [label="multiply.423 \n bf16[4]"];
	"convert.422" [label="convert.422 \n bf16[] convert(f32[] %p11.191), metadata="];
	"broadcast.424" [label="broadcast.424 \n bf16[4]"];
	"multiply.425" [label="multiply.425 \n bf16[4]"];
	"add.426" [label="add.426 \n bf16[4]"];
	"sqrt.427" [label="sqrt.427 \n bf16[4]"];
	"broadcast.428" [label="broadcast.428 \n bf16[4]"];
	"divide.429" [label="divide.429 \n bf16[4]"];
	"broadcast.430" [label="broadcast.430 \n bf16[4]"];
	"add.431" [label="add.431 \n bf16[4]"];
	"divide.455" [label="divide.455 \n bf16[4]"];
	"convert.454" [label="convert.454 \n bf16[] convert(f32[] %p8.186), metadata="];
	"broadcast.456" [label="broadcast.456 \n bf16[4]"];
	"multiply.457" [label="multiply.457 \n bf16[4]"];
	"add.458" [label="add.458 \n bf16[4]"];
	"p26.383" [label="p26.383 \n bf16[1,4]"];
	"broadcast.384" [label="broadcast.384 \n bf16[1,4]"];
	"multiply.385" [label="multiply.385 \n bf16[1,4]"];
	"broadcast.386" [label="broadcast.386 \n bf16[1,4]"];
	"multiply.388" [label="multiply.388 \n bf16[1,4]"];
	"subtract.389" [label="subtract.389 \n bf16[1,4]"];
	"p25.374" [label="p25.374 \n bf16[1,4]"];
	"broadcast.375" [label="broadcast.375 \n bf16[1,4]"];
	"multiply.376" [label="multiply.376 \n bf16[1,4]"];
	"constant.25" [label="constant.25 \n bf16[1]"];
	"compare.348" [label="compare.348 \n pred[1]"];
	"constant.26" [label="constant.26 \n bf16[1]"];
	"select.350" [label="select.350 \n bf16[1]"];
	"reshape.352" [label="reshape.352 \n bf16[] reshape(bf16[1]"];
	"broadcast.9" [label="broadcast.9 \n bf16[1,4]"];
	"multiply.355" [label="multiply.355 \n bf16[1,4]"];
	"broadcast.372" [label="broadcast.372 \n bf16[1,4]"];
	"multiply.373" [label="multiply.373 \n bf16[1,4]"];
	"add.377" [label="add.377 \n bf16[1,4]"];
	"p24.356" [label="p24.356 \n bf16[1,4]"];
	"broadcast.357" [label="broadcast.357 \n bf16[1,4]"];
	"multiply.358" [label="multiply.358 \n bf16[1,4]"];
	"multiply.360" [label="multiply.360 \n bf16[1,4]"];
	"convert.359" [label="convert.359 \n bf16[] convert(f32[] %p11.191), metadata="];
	"broadcast.361" [label="broadcast.361 \n bf16[1,4]"];
	"multiply.362" [label="multiply.362 \n bf16[1,4]"];
	"add.363" [label="add.363 \n bf16[1,4]"];
	"sqrt.364" [label="sqrt.364 \n bf16[1,4]"];
	"broadcast.365" [label="broadcast.365 \n bf16[1,4]"];
	"divide.366" [label="divide.366 \n bf16[1,4]"];
	"broadcast.367" [label="broadcast.367 \n bf16[1,4]"];
	"add.368" [label="add.368 \n bf16[1,4]"];
	"divide.391" [label="divide.391 \n bf16[1,4]"];
	"convert.390" [label="convert.390 \n bf16[] convert(f32[] %p8.186), metadata="];
	"broadcast.392" [label="broadcast.392 \n bf16[1,4]"];
	"multiply.393" [label="multiply.393 \n bf16[1,4]"];
	"add.394" [label="add.394 \n bf16[1,4]"];
	"p23.319" [label="p23.319 \n bf16[4,4]"];
	"broadcast.320" [label="broadcast.320 \n bf16[4,4]"];
	"multiply.321" [label="multiply.321 \n bf16[4,4]"];
	"broadcast.322" [label="broadcast.322 \n bf16[4,4]"];
	"multiply.324" [label="multiply.324 \n bf16[4,4]"];
	"subtract.325" [label="subtract.325 \n bf16[4,4]"];
	"p22.310" [label="p22.310 \n bf16[4,4]"];
	"broadcast.311" [label="broadcast.311 \n bf16[4,4]"];
	"multiply.312" [label="multiply.312 \n bf16[4,4]"];
	"constant.28" [label="constant.28 \n bf16[1]"];
	"compare.284" [label="compare.284 \n pred[1]"];
	"constant.31" [label="constant.31 \n bf16[1]"];
	"select.286" [label="select.286 \n bf16[1]"];
	"reshape.288" [label="reshape.288 \n bf16[] reshape(bf16[1]"];
	"broadcast.290" [label="broadcast.290 \n bf16[4,4]"];
	"multiply.291" [label="multiply.291 \n bf16[4,4]"];
	"broadcast.308" [label="broadcast.308 \n bf16[4,4]"];
	"multiply.309" [label="multiply.309 \n bf16[4,4]"];
	"add.313" [label="add.313 \n bf16[4,4]"];
	"p21.292" [label="p21.292 \n bf16[4,4]"];
	"broadcast.293" [label="broadcast.293 \n bf16[4,4]"];
	"multiply.294" [label="multiply.294 \n bf16[4,4]"];
	"multiply.296" [label="multiply.296 \n bf16[4,4]"];
	"convert.295" [label="convert.295 \n bf16[] convert(f32[] %p11.191), metadata="];
	"broadcast.297" [label="broadcast.297 \n bf16[4,4]"];
	"multiply.298" [label="multiply.298 \n bf16[4,4]"];
	"add.299" [label="add.299 \n bf16[4,4]"];
	"sqrt.300" [label="sqrt.300 \n bf16[4,4]"];
	"broadcast.301" [label="broadcast.301 \n bf16[4,4]"];
	"divide.302" [label="divide.302 \n bf16[4,4]"];
	"broadcast.303" [label="broadcast.303 \n bf16[4,4]"];
	"add.304" [label="add.304 \n bf16[4,4]"];
	"divide.327" [label="divide.327 \n bf16[4,4]"];
	"convert.326" [label="convert.326 \n bf16[] convert(f32[] %p8.186), metadata="];
	"broadcast.328" [label="broadcast.328 \n bf16[4,4]"];
	"multiply.329" [label="multiply.329 \n bf16[4,4]"];
	"add.330" [label="add.330 \n bf16[4,4]"];
	"p32.513" [label="p32.513 \n bf16[4]"];
	"broadcast.514" [label="broadcast.514 \n bf16[4]"];
	"multiply.515" [label="multiply.515 \n bf16[4]"];
	"multiply.518" [label="multiply.518 \n bf16[4]"];
	"subtract.519" [label="subtract.519 \n bf16[4]"];
	"p31.503" [label="p31.503 \n bf16[4]"];
	"broadcast.504" [label="broadcast.504 \n bf16[4]"];
	"multiply.505" [label="multiply.505 \n bf16[4]"];
	"constant.15" [label="constant.15 \n bf16[1]"];
	"compare.478" [label="compare.478 \n pred[1]"];
	"constant.16" [label="constant.16 \n bf16[1]"];
	"select.480" [label="select.480 \n bf16[1]"];
	"reshape.482" [label="reshape.482 \n bf16[] reshape(bf16[1]"];
	"broadcast.483" [label="broadcast.483 \n bf16[4]"];
	"multiply.484" [label="multiply.484 \n bf16[4]"];
	"broadcast.501" [label="broadcast.501 \n bf16[4]"];
	"multiply.502" [label="multiply.502 \n bf16[4]"];
	"add.506" [label="add.506 \n bf16[4]"];
	"p30.485" [label="p30.485 \n bf16[4]"];
	"broadcast.486" [label="broadcast.486 \n bf16[4]"];
	"multiply.487" [label="multiply.487 \n bf16[4]"];
	"multiply.489" [label="multiply.489 \n bf16[4]"];
	"convert.488" [label="convert.488 \n bf16[] convert(f32[] %p11.191), metadata="];
	"broadcast.490" [label="broadcast.490 \n bf16[4]"];
	"multiply.491" [label="multiply.491 \n bf16[4]"];
	"add.492" [label="add.492 \n bf16[4]"];
	"sqrt.493" [label="sqrt.493 \n bf16[4]"];
	"broadcast.494" [label="broadcast.494 \n bf16[4]"];
	"divide.495" [label="divide.495 \n bf16[4]"];
	"broadcast.496" [label="broadcast.496 \n bf16[4]"];
	"add.497" [label="add.497 \n bf16[4]"];
	"divide.521" [label="divide.521 \n bf16[4]"];
	"convert.520" [label="convert.520 \n bf16[] convert(f32[] %p8.186), metadata="];
	"broadcast.522" [label="broadcast.522 \n bf16[4]"];
	"multiply.523" [label="multiply.523 \n bf16[4]"];
	"add.524" [label="add.524 \n bf16[4]"];
	"p35.572" [label="p35.572 \n bf16[1]"];
	"multiply.574" [label="multiply.574 \n bf16[1]"];
	"multiply.577" [label="multiply.577 \n bf16[1]"];
	"subtract.578" [label="subtract.578 \n bf16[1]"];
	"p34.564" [label="p34.564 \n bf16[1]"];
	"reshape.3" [label="reshape.3 \n bf16[1]"];
	"multiply.566" [label="multiply.566 \n bf16[1]"];
	"constant.10" [label="constant.10 \n bf16[1]"];
	"compare.544" [label="compare.544 \n pred[1]"];
	"constant.11" [label="constant.11 \n bf16[1]"];
	"select.546" [label="select.546 \n bf16[1]"];
	"multiply.547" [label="multiply.547 \n bf16[1]"];
	"reshape.20" [label="reshape.20 \n bf16[1]"];
	"multiply.563" [label="multiply.563 \n bf16[1]"];
	"add.567" [label="add.567 \n bf16[1]"];
	"p33.548" [label="p33.548 \n bf16[1]"];
	"reshape.21" [label="reshape.21 \n bf16[1]"];
	"multiply.550" [label="multiply.550 \n bf16[1]"];
	"multiply.552" [label="multiply.552 \n bf16[1]"];
	"convert.551" [label="convert.551 \n bf16[] convert(f32[] %p11.191), metadata="];
	"reshape.22" [label="reshape.22 \n bf16[1]"];
	"multiply.554" [label="multiply.554 \n bf16[1]"];
	"add.555" [label="add.555 \n bf16[1]"];
	"sqrt.556" [label="sqrt.556 \n bf16[1]"];
	"reshape.23" [label="reshape.23 \n bf16[1]"];
	"divide.558" [label="divide.558 \n bf16[1]"];
	"reshape.24" [label="reshape.24 \n bf16[1]"];
	"add.560" [label="add.560 \n bf16[1]"];
	"divide.580" [label="divide.580 \n bf16[1]"];
	"convert.579" [label="convert.579 \n bf16[] convert(f32[] %p8.186), metadata="];
	"reshape.25" [label="reshape.25 \n bf16[1]"];
	"multiply.582" [label="multiply.582 \n bf16[1]"];
	"add.583" [label="add.583 \n bf16[1]"];
	"tuple.593" [label="tuple.593 \n (bf16[4,4]"]; 
 	"p19.253" -> "broadcast.255";
	"p20.254" -> "multiply.256";
	"broadcast.255" -> "multiply.256";
	"p18.252" -> "broadcast.257";
	"multiply.256" -> "multiply.259";
	"broadcast.257" -> "multiply.259";
	"p20.254" -> "subtract.260";
	"multiply.259" -> "subtract.260";
	"p16.242" -> "broadcast.244";
	"p17.243" -> "multiply.245";
	"broadcast.244" -> "multiply.245";
	"p0.1" -> "convert.136";
	"p6.135" -> "reduce-scatter.144";
	"convert.136" -> "reduce-scatter.144";
	"AddComputation.140" -> "reduce-scatter.144";
	"reduce-scatter.144" -> "get-tuple-element.145";
	"get-tuple-element.145" -> "multiply.148";
	"get-tuple-element.145" -> "multiply.148";
	"multiply.148" -> "reduce.155";
	"constant.149" -> "reduce.155";
	"AddComputation.151" -> "reduce.155";
	"reduce.155" -> "sqrt.156";
	"sqrt.156" -> "multiply.158";
	"sqrt.156" -> "multiply.158";
	"multiply.158" -> "reshape.5";
	"p7.159" -> "add.161";
	"reshape.5" -> "add.161";
	"p0.1" -> "convert.110";
	"p5.109" -> "reduce-scatter.118";
	"convert.110" -> "reduce-scatter.118";
	"AddComputation.114" -> "reduce-scatter.118";
	"reduce-scatter.118" -> "get-tuple-element.119";
	"get-tuple-element.119" -> "multiply.122";
	"get-tuple-element.119" -> "multiply.122";
	"multiply.122" -> "reduce.129";
	"constant.123" -> "reduce.129";
	"AddComputation.125" -> "reduce.129";
	"reduce.129" -> "sqrt.130";
	"sqrt.130" -> "multiply.132";
	"sqrt.130" -> "multiply.132";
	"multiply.132" -> "reshape.6";
	"add.161" -> "add.163";
	"reshape.6" -> "add.163";
	"p0.1" -> "convert.84";
	"p4.83" -> "reduce-scatter.92";
	"convert.84" -> "reduce-scatter.92";
	"AddComputation.88" -> "reduce-scatter.92";
	"reduce-scatter.92" -> "get-tuple-element.93";
	"get-tuple-element.93" -> "multiply.96";
	"get-tuple-element.93" -> "multiply.96";
	"multiply.96" -> "reduce.103";
	"constant.97" -> "reduce.103";
	"AddComputation.99" -> "reduce.103";
	"reduce.103" -> "sqrt.104";
	"sqrt.104" -> "multiply.106";
	"sqrt.104" -> "multiply.106";
	"multiply.106" -> "reshape.7";
	"add.163" -> "add.165";
	"reshape.7" -> "add.165";
	"p0.1" -> "convert.58";
	"p3.57" -> "reduce-scatter.66";
	"convert.58" -> "reduce-scatter.66";
	"AddComputation.62" -> "reduce-scatter.66";
	"reduce-scatter.66" -> "get-tuple-element.67";
	"get-tuple-element.67" -> "multiply.70";
	"get-tuple-element.67" -> "multiply.70";
	"multiply.70" -> "reduce.77";
	"constant.71" -> "reduce.77";
	"AddComputation.73" -> "reduce.77";
	"reduce.77" -> "sqrt.78";
	"sqrt.78" -> "multiply.80";
	"sqrt.78" -> "multiply.80";
	"multiply.80" -> "reshape.8";
	"add.165" -> "add.167";
	"reshape.8" -> "add.167";
	"p0.1" -> "convert.32";
	"p2.31" -> "reduce-scatter.40";
	"convert.32" -> "reduce-scatter.40";
	"AddComputation.36" -> "reduce-scatter.40";
	"reduce-scatter.40" -> "get-tuple-element.41";
	"get-tuple-element.41" -> "multiply.44";
	"get-tuple-element.41" -> "multiply.44";
	"multiply.44" -> "reduce.51";
	"constant.45" -> "reduce.51";
	"AddComputation.47" -> "reduce.51";
	"reduce.51" -> "sqrt.52";
	"sqrt.52" -> "multiply.54";
	"sqrt.52" -> "multiply.54";
	"multiply.54" -> "reshape.9";
	"add.167" -> "add.169";
	"reshape.9" -> "add.169";
	"p0.1" -> "convert.6";
	"p1.5" -> "reduce-scatter.14";
	"convert.6" -> "reduce-scatter.14";
	"AddComputation.10" -> "reduce-scatter.14";
	"reduce-scatter.14" -> "get-tuple-element.15";
	"get-tuple-element.15" -> "multiply.10";
	"get-tuple-element.15" -> "multiply.10";
	"add.169" -> "add.171";
	"multiply.10" -> "add.171";
	"p0.1" -> "convert.174";
	"add.171" -> "all-reduce.182";
	"convert.174" -> "all-reduce.182";
	"AddComputation.178" -> "all-reduce.182";
	"all-reduce.182" -> "get-tuple-element.183";
	"get-tuple-element.183" -> "power.202";
	"constant.7" -> "power.202";
	"p12.197" -> "reshape.14";
	"power.202" -> "add.204";
	"reshape.14" -> "add.204";
	"constant.5" -> "divide.207";
	"add.204" -> "divide.207";
	"divide.207" -> "compare.214";
	"constant.33" -> "compare.214";
	"compare.214" -> "select.216";
	"divide.207" -> "select.216";
	"constant.34" -> "select.216";
	"select.216" -> "reshape.218";
	"reshape.218" -> "broadcast.220";
	"get-tuple-element.145" -> "multiply.221";
	"broadcast.220" -> "multiply.221";
	"p15.236" -> "broadcast.240";
	"multiply.221" -> "multiply.241";
	"broadcast.240" -> "multiply.241";
	"multiply.245" -> "add.246";
	"multiply.241" -> "add.246";
	"p13.222" -> "broadcast.224";
	"p14.223" -> "multiply.225";
	"broadcast.224" -> "multiply.225";
	"multiply.221" -> "multiply.227";
	"multiply.221" -> "multiply.227";
	"p11.191" -> "convert.226";
	"convert.226" -> "broadcast.228";
	"multiply.227" -> "multiply.229";
	"broadcast.228" -> "multiply.229";
	"multiply.225" -> "add.230";
	"multiply.229" -> "add.230";
	"add.230" -> "sqrt.231";
	"p10.190" -> "broadcast.232";
	"sqrt.231" -> "divide.233";
	"broadcast.232" -> "divide.233";
	"p9.188" -> "broadcast.234";
	"divide.233" -> "add.235";
	"broadcast.234" -> "add.235";
	"add.246" -> "divide.262";
	"add.235" -> "divide.262";
	"p8.186" -> "convert.261";
	"convert.261" -> "broadcast.263";
	"divide.262" -> "multiply.264";
	"broadcast.263" -> "multiply.264";
	"subtract.260" -> "add.265";
	"multiply.264" -> "add.265";
	"all-reduce.182" -> "get-tuple-element.269";
	"add.265" -> "all-gather.270";
	"get-tuple-element.269" -> "all-gather.270";
	"all-gather.270" -> "get-tuple-element.271";
	"p19.253" -> "broadcast.448";
	"p29.447" -> "multiply.449";
	"broadcast.448" -> "multiply.449";
	"constant.18" -> "broadcast.1";
	"multiply.449" -> "multiply.452";
	"broadcast.1" -> "multiply.452";
	"p29.447" -> "subtract.453";
	"multiply.452" -> "subtract.453";
	"p16.242" -> "broadcast.438";
	"p28.437" -> "multiply.439";
	"broadcast.438" -> "multiply.439";
	"divide.207" -> "compare.412";
	"constant.22" -> "compare.412";
	"compare.412" -> "select.414";
	"divide.207" -> "select.414";
	"constant.23" -> "select.414";
	"select.414" -> "reshape.416";
	"reshape.416" -> "broadcast.417";
	"get-tuple-element.67" -> "multiply.418";
	"broadcast.417" -> "multiply.418";
	"p15.236" -> "broadcast.435";
	"multiply.418" -> "multiply.436";
	"broadcast.435" -> "multiply.436";
	"multiply.439" -> "add.440";
	"multiply.436" -> "add.440";
	"p13.222" -> "broadcast.420";
	"p27.419" -> "multiply.421";
	"broadcast.420" -> "multiply.421";
	"multiply.418" -> "multiply.423";
	"multiply.418" -> "multiply.423";
	"p11.191" -> "convert.422";
	"convert.422" -> "broadcast.424";
	"multiply.423" -> "multiply.425";
	"broadcast.424" -> "multiply.425";
	"multiply.421" -> "add.426";
	"multiply.425" -> "add.426";
	"add.426" -> "sqrt.427";
	"p10.190" -> "broadcast.428";
	"sqrt.427" -> "divide.429";
	"broadcast.428" -> "divide.429";
	"p9.188" -> "broadcast.430";
	"divide.429" -> "add.431";
	"broadcast.430" -> "add.431";
	"add.440" -> "divide.455";
	"add.431" -> "divide.455";
	"p8.186" -> "convert.454";
	"convert.454" -> "broadcast.456";
	"divide.455" -> "multiply.457";
	"broadcast.456" -> "multiply.457";
	"subtract.453" -> "add.458";
	"multiply.457" -> "add.458";
	"p19.253" -> "broadcast.384";
	"p26.383" -> "multiply.385";
	"broadcast.384" -> "multiply.385";
	"p18.252" -> "broadcast.386";
	"multiply.385" -> "multiply.388";
	"broadcast.386" -> "multiply.388";
	"p26.383" -> "subtract.389";
	"multiply.388" -> "subtract.389";
	"p16.242" -> "broadcast.375";
	"p25.374" -> "multiply.376";
	"broadcast.375" -> "multiply.376";
	"divide.207" -> "compare.348";
	"constant.25" -> "compare.348";
	"compare.348" -> "select.350";
	"divide.207" -> "select.350";
	"constant.26" -> "select.350";
	"select.350" -> "reshape.352";
	"reshape.352" -> "broadcast.9";
	"get-tuple-element.93" -> "multiply.355";
	"broadcast.9" -> "multiply.355";
	"p15.236" -> "broadcast.372";
	"multiply.355" -> "multiply.373";
	"broadcast.372" -> "multiply.373";
	"multiply.376" -> "add.377";
	"multiply.373" -> "add.377";
	"p13.222" -> "broadcast.357";
	"p24.356" -> "multiply.358";
	"broadcast.357" -> "multiply.358";
	"multiply.355" -> "multiply.360";
	"multiply.355" -> "multiply.360";
	"p11.191" -> "convert.359";
	"convert.359" -> "broadcast.361";
	"multiply.360" -> "multiply.362";
	"broadcast.361" -> "multiply.362";
	"multiply.358" -> "add.363";
	"multiply.362" -> "add.363";
	"add.363" -> "sqrt.364";
	"p10.190" -> "broadcast.365";
	"sqrt.364" -> "divide.366";
	"broadcast.365" -> "divide.366";
	"p9.188" -> "broadcast.367";
	"divide.366" -> "add.368";
	"broadcast.367" -> "add.368";
	"add.377" -> "divide.391";
	"add.368" -> "divide.391";
	"p8.186" -> "convert.390";
	"convert.390" -> "broadcast.392";
	"divide.391" -> "multiply.393";
	"broadcast.392" -> "multiply.393";
	"subtract.389" -> "add.394";
	"multiply.393" -> "add.394";
	"p19.253" -> "broadcast.320";
	"p23.319" -> "multiply.321";
	"broadcast.320" -> "multiply.321";
	"p18.252" -> "broadcast.322";
	"multiply.321" -> "multiply.324";
	"broadcast.322" -> "multiply.324";
	"p23.319" -> "subtract.325";
	"multiply.324" -> "subtract.325";
	"p16.242" -> "broadcast.311";
	"p22.310" -> "multiply.312";
	"broadcast.311" -> "multiply.312";
	"divide.207" -> "compare.284";
	"constant.28" -> "compare.284";
	"compare.284" -> "select.286";
	"divide.207" -> "select.286";
	"constant.31" -> "select.286";
	"select.286" -> "reshape.288";
	"reshape.288" -> "broadcast.290";
	"get-tuple-element.119" -> "multiply.291";
	"broadcast.290" -> "multiply.291";
	"p15.236" -> "broadcast.308";
	"multiply.291" -> "multiply.309";
	"broadcast.308" -> "multiply.309";
	"multiply.312" -> "add.313";
	"multiply.309" -> "add.313";
	"p13.222" -> "broadcast.293";
	"p21.292" -> "multiply.294";
	"broadcast.293" -> "multiply.294";
	"multiply.291" -> "multiply.296";
	"multiply.291" -> "multiply.296";
	"p11.191" -> "convert.295";
	"convert.295" -> "broadcast.297";
	"multiply.296" -> "multiply.298";
	"broadcast.297" -> "multiply.298";
	"multiply.294" -> "add.299";
	"multiply.298" -> "add.299";
	"add.299" -> "sqrt.300";
	"p10.190" -> "broadcast.301";
	"sqrt.300" -> "divide.302";
	"broadcast.301" -> "divide.302";
	"p9.188" -> "broadcast.303";
	"divide.302" -> "add.304";
	"broadcast.303" -> "add.304";
	"add.313" -> "divide.327";
	"add.304" -> "divide.327";
	"p8.186" -> "convert.326";
	"convert.326" -> "broadcast.328";
	"divide.327" -> "multiply.329";
	"broadcast.328" -> "multiply.329";
	"subtract.325" -> "add.330";
	"multiply.329" -> "add.330";
	"all-gather.270" -> "get-tuple-element.334";
	"add.330" -> "all-gather.335";
	"get-tuple-element.334" -> "all-gather.335";
	"all-gather.335" -> "get-tuple-element.398";
	"add.394" -> "all-gather.399";
	"get-tuple-element.398" -> "all-gather.399";
	"all-gather.399" -> "get-tuple-element.462";
	"add.458" -> "all-gather.463";
	"get-tuple-element.462" -> "all-gather.463";
	"all-gather.463" -> "get-tuple-element.464";
	"all-gather.335" -> "get-tuple-element.336";
	"p19.253" -> "broadcast.514";
	"p32.513" -> "multiply.515";
	"broadcast.514" -> "multiply.515";
	"constant.13" -> "broadcast";
	"multiply.515" -> "multiply.518";
	"broadcast" -> "multiply.518";
	"p32.513" -> "subtract.519";
	"multiply.518" -> "subtract.519";
	"p16.242" -> "broadcast.504";
	"p31.503" -> "multiply.505";
	"broadcast.504" -> "multiply.505";
	"divide.207" -> "compare.478";
	"constant.15" -> "compare.478";
	"compare.478" -> "select.480";
	"divide.207" -> "select.480";
	"constant.16" -> "select.480";
	"select.480" -> "reshape.482";
	"reshape.482" -> "broadcast.483";
	"get-tuple-element.41" -> "multiply.484";
	"broadcast.483" -> "multiply.484";
	"p15.236" -> "broadcast.501";
	"multiply.484" -> "multiply.502";
	"broadcast.501" -> "multiply.502";
	"multiply.505" -> "add.506";
	"multiply.502" -> "add.506";
	"p13.222" -> "broadcast.486";
	"p30.485" -> "multiply.487";
	"broadcast.486" -> "multiply.487";
	"multiply.484" -> "multiply.489";
	"multiply.484" -> "multiply.489";
	"p11.191" -> "convert.488";
	"convert.488" -> "broadcast.490";
	"multiply.489" -> "multiply.491";
	"broadcast.490" -> "multiply.491";
	"multiply.487" -> "add.492";
	"multiply.491" -> "add.492";
	"add.492" -> "sqrt.493";
	"p10.190" -> "broadcast.494";
	"sqrt.493" -> "divide.495";
	"broadcast.494" -> "divide.495";
	"p9.188" -> "broadcast.496";
	"divide.495" -> "add.497";
	"broadcast.496" -> "add.497";
	"add.506" -> "divide.521";
	"add.497" -> "divide.521";
	"p8.186" -> "convert.520";
	"convert.520" -> "broadcast.522";
	"divide.521" -> "multiply.523";
	"broadcast.522" -> "multiply.523";
	"subtract.519" -> "add.524";
	"multiply.523" -> "add.524";
	"all-gather.463" -> "get-tuple-element.528";
	"add.524" -> "all-gather.529";
	"get-tuple-element.528" -> "all-gather.529";
	"all-gather.529" -> "get-tuple-element.530";
	"all-gather.399" -> "get-tuple-element.400";
	"p19.253" -> "reshape";
	"p35.572" -> "multiply.574";
	"reshape" -> "multiply.574";
	"multiply.574" -> "multiply.577";
	"constant" -> "multiply.577";
	"p35.572" -> "subtract.578";
	"multiply.577" -> "subtract.578";
	"p16.242" -> "reshape.3";
	"p34.564" -> "multiply.566";
	"reshape.3" -> "multiply.566";
	"divide.207" -> "compare.544";
	"constant.10" -> "compare.544";
	"compare.544" -> "select.546";
	"divide.207" -> "select.546";
	"constant.11" -> "select.546";
	"get-tuple-element.15" -> "multiply.547";
	"select.546" -> "multiply.547";
	"p15.236" -> "reshape.20";
	"multiply.547" -> "multiply.563";
	"reshape.20" -> "multiply.563";
	"multiply.566" -> "add.567";
	"multiply.563" -> "add.567";
	"p13.222" -> "reshape.21";
	"p33.548" -> "multiply.550";
	"reshape.21" -> "multiply.550";
	"multiply.547" -> "multiply.552";
	"multiply.547" -> "multiply.552";
	"p11.191" -> "convert.551";
	"convert.551" -> "reshape.22";
	"multiply.552" -> "multiply.554";
	"reshape.22" -> "multiply.554";
	"multiply.550" -> "add.555";
	"multiply.554" -> "add.555";
	"add.555" -> "sqrt.556";
	"p10.190" -> "reshape.23";
	"sqrt.556" -> "divide.558";
	"reshape.23" -> "divide.558";
	"p9.188" -> "reshape.24";
	"divide.558" -> "add.560";
	"reshape.24" -> "add.560";
	"add.567" -> "divide.580";
	"add.560" -> "divide.580";
	"p8.186" -> "convert.579";
	"convert.579" -> "reshape.25";
	"divide.580" -> "multiply.582";
	"reshape.25" -> "multiply.582";
	"subtract.578" -> "add.583";
	"multiply.582" -> "add.583";
	"all-gather.529" -> "get-tuple-element.587";
	"add.583" -> "all-gather.588";
	"get-tuple-element.587" -> "all-gather.588";
	"all-gather.588" -> "get-tuple-element.589";
	"get-tuple-element.271" -> "tuple.593";
	"get-tuple-element.464" -> "tuple.593";
	"get-tuple-element.336" -> "tuple.593";
	"get-tuple-element.530" -> "tuple.593";
	"get-tuple-element.400" -> "tuple.593";
	"get-tuple-element.589" -> "tuple.593";
	"add.265" -> "tuple.593";
	"add.330" -> "tuple.593";
	"add.394" -> "tuple.593";
	"add.458" -> "tuple.593";
	"add.524" -> "tuple.593";
	"add.583" -> "tuple.593";
	"add.246" -> "tuple.593";
	"add.230" -> "tuple.593";
	"add.313" -> "tuple.593";
	"add.299" -> "tuple.593";
	"add.377" -> "tuple.593";
	"add.363" -> "tuple.593";
	"add.440" -> "tuple.593";
	"add.426" -> "tuple.593";
	"add.506" -> "tuple.593";
	"add.492" -> "tuple.593";
	"add.567" -> "tuple.593";
	"add.555" -> "tuple.593";
	"power.202" -> "tuple.593";
}