digraph HloModule {
	"p3.15" [label="p3.15 \n f32[120,784]"];
	"p9.106" [label="p9.106 \n s64[32]"];
	"broadcast.112" [label="broadcast.112 \n s64[32,10]"];
	"iota.1" [label="iota.1 \n s64[32,10]"];
	"compare.115" [label="compare.115 \n pred[32,10]"];
	"constant.110" [label="constant.110 \n f32[] constant(1), metadata="];
	"broadcast.117" [label="broadcast.117 \n f32[32,10]"];
	"constant.109" [label="constant.109 \n f32[] constant(0), metadata="];
	"broadcast.116" [label="broadcast.116 \n f32[32,10]"];
	"select.118" [label="select.118 \n f32[32,10]"];
	"negate.119" [label="negate.119 \n f32[32,10]"];
	"constant.122" [label="constant.122 \n s64[] constant(-100), metadata="];
	"broadcast.123" [label="broadcast.123 \n s64[32]"];
	"compare.124" [label="compare.124 \n pred[32]"];
	"constant.125" [label="constant.125 \n f32[] constant(1), metadata="];
	"broadcast.1" [label="broadcast.1 \n f32[32]"];
	"constant.127" [label="constant.127 \n f32[] constant(0), metadata="];
	"broadcast.2" [label="broadcast.2 \n f32[32]"];
	"select.0" [label="select.0 \n f32[32]"];
	"broadcast.4" [label="broadcast.4 \n f32[32,10]"];
	"multiply.131" [label="multiply.131 \n f32[32,10]"];
	"multiply.141" [label="multiply.141 \n f32[32,10]"];
	"constant.132" [label="constant.132 \n f32[] constant(0), metadata="];
	"reduce.137" [label="reduce.137 \n f32[] reduce(f32[32,10]"];
	"compare.139" [label="compare.139 \n pred[] compare(f32[] %reduce.137, f32[] %constant.132), direction=NE, metadata="];
	"constant.138" [label="constant.138 \n f32[] constant(1), metadata="];
	"select.140" [label="select.140 \n f32[] select(pred[] %compare.139, f32[] %reduce.137, f32[] %constant.138), metadata="];
	"broadcast.142" [label="broadcast.142 \n f32[32,10]"];
	"divide.143" [label="divide.143 \n f32[32,10]"];
	"p4.24" [label="p4.24 \n f32[32,1,28,28]"];
	"reshape.25" [label="reshape.25 \n f32[32,784]"];
	"transpose.23" [label="transpose.23 \n f32[784,120]"];
	"dot.26" [label="dot.26 \n f32[32,120]"];
	"p2.7" [label="p2.7 \n f32[120]"];
	"broadcast.30" [label="broadcast.30 \n f32[32,120]"];
	"add.31" [label="add.31 \n f32[32,120]"];
	"constant.32" [label="constant.32 \n f32[] constant(0), metadata="];
	"broadcast.33" [label="broadcast.33 \n f32[32,120]"];
	"maximum.34" [label="maximum.34 \n f32[32,120]"];
	"p5.35" [label="p5.35 \n f32[84,120]"];
	"transpose.53" [label="transpose.53 \n f32[120,84]"];
	"dot.54" [label="dot.54 \n f32[32,84]"];
	"p6.45" [label="p6.45 \n f32[84]"];
	"broadcast.58" [label="broadcast.58 \n f32[32,84]"];
	"add.59" [label="add.59 \n f32[32,84]"];
	"constant.60" [label="constant.60 \n f32[] constant(0), metadata="];
	"broadcast.61" [label="broadcast.61 \n f32[32,84]"];
	"maximum.62" [label="maximum.62 \n f32[32,84]"];
	"p7.63" [label="p7.63 \n f32[10,84]"];
	"transpose.81" [label="transpose.81 \n f32[84,10]"];
	"dot.82" [label="dot.82 \n f32[32,10]"];
	"p8.73" [label="p8.73 \n f32[10]"];
	"broadcast.86" [label="broadcast.86 \n f32[32,10]"];
	"add.87" [label="add.87 \n f32[32,10]"];
	"constant.88" [label="constant.88 \n f32[] constant(-inf), metadata="];
	"reduce.93" [label="reduce.93 \n f32[32]"];
	"broadcast.94" [label="broadcast.94 \n f32[32,10]"];
	"subtract.95" [label="subtract.95 \n f32[32,10]"];
	"exponential.96" [label="exponential.96 \n f32[32,10]"];
	"constant.97" [label="constant.97 \n f32[] constant(0), metadata="];
	"reduce.102" [label="reduce.102 \n f32[32]"];
	"log.103" [label="log.103 \n f32[32]"];
	"broadcast.104" [label="broadcast.104 \n f32[32,10]"];
	"subtract.105" [label="subtract.105 \n f32[32,10]"];
	"exponential.150" [label="exponential.150 \n f32[32,10]"];
	"constant.144" [label="constant.144 \n f32[] constant(0), metadata="];
	"reduce.149" [label="reduce.149 \n f32[32]"];
	"broadcast.151" [label="broadcast.151 \n f32[32,10]"];
	"multiply.152" [label="multiply.152 \n f32[32,10]"];
	"subtract.153" [label="subtract.153 \n f32[32,10]"];
	"constant.231" [label="constant.231 \n f32[] constant(0), metadata="];
	"reduce.237" [label="reduce.237 \n f32[10]"];
	"transpose.221" [label="transpose.221 \n f32[84,32]"];
	"constant.155" [label="constant.155 \n f32[] constant(0), metadata="];
	"broadcast.158" [label="broadcast.158 \n f32[32,84]"];
	"compare.159" [label="compare.159 \n pred[32,84]"];
	"dot.154" [label="dot.154 \n f32[32,84]"];
	"constant.156" [label="constant.156 \n f32[] constant(0), metadata="];
	"broadcast.157" [label="broadcast.157 \n f32[32,84]"];
	"select.160" [label="select.160 \n f32[32,84]"];
	"constant.205" [label="constant.205 \n f32[] constant(0), metadata="];
	"reduce.211" [label="reduce.211 \n f32[84]"];
	"transpose.195" [label="transpose.195 \n f32[120,32]"];
	"dot.1" [label="dot.1 \n f32[84,120]"];
	"constant.162" [label="constant.162 \n f32[] constant(0), metadata="];
	"broadcast.165" [label="broadcast.165 \n f32[32,120]"];
	"compare.166" [label="compare.166 \n pred[32,120]"];
	"dot.161" [label="dot.161 \n f32[32,120]"];
	"constant.163" [label="constant.163 \n f32[] constant(0), metadata="];
	"broadcast.164" [label="broadcast.164 \n f32[32,120]"];
	"select.167" [label="select.167 \n f32[32,120]"];
	"constant.179" [label="constant.179 \n f32[] constant(0), metadata="];
	"reduce.185" [label="reduce.185 \n f32[120]"];
	"reshape.168" [label="reshape.168 \n f32[32,784]"];
	"transpose.169" [label="transpose.169 \n f32[784,32]"];
	"dot.2" [label="dot.2 \n f32[120,784]"];
	"p1.6" [label="p1.6 \n f32[] parameter(1), frontend_attributes="];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"constant.281" [label="constant.281 \n f32[] constant(0.5), metadata="];
	"broadcast.6" [label="broadcast.6 \n f32[120,784]"];
	"multiply.285" [label="multiply.285 \n f32[120,784]"];
	"add.286" [label="add.286 \n f32[120,784]"];
	"constant.277" [label="constant.277 \n f32[] constant(0.5), metadata="];
	"multiply.2" [label="multiply.2 \n f32[] multiply(f32[] %p0.1, f32[] %constant.277), metadata="];
	"broadcast.7" [label="broadcast.7 \n f32[120]"];
	"multiply.291" [label="multiply.291 \n f32[120]"];
	"add.292" [label="add.292 \n f32[120]"];
	"constant.273" [label="constant.273 \n f32[] constant(0.5), metadata="];
	"multiply.4" [label="multiply.4 \n f32[] multiply(f32[] %p0.1, f32[] %constant.273), metadata="];
	"broadcast.8" [label="broadcast.8 \n f32[84,120]"];
	"multiply.297" [label="multiply.297 \n f32[84,120]"];
	"add.298" [label="add.298 \n f32[84,120]"];
	"constant.269" [label="constant.269 \n f32[] constant(0.5), metadata="];
	"multiply.6" [label="multiply.6 \n f32[] multiply(f32[] %p0.1, f32[] %constant.269), metadata="];
	"broadcast.9" [label="broadcast.9 \n f32[84]"];
	"multiply.303" [label="multiply.303 \n f32[84]"];
	"add.304" [label="add.304 \n f32[84]"];
	"constant.265" [label="constant.265 \n f32[] constant(0.5), metadata="];
	"multiply.8" [label="multiply.8 \n f32[] multiply(f32[] %p0.1, f32[] %constant.265), metadata="];
	"broadcast.10" [label="broadcast.10 \n f32[10,84]"];
	"multiply.309" [label="multiply.309 \n f32[10,84]"];
	"add.310" [label="add.310 \n f32[10,84]"];
	"constant.261" [label="constant.261 \n f32[] constant(0.5), metadata="];
	"multiply.10" [label="multiply.10 \n f32[] multiply(f32[] %p0.1, f32[] %constant.261), metadata="];
	"broadcast.11" [label="broadcast.11 \n f32[10]"];
	"multiply.315" [label="multiply.315 \n f32[10]"];
	"add.316" [label="add.316 \n f32[10]"];
	"broadcast.320" [label="broadcast.320 \n s64[32,10]"];
	"iota.3" [label="iota.3 \n s64[32,10]"];
	"compare.323" [label="compare.323 \n pred[32,10]"];
	"constant.318" [label="constant.318 \n f32[] constant(1), metadata="];
	"broadcast.325" [label="broadcast.325 \n f32[32,10]"];
	"constant.317" [label="constant.317 \n f32[] constant(0), metadata="];
	"broadcast.324" [label="broadcast.324 \n f32[32,10]"];
	"select.326" [label="select.326 \n f32[32,10]"];
	"broadcast.329" [label="broadcast.329 \n f32[32,10]"];
	"compare.330" [label="compare.330 \n pred[32,10]"];
	"broadcast.331" [label="broadcast.331 \n f32[32,10]"];
	"negate.327" [label="negate.327 \n f32[32,10]"];
	"multiply.328" [label="multiply.328 \n f32[32,10]"];
	"select.332" [label="select.332 \n f32[32,10]"];
	"constant.333" [label="constant.333 \n s64[] constant(-100), metadata="];
	"broadcast.334" [label="broadcast.334 \n s64[32]"];
	"compare.335" [label="compare.335 \n pred[32]"];
	"constant.336" [label="constant.336 \n f32[] constant(1), metadata="];
	"broadcast.12" [label="broadcast.12 \n f32[32]"];
	"constant.338" [label="constant.338 \n f32[] constant(0), metadata="];
	"broadcast.13" [label="broadcast.13 \n f32[32]"];
	"select.1" [label="select.1 \n f32[32]"];
	"broadcast.14" [label="broadcast.14 \n f32[32,10]"];
	"multiply.342" [label="multiply.342 \n f32[32,10]"];
	"multiply.349" [label="multiply.349 \n f32[32,10]"];
	"reduce.354" [label="reduce.354 \n f32[] reduce(f32[32,10]"];
	"constant.343" [label="constant.343 \n f32[] constant(0), metadata="];
	"reduce.348" [label="reduce.348 \n f32[] reduce(f32[32,10]"];
	"divide.355" [label="divide.355 \n f32[] divide(f32[] %reduce.354, f32[] %reduce.348), metadata="];
	"broadcast.262" [label="broadcast.262 \n f32[10]"];
	"multiply.263" [label="multiply.263 \n f32[10]"];
	"broadcast.266" [label="broadcast.266 \n f32[10,84]"];
	"multiply.267" [label="multiply.267 \n f32[10,84]"];
	"broadcast.270" [label="broadcast.270 \n f32[84]"];
	"multiply.271" [label="multiply.271 \n f32[84]"];
	"broadcast.274" [label="broadcast.274 \n f32[84,120]"];
	"multiply.275" [label="multiply.275 \n f32[84,120]"];
	"broadcast.278" [label="broadcast.278 \n f32[120]"];
	"multiply.279" [label="multiply.279 \n f32[120]"];
	"broadcast.282" [label="broadcast.282 \n f32[120,784]"];
	"multiply.283" [label="multiply.283 \n f32[120,784]"];
	"tuple.356" [label="tuple.356 \n (f32[120,784]"]; 
 	"p9.106" -> "broadcast.112";
	"broadcast.112" -> "compare.115";
	"iota.1" -> "compare.115";
	"constant.110" -> "broadcast.117";
	"constant.109" -> "broadcast.116";
	"compare.115" -> "select.118";
	"broadcast.117" -> "select.118";
	"broadcast.116" -> "select.118";
	"select.118" -> "negate.119";
	"constant.122" -> "broadcast.123";
	"p9.106" -> "compare.124";
	"broadcast.123" -> "compare.124";
	"constant.125" -> "broadcast.1";
	"constant.127" -> "broadcast.2";
	"compare.124" -> "select.0";
	"broadcast.1" -> "select.0";
	"broadcast.2" -> "select.0";
	"select.0" -> "broadcast.4";
	"broadcast.4" -> "multiply.131";
	"select.118" -> "multiply.131";
	"negate.119" -> "multiply.141";
	"multiply.131" -> "multiply.141";
	"multiply.131" -> "reduce.137";
	"constant.132" -> "reduce.137";
	"AddComputation.133" -> "reduce.137";
	"reduce.137" -> "compare.139";
	"constant.132" -> "compare.139";
	"compare.139" -> "select.140";
	"reduce.137" -> "select.140";
	"constant.138" -> "select.140";
	"select.140" -> "broadcast.142";
	"multiply.141" -> "divide.143";
	"broadcast.142" -> "divide.143";
	"p4.24" -> "reshape.25";
	"p3.15" -> "custom-call.13";
	"custom-call.13" -> "transpose.23";
	"reshape.25" -> "dot.26";
	"transpose.23" -> "dot.26";
	"p2.7" -> "custom-call.14";
	"custom-call.14" -> "broadcast.30";
	"dot.26" -> "add.31";
	"broadcast.30" -> "add.31";
	"constant.32" -> "broadcast.33";
	"add.31" -> "maximum.34";
	"broadcast.33" -> "maximum.34";
	"p5.35" -> "custom-call.15";
	"custom-call.15" -> "transpose.53";
	"maximum.34" -> "dot.54";
	"transpose.53" -> "dot.54";
	"p6.45" -> "custom-call.16";
	"custom-call.16" -> "broadcast.58";
	"dot.54" -> "add.59";
	"broadcast.58" -> "add.59";
	"constant.60" -> "broadcast.61";
	"add.59" -> "maximum.62";
	"broadcast.61" -> "maximum.62";
	"p7.63" -> "custom-call.17";
	"custom-call.17" -> "transpose.81";
	"maximum.62" -> "dot.82";
	"transpose.81" -> "dot.82";
	"p8.73" -> "custom-call.19";
	"custom-call.19" -> "broadcast.86";
	"dot.82" -> "add.87";
	"broadcast.86" -> "add.87";
	"add.87" -> "reduce.93";
	"constant.88" -> "reduce.93";
	"MaxComputation.89" -> "reduce.93";
	"reduce.93" -> "broadcast.94";
	"add.87" -> "subtract.95";
	"broadcast.94" -> "subtract.95";
	"subtract.95" -> "exponential.96";
	"exponential.96" -> "reduce.102";
	"constant.97" -> "reduce.102";
	"AddComputation.98" -> "reduce.102";
	"reduce.102" -> "log.103";
	"log.103" -> "broadcast.104";
	"subtract.95" -> "subtract.105";
	"broadcast.104" -> "subtract.105";
	"subtract.105" -> "exponential.150";
	"divide.143" -> "reduce.149";
	"constant.144" -> "reduce.149";
	"AddComputation.145" -> "reduce.149";
	"reduce.149" -> "broadcast.151";
	"exponential.150" -> "multiply.152";
	"broadcast.151" -> "multiply.152";
	"divide.143" -> "subtract.153";
	"multiply.152" -> "subtract.153";
	"subtract.153" -> "reduce.237";
	"constant.231" -> "reduce.237";
	"AddComputation.233" -> "reduce.237";
	"reduce.237" -> "custom-call.20";
	"maximum.62" -> "transpose.221";
	"subtract.153" -> "dot";
	"transpose.221" -> "dot";
	"dot" -> "custom-call.21";
	"constant.155" -> "broadcast.158";
	"maximum.62" -> "compare.159";
	"broadcast.158" -> "compare.159";
	"subtract.153" -> "dot.154";
	"custom-call.17" -> "dot.154";
	"constant.156" -> "broadcast.157";
	"compare.159" -> "select.160";
	"dot.154" -> "select.160";
	"broadcast.157" -> "select.160";
	"select.160" -> "reduce.211";
	"constant.205" -> "reduce.211";
	"AddComputation.207" -> "reduce.211";
	"reduce.211" -> "custom-call.22";
	"maximum.34" -> "transpose.195";
	"select.160" -> "dot.1";
	"transpose.195" -> "dot.1";
	"dot.1" -> "custom-call.23";
	"constant.162" -> "broadcast.165";
	"maximum.34" -> "compare.166";
	"broadcast.165" -> "compare.166";
	"select.160" -> "dot.161";
	"custom-call.15" -> "dot.161";
	"constant.163" -> "broadcast.164";
	"compare.166" -> "select.167";
	"dot.161" -> "select.167";
	"broadcast.164" -> "select.167";
	"select.167" -> "reduce.185";
	"constant.179" -> "reduce.185";
	"AddComputation.181" -> "reduce.185";
	"reduce.185" -> "custom-call.24";
	"p4.24" -> "reshape.168";
	"reshape.168" -> "transpose.169";
	"select.167" -> "dot.2";
	"transpose.169" -> "dot.2";
	"dot.2" -> "custom-call.25";
	"custom-call.20" -> "all-reduce.259";
	"custom-call.21" -> "all-reduce.259";
	"custom-call.22" -> "all-reduce.259";
	"custom-call.23" -> "all-reduce.259";
	"custom-call.24" -> "all-reduce.259";
	"custom-call.25" -> "all-reduce.259";
	"p1.6" -> "all-reduce.259";
	"AddComputation.255" -> "all-reduce.259";
	"all-reduce.259" -> "get-tuple-element.280";
	"p0.1" -> "multiply";
	"constant.281" -> "multiply";
	"multiply" -> "broadcast.6";
	"get-tuple-element.280" -> "multiply.285";
	"broadcast.6" -> "multiply.285";
	"p3.15" -> "add.286";
	"multiply.285" -> "add.286";
	"all-reduce.259" -> "get-tuple-element.276";
	"p0.1" -> "multiply.2";
	"constant.277" -> "multiply.2";
	"multiply.2" -> "broadcast.7";
	"get-tuple-element.276" -> "multiply.291";
	"broadcast.7" -> "multiply.291";
	"p2.7" -> "add.292";
	"multiply.291" -> "add.292";
	"all-reduce.259" -> "get-tuple-element.272";
	"p0.1" -> "multiply.4";
	"constant.273" -> "multiply.4";
	"multiply.4" -> "broadcast.8";
	"get-tuple-element.272" -> "multiply.297";
	"broadcast.8" -> "multiply.297";
	"p5.35" -> "add.298";
	"multiply.297" -> "add.298";
	"all-reduce.259" -> "get-tuple-element.268";
	"p0.1" -> "multiply.6";
	"constant.269" -> "multiply.6";
	"multiply.6" -> "broadcast.9";
	"get-tuple-element.268" -> "multiply.303";
	"broadcast.9" -> "multiply.303";
	"p6.45" -> "add.304";
	"multiply.303" -> "add.304";
	"all-reduce.259" -> "get-tuple-element.264";
	"p0.1" -> "multiply.8";
	"constant.265" -> "multiply.8";
	"multiply.8" -> "broadcast.10";
	"get-tuple-element.264" -> "multiply.309";
	"broadcast.10" -> "multiply.309";
	"p7.63" -> "add.310";
	"multiply.309" -> "add.310";
	"all-reduce.259" -> "get-tuple-element.260";
	"p0.1" -> "multiply.10";
	"constant.261" -> "multiply.10";
	"multiply.10" -> "broadcast.11";
	"get-tuple-element.260" -> "multiply.315";
	"broadcast.11" -> "multiply.315";
	"p8.73" -> "add.316";
	"multiply.315" -> "add.316";
	"p9.106" -> "broadcast.320";
	"broadcast.320" -> "compare.323";
	"iota.3" -> "compare.323";
	"constant.318" -> "broadcast.325";
	"constant.317" -> "broadcast.324";
	"compare.323" -> "select.326";
	"broadcast.325" -> "select.326";
	"broadcast.324" -> "select.326";
	"constant.318" -> "broadcast.329";
	"select.326" -> "compare.330";
	"broadcast.329" -> "compare.330";
	"constant.317" -> "broadcast.331";
	"select.326" -> "negate.327";
	"negate.327" -> "multiply.328";
	"subtract.105" -> "multiply.328";
	"compare.330" -> "select.332";
	"broadcast.331" -> "select.332";
	"multiply.328" -> "select.332";
	"constant.333" -> "broadcast.334";
	"p9.106" -> "compare.335";
	"broadcast.334" -> "compare.335";
	"constant.336" -> "broadcast.12";
	"constant.338" -> "broadcast.13";
	"compare.335" -> "select.1";
	"broadcast.12" -> "select.1";
	"broadcast.13" -> "select.1";
	"select.1" -> "broadcast.14";
	"broadcast.14" -> "multiply.342";
	"select.326" -> "multiply.342";
	"select.332" -> "multiply.349";
	"multiply.342" -> "multiply.349";
	"multiply.349" -> "reduce.354";
	"constant.317" -> "reduce.354";
	"AddComputation.350" -> "reduce.354";
	"multiply.342" -> "reduce.348";
	"constant.343" -> "reduce.348";
	"AddComputation.344" -> "reduce.348";
	"reduce.354" -> "divide.355";
	"reduce.348" -> "divide.355";
	"constant.261" -> "broadcast.262";
	"get-tuple-element.260" -> "multiply.263";
	"broadcast.262" -> "multiply.263";
	"constant.265" -> "broadcast.266";
	"get-tuple-element.264" -> "multiply.267";
	"broadcast.266" -> "multiply.267";
	"constant.269" -> "broadcast.270";
	"get-tuple-element.268" -> "multiply.271";
	"broadcast.270" -> "multiply.271";
	"constant.273" -> "broadcast.274";
	"get-tuple-element.272" -> "multiply.275";
	"broadcast.274" -> "multiply.275";
	"constant.277" -> "broadcast.278";
	"get-tuple-element.276" -> "multiply.279";
	"broadcast.278" -> "multiply.279";
	"constant.281" -> "broadcast.282";
	"get-tuple-element.280" -> "multiply.283";
	"broadcast.282" -> "multiply.283";
	"add.286" -> "tuple.356";
	"add.292" -> "tuple.356";
	"add.298" -> "tuple.356";
	"add.304" -> "tuple.356";
	"add.310" -> "tuple.356";
	"add.316" -> "tuple.356";
	"reshape.25" -> "tuple.356";
	"subtract.105" -> "tuple.356";
	"divide.355" -> "tuple.356";
	"multiply.263" -> "tuple.356";
	"multiply.267" -> "tuple.356";
	"multiply.271" -> "tuple.356";
	"multiply.275" -> "tuple.356";
	"multiply.279" -> "tuple.356";
	"multiply.283" -> "tuple.356";
}