digraph HloModule {
	"p2.19" [label="p2.19 \n f32[120,784]"];
	"p9.184" [label="p9.184 \n f32[120,784]"];
	"p3.28" [label="p3.28 \n f32[32,1,28,28]"];
	"reshape.29" [label="reshape.29 \n f32[32,784]"];
	"custom-call.12" [label="custom-call.12 \n f32[120,784]"];
	"transpose.27" [label="transpose.27 \n f32[784,120]"];
	"dot.30" [label="dot.30 \n f32[32,120]"];
	"p1.11" [label="p1.11 \n f32[120]"];
	"custom-call.13" [label="custom-call.13 \n f32[120]"];
	"broadcast.34" [label="broadcast.34 \n f32[32,120]"];
	"add.35" [label="add.35 \n f32[32,120]"];
	"constant.36" [label="constant.36 \n f32[] constant(0), metadata="];
	"broadcast.37" [label="broadcast.37 \n f32[32,120]"];
	"maximum.38" [label="maximum.38 \n f32[32,120]"];
	"constant.166" [label="constant.166 \n f32[] constant(0), metadata="];
	"broadcast.169" [label="broadcast.169 \n f32[32,120]"];
	"compare.170" [label="compare.170 \n pred[32,120]"];
	"p4.39" [label="p4.39 \n f32[84,120]"];
	"custom-call.15" [label="custom-call.15 \n f32[84,120]"];
	"transpose.57" [label="transpose.57 \n f32[120,84]"];
	"dot.58" [label="dot.58 \n f32[32,84]"];
	"p5.49" [label="p5.49 \n f32[84]"];
	"custom-call.16" [label="custom-call.16 \n f32[84]"];
	"broadcast.62" [label="broadcast.62 \n f32[32,84]"];
	"add.63" [label="add.63 \n f32[32,84]"];
	"constant.64" [label="constant.64 \n f32[] constant(0), metadata="];
	"broadcast.65" [label="broadcast.65 \n f32[32,84]"];
	"maximum.66" [label="maximum.66 \n f32[32,84]"];
	"constant.159" [label="constant.159 \n f32[] constant(0), metadata="];
	"broadcast.162" [label="broadcast.162 \n f32[32,84]"];
	"compare.163" [label="compare.163 \n pred[32,84]"];
	"p8.110" [label="p8.110 \n s64[32]"];
	"broadcast.116" [label="broadcast.116 \n s64[32,10]"];
	"iota.1" [label="iota.1 \n s64[32,10]"];
	"compare.119" [label="compare.119 \n pred[32,10]"];
	"constant.114" [label="constant.114 \n f32[] constant(1), metadata="];
	"broadcast.121" [label="broadcast.121 \n f32[32,10]"];
	"constant.113" [label="constant.113 \n f32[] constant(0), metadata="];
	"broadcast.120" [label="broadcast.120 \n f32[32,10]"];
	"select.122" [label="select.122 \n f32[32,10]"];
	"negate.123" [label="negate.123 \n f32[32,10]"];
	"constant.126" [label="constant.126 \n s64[] constant(-100), metadata="];
	"broadcast.127" [label="broadcast.127 \n s64[32]"];
	"compare.128" [label="compare.128 \n pred[32]"];
	"constant.129" [label="constant.129 \n f32[] constant(1), metadata="];
	"broadcast.1" [label="broadcast.1 \n f32[32]"];
	"constant.131" [label="constant.131 \n f32[] constant(0), metadata="];
	"broadcast.2" [label="broadcast.2 \n f32[32]"];
	"select.0" [label="select.0 \n f32[32]"];
	"broadcast.4" [label="broadcast.4 \n f32[32,10]"];
	"multiply.135" [label="multiply.135 \n f32[32,10]"];
	"multiply.145" [label="multiply.145 \n f32[32,10]"];
	"constant.136" [label="constant.136 \n f32[] constant(0), metadata="];
	"reduce.141" [label="reduce.141 \n f32[] reduce(f32[32,10]"];
	"compare.143" [label="compare.143 \n pred[] compare(f32[] %reduce.141, f32[] %constant.136), direction=NE, metadata="];
	"constant.142" [label="constant.142 \n f32[] constant(1), metadata="];
	"select.144" [label="select.144 \n f32[] select(pred[] %compare.143, f32[] %reduce.141, f32[] %constant.142), metadata="];
	"broadcast.146" [label="broadcast.146 \n f32[32,10]"];
	"divide.147" [label="divide.147 \n f32[32,10]"];
	"p6.67" [label="p6.67 \n f32[10,84]"];
	"custom-call.17" [label="custom-call.17 \n f32[10,84]"];
	"transpose.85" [label="transpose.85 \n f32[84,10]"];
	"dot.86" [label="dot.86 \n f32[32,10]"];
	"p7.77" [label="p7.77 \n f32[10]"];
	"custom-call.18" [label="custom-call.18 \n f32[10]"];
	"broadcast.90" [label="broadcast.90 \n f32[32,10]"];
	"add.91" [label="add.91 \n f32[32,10]"];
	"constant.92" [label="constant.92 \n f32[] constant(-inf), metadata="];
	"reduce.97" [label="reduce.97 \n f32[32]"];
	"broadcast.98" [label="broadcast.98 \n f32[32,10]"];
	"subtract.99" [label="subtract.99 \n f32[32,10]"];
	"exponential.100" [label="exponential.100 \n f32[32,10]"];
	"constant.101" [label="constant.101 \n f32[] constant(0), metadata="];
	"reduce.106" [label="reduce.106 \n f32[32]"];
	"log.107" [label="log.107 \n f32[32]"];
	"broadcast.108" [label="broadcast.108 \n f32[32,10]"];
	"subtract.109" [label="subtract.109 \n f32[32,10]"];
	"exponential.154" [label="exponential.154 \n f32[32,10]"];
	"constant.148" [label="constant.148 \n f32[] constant(0), metadata="];
	"reduce.153" [label="reduce.153 \n f32[32]"];
	"broadcast.155" [label="broadcast.155 \n f32[32,10]"];
	"multiply.156" [label="multiply.156 \n f32[32,10]"];
	"subtract.157" [label="subtract.157 \n f32[32,10]"];
	"dot.158" [label="dot.158 \n f32[32,84]"];
	"constant.160" [label="constant.160 \n f32[] constant(0), metadata="];
	"broadcast.161" [label="broadcast.161 \n f32[32,84]"];
	"select.164" [label="select.164 \n f32[32,84]"];
	"dot.165" [label="dot.165 \n f32[32,120]"];
	"constant.167" [label="constant.167 \n f32[] constant(0), metadata="];
	"broadcast.168" [label="broadcast.168 \n f32[32,120]"];
	"select.171" [label="select.171 \n f32[32,120]"];
	"reshape.172" [label="reshape.172 \n f32[32,784]"];
	"transpose.173" [label="transpose.173 \n f32[784,32]"];
	"dot" [label="dot \n f32[120,784]"];
	"custom-call.19" [label="custom-call.19 \n f32[120,784]"];
	"add.185" [label="add.185 \n f32[120,784]"];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"broadcast.5" [label="broadcast.5 \n f32[120,784]"];
	"multiply.186" [label="multiply.186 \n f32[120,784]"];
	"add.187" [label="add.187 \n f32[120,784]"];
	"p10.214" [label="p10.214 \n f32[120]"];
	"constant.197" [label="constant.197 \n f32[] constant(0), metadata="];
	"reduce.203" [label="reduce.203 \n f32[120]"];
	"custom-call.20" [label="custom-call.20 \n f32[120]"];
	"add.215" [label="add.215 \n f32[120]"];
	"broadcast.191" [label="broadcast.191 \n f32[120]"];
	"multiply.216" [label="multiply.216 \n f32[120]"];
	"add.217" [label="add.217 \n f32[120]"];
	"p11.238" [label="p11.238 \n f32[84,120]"];
	"transpose.227" [label="transpose.227 \n f32[120,32]"];
	"dot.1" [label="dot.1 \n f32[84,120]"];
	"custom-call.21" [label="custom-call.21 \n f32[84,120]"];
	"add.239" [label="add.239 \n f32[84,120]"];
	"broadcast.221" [label="broadcast.221 \n f32[84,120]"];
	"multiply.240" [label="multiply.240 \n f32[84,120]"];
	"add.241" [label="add.241 \n f32[84,120]"];
	"p12.268" [label="p12.268 \n f32[84]"];
	"constant.251" [label="constant.251 \n f32[] constant(0), metadata="];
	"reduce.257" [label="reduce.257 \n f32[84]"];
	"custom-call.23" [label="custom-call.23 \n f32[84]"];
	"add.269" [label="add.269 \n f32[84]"];
	"broadcast.245" [label="broadcast.245 \n f32[84]"];
	"multiply.270" [label="multiply.270 \n f32[84]"];
	"add.271" [label="add.271 \n f32[84]"];
	"p13.292" [label="p13.292 \n f32[10,84]"];
	"transpose.281" [label="transpose.281 \n f32[84,32]"];
	"dot.2" [label="dot.2 \n f32[10,84]"];
	"custom-call.24" [label="custom-call.24 \n f32[10,84]"];
	"add.293" [label="add.293 \n f32[10,84]"];
	"broadcast.275" [label="broadcast.275 \n f32[10,84]"];
	"multiply.294" [label="multiply.294 \n f32[10,84]"];
	"add.295" [label="add.295 \n f32[10,84]"];
	"p14.322" [label="p14.322 \n f32[10]"];
	"constant.305" [label="constant.305 \n f32[] constant(0), metadata="];
	"reduce.311" [label="reduce.311 \n f32[10]"];
	"custom-call.25" [label="custom-call.25 \n f32[10]"];
	"add.323" [label="add.323 \n f32[10]"];
	"broadcast.299" [label="broadcast.299 \n f32[10]"];
	"multiply.324" [label="multiply.324 \n f32[10]"];
	"add.325" [label="add.325 \n f32[10]"];
	"broadcast.329" [label="broadcast.329 \n s64[32,10]"];
	"iota.3" [label="iota.3 \n s64[32,10]"];
	"compare.332" [label="compare.332 \n pred[32,10]"];
	"constant.327" [label="constant.327 \n f32[] constant(1), metadata="];
	"broadcast.334" [label="broadcast.334 \n f32[32,10]"];
	"constant.326" [label="constant.326 \n f32[] constant(0), metadata="];
	"broadcast.333" [label="broadcast.333 \n f32[32,10]"];
	"select.335" [label="select.335 \n f32[32,10]"];
	"broadcast.338" [label="broadcast.338 \n f32[32,10]"];
	"compare.339" [label="compare.339 \n pred[32,10]"];
	"broadcast.340" [label="broadcast.340 \n f32[32,10]"];
	"negate.336" [label="negate.336 \n f32[32,10]"];
	"multiply.337" [label="multiply.337 \n f32[32,10]"];
	"select.341" [label="select.341 \n f32[32,10]"];
	"constant.342" [label="constant.342 \n s64[] constant(-100), metadata="];
	"broadcast.343" [label="broadcast.343 \n s64[32]"];
	"compare.344" [label="compare.344 \n pred[32]"];
	"constant.345" [label="constant.345 \n f32[] constant(1), metadata="];
	"broadcast.6" [label="broadcast.6 \n f32[32]"];
	"constant.347" [label="constant.347 \n f32[] constant(0), metadata="];
	"broadcast.7" [label="broadcast.7 \n f32[32]"];
	"select.1" [label="select.1 \n f32[32]"];
	"broadcast.9" [label="broadcast.9 \n f32[32,10]"];
	"multiply.351" [label="multiply.351 \n f32[32,10]"];
	"multiply.358" [label="multiply.358 \n f32[32,10]"];
	"reduce.363" [label="reduce.363 \n f32[] reduce(f32[32,10]"];
	"constant.352" [label="constant.352 \n f32[] constant(0), metadata="];
	"reduce.357" [label="reduce.357 \n f32[] reduce(f32[32,10]"];
	"divide.364" [label="divide.364 \n f32[] divide(f32[] %reduce.363, f32[] %reduce.357), metadata="];
	"tuple.365" [label="tuple.365 \n (f32[120,784]"]; 
 	"p3.28" -> "reshape.29";
	"p2.19" -> "custom-call.12";
	"custom-call.12" -> "transpose.27";
	"reshape.29" -> "dot.30";
	"transpose.27" -> "dot.30";
	"p1.11" -> "custom-call.13";
	"custom-call.13" -> "broadcast.34";
	"dot.30" -> "add.35";
	"broadcast.34" -> "add.35";
	"constant.36" -> "broadcast.37";
	"add.35" -> "maximum.38";
	"broadcast.37" -> "maximum.38";
	"constant.166" -> "broadcast.169";
	"maximum.38" -> "compare.170";
	"broadcast.169" -> "compare.170";
	"p4.39" -> "custom-call.15";
	"custom-call.15" -> "transpose.57";
	"maximum.38" -> "dot.58";
	"transpose.57" -> "dot.58";
	"p5.49" -> "custom-call.16";
	"custom-call.16" -> "broadcast.62";
	"dot.58" -> "add.63";
	"broadcast.62" -> "add.63";
	"constant.64" -> "broadcast.65";
	"add.63" -> "maximum.66";
	"broadcast.65" -> "maximum.66";
	"constant.159" -> "broadcast.162";
	"maximum.66" -> "compare.163";
	"broadcast.162" -> "compare.163";
	"p8.110" -> "broadcast.116";
	"broadcast.116" -> "compare.119";
	"iota.1" -> "compare.119";
	"constant.114" -> "broadcast.121";
	"constant.113" -> "broadcast.120";
	"compare.119" -> "select.122";
	"broadcast.121" -> "select.122";
	"broadcast.120" -> "select.122";
	"select.122" -> "negate.123";
	"constant.126" -> "broadcast.127";
	"p8.110" -> "compare.128";
	"broadcast.127" -> "compare.128";
	"constant.129" -> "broadcast.1";
	"constant.131" -> "broadcast.2";
	"compare.128" -> "select.0";
	"broadcast.1" -> "select.0";
	"broadcast.2" -> "select.0";
	"select.0" -> "broadcast.4";
	"broadcast.4" -> "multiply.135";
	"select.122" -> "multiply.135";
	"negate.123" -> "multiply.145";
	"multiply.135" -> "multiply.145";
	"multiply.135" -> "reduce.141";
	"constant.136" -> "reduce.141";
	"AddComputation.137" -> "reduce.141";
	"reduce.141" -> "compare.143";
	"constant.136" -> "compare.143";
	"compare.143" -> "select.144";
	"reduce.141" -> "select.144";
	"constant.142" -> "select.144";
	"select.144" -> "broadcast.146";
	"multiply.145" -> "divide.147";
	"broadcast.146" -> "divide.147";
	"p6.67" -> "custom-call.17";
	"custom-call.17" -> "transpose.85";
	"maximum.66" -> "dot.86";
	"transpose.85" -> "dot.86";
	"p7.77" -> "custom-call.18";
	"custom-call.18" -> "broadcast.90";
	"dot.86" -> "add.91";
	"broadcast.90" -> "add.91";
	"add.91" -> "reduce.97";
	"constant.92" -> "reduce.97";
	"MaxComputation.93" -> "reduce.97";
	"reduce.97" -> "broadcast.98";
	"add.91" -> "subtract.99";
	"broadcast.98" -> "subtract.99";
	"subtract.99" -> "exponential.100";
	"exponential.100" -> "reduce.106";
	"constant.101" -> "reduce.106";
	"AddComputation.102" -> "reduce.106";
	"reduce.106" -> "log.107";
	"log.107" -> "broadcast.108";
	"subtract.99" -> "subtract.109";
	"broadcast.108" -> "subtract.109";
	"subtract.109" -> "exponential.154";
	"divide.147" -> "reduce.153";
	"constant.148" -> "reduce.153";
	"AddComputation.149" -> "reduce.153";
	"reduce.153" -> "broadcast.155";
	"exponential.154" -> "multiply.156";
	"broadcast.155" -> "multiply.156";
	"divide.147" -> "subtract.157";
	"multiply.156" -> "subtract.157";
	"subtract.157" -> "dot.158";
	"custom-call.17" -> "dot.158";
	"constant.160" -> "broadcast.161";
	"compare.163" -> "select.164";
	"dot.158" -> "select.164";
	"broadcast.161" -> "select.164";
	"select.164" -> "dot.165";
	"custom-call.15" -> "dot.165";
	"constant.167" -> "broadcast.168";
	"compare.170" -> "select.171";
	"dot.165" -> "select.171";
	"broadcast.168" -> "select.171";
	"p3.28" -> "reshape.172";
	"reshape.172" -> "transpose.173";
	"select.171" -> "dot";
	"transpose.173" -> "dot";
	"dot" -> "custom-call.19";
	"p9.184" -> "add.185";
	"custom-call.19" -> "add.185";
	"p0.1" -> "broadcast.5";
	"add.185" -> "multiply.186";
	"broadcast.5" -> "multiply.186";
	"p2.19" -> "add.187";
	"multiply.186" -> "add.187";
	"select.171" -> "reduce.203";
	"constant.197" -> "reduce.203";
	"AddComputation.199" -> "reduce.203";
	"reduce.203" -> "custom-call.20";
	"p10.214" -> "add.215";
	"custom-call.20" -> "add.215";
	"p0.1" -> "broadcast.191";
	"add.215" -> "multiply.216";
	"broadcast.191" -> "multiply.216";
	"p1.11" -> "add.217";
	"multiply.216" -> "add.217";
	"maximum.38" -> "transpose.227";
	"select.164" -> "dot.1";
	"transpose.227" -> "dot.1";
	"dot.1" -> "custom-call.21";
	"p11.238" -> "add.239";
	"custom-call.21" -> "add.239";
	"p0.1" -> "broadcast.221";
	"add.239" -> "multiply.240";
	"broadcast.221" -> "multiply.240";
	"p4.39" -> "add.241";
	"multiply.240" -> "add.241";
	"select.164" -> "reduce.257";
	"constant.251" -> "reduce.257";
	"AddComputation.253" -> "reduce.257";
	"reduce.257" -> "custom-call.23";
	"p12.268" -> "add.269";
	"custom-call.23" -> "add.269";
	"p0.1" -> "broadcast.245";
	"add.269" -> "multiply.270";
	"broadcast.245" -> "multiply.270";
	"p5.49" -> "add.271";
	"multiply.270" -> "add.271";
	"maximum.66" -> "transpose.281";
	"subtract.157" -> "dot.2";
	"transpose.281" -> "dot.2";
	"dot.2" -> "custom-call.24";
	"p13.292" -> "add.293";
	"custom-call.24" -> "add.293";
	"p0.1" -> "broadcast.275";
	"add.293" -> "multiply.294";
	"broadcast.275" -> "multiply.294";
	"p6.67" -> "add.295";
	"multiply.294" -> "add.295";
	"subtract.157" -> "reduce.311";
	"constant.305" -> "reduce.311";
	"AddComputation.307" -> "reduce.311";
	"reduce.311" -> "custom-call.25";
	"p14.322" -> "add.323";
	"custom-call.25" -> "add.323";
	"p0.1" -> "broadcast.299";
	"add.323" -> "multiply.324";
	"broadcast.299" -> "multiply.324";
	"p7.77" -> "add.325";
	"multiply.324" -> "add.325";
	"p8.110" -> "broadcast.329";
	"broadcast.329" -> "compare.332";
	"iota.3" -> "compare.332";
	"constant.327" -> "broadcast.334";
	"constant.326" -> "broadcast.333";
	"compare.332" -> "select.335";
	"broadcast.334" -> "select.335";
	"broadcast.333" -> "select.335";
	"constant.327" -> "broadcast.338";
	"select.335" -> "compare.339";
	"broadcast.338" -> "compare.339";
	"constant.326" -> "broadcast.340";
	"select.335" -> "negate.336";
	"negate.336" -> "multiply.337";
	"subtract.109" -> "multiply.337";
	"compare.339" -> "select.341";
	"broadcast.340" -> "select.341";
	"multiply.337" -> "select.341";
	"constant.342" -> "broadcast.343";
	"p8.110" -> "compare.344";
	"broadcast.343" -> "compare.344";
	"constant.345" -> "broadcast.6";
	"constant.347" -> "broadcast.7";
	"compare.344" -> "select.1";
	"broadcast.6" -> "select.1";
	"broadcast.7" -> "select.1";
	"select.1" -> "broadcast.9";
	"broadcast.9" -> "multiply.351";
	"select.335" -> "multiply.351";
	"select.341" -> "multiply.358";
	"multiply.351" -> "multiply.358";
	"multiply.358" -> "reduce.363";
	"constant.326" -> "reduce.363";
	"AddComputation.359" -> "reduce.363";
	"multiply.351" -> "reduce.357";
	"constant.352" -> "reduce.357";
	"AddComputation.353" -> "reduce.357";
	"reduce.363" -> "divide.364";
	"reduce.357" -> "divide.364";
	"add.187" -> "tuple.365";
	"add.217" -> "tuple.365";
	"add.241" -> "tuple.365";
	"add.271" -> "tuple.365";
	"add.295" -> "tuple.365";
	"add.325" -> "tuple.365";
	"add.323" -> "tuple.365";
	"add.293" -> "tuple.365";
	"add.269" -> "tuple.365";
	"add.239" -> "tuple.365";
	"add.215" -> "tuple.365";
	"add.185" -> "tuple.365";
	"reshape.29" -> "tuple.365";
	"subtract.109" -> "tuple.365";
	"divide.364" -> "tuple.365";
}