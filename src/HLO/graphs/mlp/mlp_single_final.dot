digraph HloModule {
	"p2.14" [label="p2.14 \n f32[120,784]"];
	"p3.23" [label="p3.23 \n f32[32,784]"];
	"transpose.22" [label="transpose.22 \n f32[784,120]"];
	"dot.24" [label="dot.24 \n f32[32,120]"];
	"p1.6" [label="p1.6 \n f32[120]"];
	"broadcast.28" [label="broadcast.28 \n f32[32,120]"];
	"add.29" [label="add.29 \n f32[32,120]"];
	"constant.30" [label="constant.30 \n f32[] constant(0), metadata="];
	"broadcast.31" [label="broadcast.31 \n f32[32,120]"];
	"maximum.32" [label="maximum.32 \n f32[32,120]"];
	"constant.160" [label="constant.160 \n f32[] constant(0), metadata="];
	"broadcast.163" [label="broadcast.163 \n f32[32,120]"];
	"compare.164" [label="compare.164 \n pred[32,120]"];
	"p4.33" [label="p4.33 \n f32[84,120]"];
	"transpose.51" [label="transpose.51 \n f32[120,84]"];
	"dot.52" [label="dot.52 \n f32[32,84]"];
	"p5.43" [label="p5.43 \n f32[84]"];
	"broadcast.56" [label="broadcast.56 \n f32[32,84]"];
	"add.57" [label="add.57 \n f32[32,84]"];
	"constant.58" [label="constant.58 \n f32[] constant(0), metadata="];
	"broadcast.59" [label="broadcast.59 \n f32[32,84]"];
	"maximum.60" [label="maximum.60 \n f32[32,84]"];
	"constant.153" [label="constant.153 \n f32[] constant(0), metadata="];
	"broadcast.156" [label="broadcast.156 \n f32[32,84]"];
	"compare.157" [label="compare.157 \n pred[32,84]"];
	"p8.104" [label="p8.104 \n s64[32]"];
	"broadcast.110" [label="broadcast.110 \n s64[32,10]"];
	"iota.1" [label="iota.1 \n s64[32,10]"];
	"compare.113" [label="compare.113 \n pred[32,10]"];
	"constant.108" [label="constant.108 \n f32[] constant(1), metadata="];
	"broadcast.115" [label="broadcast.115 \n f32[32,10]"];
	"constant.107" [label="constant.107 \n f32[] constant(0), metadata="];
	"broadcast.114" [label="broadcast.114 \n f32[32,10]"];
	"select.116" [label="select.116 \n f32[32,10]"];
	"negate.117" [label="negate.117 \n f32[32,10]"];
	"constant.120" [label="constant.120 \n s64[] constant(-100), metadata="];
	"broadcast.121" [label="broadcast.121 \n s64[32]"];
	"compare.122" [label="compare.122 \n pred[32]"];
	"constant.123" [label="constant.123 \n f32[] constant(1), metadata="];
	"broadcast.1" [label="broadcast.1 \n f32[32]"];
	"constant.125" [label="constant.125 \n f32[] constant(0), metadata="];
	"broadcast.2" [label="broadcast.2 \n f32[32]"];
	"select.0" [label="select.0 \n f32[32]"];
	"broadcast.4" [label="broadcast.4 \n f32[32,10]"];
	"multiply.129" [label="multiply.129 \n f32[32,10]"];
	"multiply.139" [label="multiply.139 \n f32[32,10]"];
	"constant.130" [label="constant.130 \n f32[] constant(0), metadata="];
	"reduce.135" [label="reduce.135 \n f32[] reduce(f32[32,10]"];
	"compare.137" [label="compare.137 \n pred[] compare(f32[] %reduce.135, f32[] %constant.130), direction=NE, metadata="];
	"constant.136" [label="constant.136 \n f32[] constant(1), metadata="];
	"select.138" [label="select.138 \n f32[] select(pred[] %compare.137, f32[] %reduce.135, f32[] %constant.136), metadata="];
	"broadcast.140" [label="broadcast.140 \n f32[32,10]"];
	"divide.141" [label="divide.141 \n f32[32,10]"];
	"p6.61" [label="p6.61 \n f32[10,84]"];
	"transpose.79" [label="transpose.79 \n f32[84,10]"];
	"dot.80" [label="dot.80 \n f32[32,10]"];
	"p7.71" [label="p7.71 \n f32[10]"];
	"broadcast.84" [label="broadcast.84 \n f32[32,10]"];
	"add.85" [label="add.85 \n f32[32,10]"];
	"constant.86" [label="constant.86 \n f32[] constant(-inf), metadata="];
	"reduce.91" [label="reduce.91 \n f32[32]"];
	"broadcast.92" [label="broadcast.92 \n f32[32,10]"];
	"subtract.93" [label="subtract.93 \n f32[32,10]"];
	"exponential.94" [label="exponential.94 \n f32[32,10]"];
	"constant.95" [label="constant.95 \n f32[] constant(0), metadata="];
	"reduce.100" [label="reduce.100 \n f32[32]"];
	"log.101" [label="log.101 \n f32[32]"];
	"broadcast.102" [label="broadcast.102 \n f32[32,10]"];
	"subtract.103" [label="subtract.103 \n f32[32,10]"];
	"exponential.148" [label="exponential.148 \n f32[32,10]"];
	"constant.142" [label="constant.142 \n f32[] constant(0), metadata="];
	"reduce.147" [label="reduce.147 \n f32[32]"];
	"broadcast.149" [label="broadcast.149 \n f32[32,10]"];
	"multiply.150" [label="multiply.150 \n f32[32,10]"];
	"subtract.151" [label="subtract.151 \n f32[32,10]"];
	"dot.152" [label="dot.152 \n f32[32,84]"];
	"constant.154" [label="constant.154 \n f32[] constant(0), metadata="];
	"broadcast.155" [label="broadcast.155 \n f32[32,84]"];
	"select.158" [label="select.158 \n f32[32,84]"];
	"dot.159" [label="dot.159 \n f32[32,120]"];
	"constant.161" [label="constant.161 \n f32[] constant(0), metadata="];
	"broadcast.162" [label="broadcast.162 \n f32[32,120]"];
	"select.165" [label="select.165 \n f32[32,120]"];
	"transpose.166" [label="transpose.166 \n f32[784,32]"];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"broadcast.5" [label="broadcast.5 \n f32[120,784]"];
	"multiply.176" [label="multiply.176 \n f32[120,784]"];
	"add.177" [label="add.177 \n f32[120,784]"];
	"constant.182" [label="constant.182 \n f32[] constant(0), metadata="];
	"reduce.188" [label="reduce.188 \n f32[120]"];
	"broadcast.181" [label="broadcast.181 \n f32[120]"];
	"multiply.198" [label="multiply.198 \n f32[120]"];
	"add.199" [label="add.199 \n f32[120]"];
	"transpose.204" [label="transpose.204 \n f32[120,32]"];
	"dot.1" [label="dot.1 \n f32[84,120]"];
	"broadcast.203" [label="broadcast.203 \n f32[84,120]"];
	"multiply.214" [label="multiply.214 \n f32[84,120]"];
	"add.215" [label="add.215 \n f32[84,120]"];
	"constant.220" [label="constant.220 \n f32[] constant(0), metadata="];
	"reduce.226" [label="reduce.226 \n f32[84]"];
	"broadcast.219" [label="broadcast.219 \n f32[84]"];
	"multiply.236" [label="multiply.236 \n f32[84]"];
	"add.237" [label="add.237 \n f32[84]"];
	"transpose.242" [label="transpose.242 \n f32[84,32]"];
	"dot.2" [label="dot.2 \n f32[10,84]"];
	"broadcast.241" [label="broadcast.241 \n f32[10,84]"];
	"multiply.252" [label="multiply.252 \n f32[10,84]"];
	"add.253" [label="add.253 \n f32[10,84]"];
	"constant.258" [label="constant.258 \n f32[] constant(0), metadata="];
	"reduce.264" [label="reduce.264 \n f32[10]"];
	"broadcast.257" [label="broadcast.257 \n f32[10]"];
	"multiply.274" [label="multiply.274 \n f32[10]"];
	"add.275" [label="add.275 \n f32[10]"];
	"broadcast.279" [label="broadcast.279 \n s64[32,10]"];
	"iota.3" [label="iota.3 \n s64[32,10]"];
	"compare.282" [label="compare.282 \n pred[32,10]"];
	"constant.277" [label="constant.277 \n f32[] constant(1), metadata="];
	"broadcast.284" [label="broadcast.284 \n f32[32,10]"];
	"constant.276" [label="constant.276 \n f32[] constant(0), metadata="];
	"broadcast.283" [label="broadcast.283 \n f32[32,10]"];
	"select.285" [label="select.285 \n f32[32,10]"];
	"broadcast.288" [label="broadcast.288 \n f32[32,10]"];
	"compare.289" [label="compare.289 \n pred[32,10]"];
	"broadcast.290" [label="broadcast.290 \n f32[32,10]"];
	"negate.286" [label="negate.286 \n f32[32,10]"];
	"multiply.287" [label="multiply.287 \n f32[32,10]"];
	"select.291" [label="select.291 \n f32[32,10]"];
	"constant.292" [label="constant.292 \n s64[] constant(-100), metadata="];
	"broadcast.293" [label="broadcast.293 \n s64[32]"];
	"compare.294" [label="compare.294 \n pred[32]"];
	"constant.295" [label="constant.295 \n f32[] constant(1), metadata="];
	"broadcast.6" [label="broadcast.6 \n f32[32]"];
	"constant.297" [label="constant.297 \n f32[] constant(0), metadata="];
	"broadcast.7" [label="broadcast.7 \n f32[32]"];
	"select.1" [label="select.1 \n f32[32]"];
	"broadcast.8" [label="broadcast.8 \n f32[32,10]"];
	"multiply.301" [label="multiply.301 \n f32[32,10]"];
	"multiply.308" [label="multiply.308 \n f32[32,10]"];
	"reduce.313" [label="reduce.313 \n f32[] reduce(f32[32,10]"];
	"constant.302" [label="constant.302 \n f32[] constant(0), metadata="];
	"reduce.307" [label="reduce.307 \n f32[] reduce(f32[32,10]"];
	"divide.314" [label="divide.314 \n f32[] divide(f32[] %reduce.313, f32[] %reduce.307), metadata="];
	"tuple.315" [label="tuple.315 \n (f32[120,784]"]; 
 	"p2.14" -> "custom-call.13";
	"custom-call.13" -> "transpose.22";
	"p3.23" -> "dot.24";
	"transpose.22" -> "dot.24";
	"p1.6" -> "custom-call.14";
	"custom-call.14" -> "broadcast.28";
	"dot.24" -> "add.29";
	"broadcast.28" -> "add.29";
	"constant.30" -> "broadcast.31";
	"add.29" -> "maximum.32";
	"broadcast.31" -> "maximum.32";
	"constant.160" -> "broadcast.163";
	"maximum.32" -> "compare.164";
	"broadcast.163" -> "compare.164";
	"p4.33" -> "custom-call.15";
	"custom-call.15" -> "transpose.51";
	"maximum.32" -> "dot.52";
	"transpose.51" -> "dot.52";
	"p5.43" -> "custom-call.16";
	"custom-call.16" -> "broadcast.56";
	"dot.52" -> "add.57";
	"broadcast.56" -> "add.57";
	"constant.58" -> "broadcast.59";
	"add.57" -> "maximum.60";
	"broadcast.59" -> "maximum.60";
	"constant.153" -> "broadcast.156";
	"maximum.60" -> "compare.157";
	"broadcast.156" -> "compare.157";
	"p8.104" -> "broadcast.110";
	"broadcast.110" -> "compare.113";
	"iota.1" -> "compare.113";
	"constant.108" -> "broadcast.115";
	"constant.107" -> "broadcast.114";
	"compare.113" -> "select.116";
	"broadcast.115" -> "select.116";
	"broadcast.114" -> "select.116";
	"select.116" -> "negate.117";
	"constant.120" -> "broadcast.121";
	"p8.104" -> "compare.122";
	"broadcast.121" -> "compare.122";
	"constant.123" -> "broadcast.1";
	"constant.125" -> "broadcast.2";
	"compare.122" -> "select.0";
	"broadcast.1" -> "select.0";
	"broadcast.2" -> "select.0";
	"select.0" -> "broadcast.4";
	"broadcast.4" -> "multiply.129";
	"select.116" -> "multiply.129";
	"negate.117" -> "multiply.139";
	"multiply.129" -> "multiply.139";
	"multiply.129" -> "reduce.135";
	"constant.130" -> "reduce.135";
	"AddComputation.131" -> "reduce.135";
	"reduce.135" -> "compare.137";
	"constant.130" -> "compare.137";
	"compare.137" -> "select.138";
	"reduce.135" -> "select.138";
	"constant.136" -> "select.138";
	"select.138" -> "broadcast.140";
	"multiply.139" -> "divide.141";
	"broadcast.140" -> "divide.141";
	"p6.61" -> "custom-call.18";
	"custom-call.18" -> "transpose.79";
	"maximum.60" -> "dot.80";
	"transpose.79" -> "dot.80";
	"p7.71" -> "custom-call.19";
	"custom-call.19" -> "broadcast.84";
	"dot.80" -> "add.85";
	"broadcast.84" -> "add.85";
	"add.85" -> "reduce.91";
	"constant.86" -> "reduce.91";
	"MaxComputation.87" -> "reduce.91";
	"reduce.91" -> "broadcast.92";
	"add.85" -> "subtract.93";
	"broadcast.92" -> "subtract.93";
	"subtract.93" -> "exponential.94";
	"exponential.94" -> "reduce.100";
	"constant.95" -> "reduce.100";
	"AddComputation.96" -> "reduce.100";
	"reduce.100" -> "log.101";
	"log.101" -> "broadcast.102";
	"subtract.93" -> "subtract.103";
	"broadcast.102" -> "subtract.103";
	"subtract.103" -> "exponential.148";
	"divide.141" -> "reduce.147";
	"constant.142" -> "reduce.147";
	"AddComputation.143" -> "reduce.147";
	"reduce.147" -> "broadcast.149";
	"exponential.148" -> "multiply.150";
	"broadcast.149" -> "multiply.150";
	"divide.141" -> "subtract.151";
	"multiply.150" -> "subtract.151";
	"subtract.151" -> "dot.152";
	"custom-call.18" -> "dot.152";
	"constant.154" -> "broadcast.155";
	"compare.157" -> "select.158";
	"dot.152" -> "select.158";
	"broadcast.155" -> "select.158";
	"select.158" -> "dot.159";
	"custom-call.15" -> "dot.159";
	"constant.161" -> "broadcast.162";
	"compare.164" -> "select.165";
	"dot.159" -> "select.165";
	"broadcast.162" -> "select.165";
	"p3.23" -> "transpose.166";
	"select.165" -> "dot";
	"transpose.166" -> "dot";
	"dot" -> "custom-call.20";
	"p0.1" -> "broadcast.5";
	"custom-call.20" -> "multiply.176";
	"broadcast.5" -> "multiply.176";
	"p2.14" -> "add.177";
	"multiply.176" -> "add.177";
	"select.165" -> "reduce.188";
	"constant.182" -> "reduce.188";
	"AddComputation.184" -> "reduce.188";
	"reduce.188" -> "custom-call.21";
	"p0.1" -> "broadcast.181";
	"custom-call.21" -> "multiply.198";
	"broadcast.181" -> "multiply.198";
	"p1.6" -> "add.199";
	"multiply.198" -> "add.199";
	"maximum.32" -> "transpose.204";
	"select.158" -> "dot.1";
	"transpose.204" -> "dot.1";
	"dot.1" -> "custom-call.22";
	"p0.1" -> "broadcast.203";
	"custom-call.22" -> "multiply.214";
	"broadcast.203" -> "multiply.214";
	"p4.33" -> "add.215";
	"multiply.214" -> "add.215";
	"select.158" -> "reduce.226";
	"constant.220" -> "reduce.226";
	"AddComputation.222" -> "reduce.226";
	"reduce.226" -> "custom-call.23";
	"p0.1" -> "broadcast.219";
	"custom-call.23" -> "multiply.236";
	"broadcast.219" -> "multiply.236";
	"p5.43" -> "add.237";
	"multiply.236" -> "add.237";
	"maximum.60" -> "transpose.242";
	"subtract.151" -> "dot.2";
	"transpose.242" -> "dot.2";
	"dot.2" -> "custom-call.24";
	"p0.1" -> "broadcast.241";
	"custom-call.24" -> "multiply.252";
	"broadcast.241" -> "multiply.252";
	"p6.61" -> "add.253";
	"multiply.252" -> "add.253";
	"subtract.151" -> "reduce.264";
	"constant.258" -> "reduce.264";
	"AddComputation.260" -> "reduce.264";
	"reduce.264" -> "custom-call.25";
	"p0.1" -> "broadcast.257";
	"custom-call.25" -> "multiply.274";
	"broadcast.257" -> "multiply.274";
	"p7.71" -> "add.275";
	"multiply.274" -> "add.275";
	"p8.104" -> "broadcast.279";
	"broadcast.279" -> "compare.282";
	"iota.3" -> "compare.282";
	"constant.277" -> "broadcast.284";
	"constant.276" -> "broadcast.283";
	"compare.282" -> "select.285";
	"broadcast.284" -> "select.285";
	"broadcast.283" -> "select.285";
	"constant.277" -> "broadcast.288";
	"select.285" -> "compare.289";
	"broadcast.288" -> "compare.289";
	"constant.276" -> "broadcast.290";
	"select.285" -> "negate.286";
	"negate.286" -> "multiply.287";
	"subtract.103" -> "multiply.287";
	"compare.289" -> "select.291";
	"broadcast.290" -> "select.291";
	"multiply.287" -> "select.291";
	"constant.292" -> "broadcast.293";
	"p8.104" -> "compare.294";
	"broadcast.293" -> "compare.294";
	"constant.295" -> "broadcast.6";
	"constant.297" -> "broadcast.7";
	"compare.294" -> "select.1";
	"broadcast.6" -> "select.1";
	"broadcast.7" -> "select.1";
	"select.1" -> "broadcast.8";
	"broadcast.8" -> "multiply.301";
	"select.285" -> "multiply.301";
	"select.291" -> "multiply.308";
	"multiply.301" -> "multiply.308";
	"multiply.308" -> "reduce.313";
	"constant.276" -> "reduce.313";
	"AddComputation.309" -> "reduce.313";
	"multiply.301" -> "reduce.307";
	"constant.302" -> "reduce.307";
	"AddComputation.303" -> "reduce.307";
	"reduce.313" -> "divide.314";
	"reduce.307" -> "divide.314";
	"add.177" -> "tuple.315";
	"add.199" -> "tuple.315";
	"add.215" -> "tuple.315";
	"add.237" -> "tuple.315";
	"add.253" -> "tuple.315";
	"add.275" -> "tuple.315";
	"p3.23" -> "tuple.315";
	"p8.104" -> "tuple.315";
	"subtract.103" -> "tuple.315";
	"divide.314" -> "tuple.315";
}