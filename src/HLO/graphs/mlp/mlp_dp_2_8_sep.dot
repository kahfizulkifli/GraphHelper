digraph HloModule {
	"p3.20" [label="p3.20 \n f32[120,784]"];
	"p15.293" [label="p15.293 \n f32[10]"];
	"p9.111" [label="p9.111 \n s64[16]"];
	"broadcast.117" [label="broadcast.117 \n s64[16,10]"];
	"iota.1" [label="iota.1 \n s64[16,10]"];
	"compare.120" [label="compare.120 \n pred[16,10]"];
	"constant.115" [label="constant.115 \n f32[] constant(1), metadata="];
	"broadcast.122" [label="broadcast.122 \n f32[16,10]"];
	"constant.114" [label="constant.114 \n f32[] constant(0), metadata="];
	"broadcast.121" [label="broadcast.121 \n f32[16,10]"];
	"select.123" [label="select.123 \n f32[16,10]"];
	"negate.124" [label="negate.124 \n f32[16,10]"];
	"constant.127" [label="constant.127 \n s64[] constant(-100), metadata="];
	"broadcast.128" [label="broadcast.128 \n s64[16]"];
	"compare.129" [label="compare.129 \n pred[16]"];
	"constant.130" [label="constant.130 \n f32[] constant(1), metadata="];
	"broadcast.1" [label="broadcast.1 \n f32[16]"];
	"constant.132" [label="constant.132 \n f32[] constant(0), metadata="];
	"broadcast.2" [label="broadcast.2 \n f32[16]"];
	"select.0" [label="select.0 \n f32[16]"];
	"broadcast.4" [label="broadcast.4 \n f32[16,10]"];
	"multiply.136" [label="multiply.136 \n f32[16,10]"];
	"multiply.146" [label="multiply.146 \n f32[16,10]"];
	"constant.137" [label="constant.137 \n f32[] constant(0), metadata="];
	"reduce.142" [label="reduce.142 \n f32[] reduce(f32[16,10]"];
	"compare.144" [label="compare.144 \n pred[] compare(f32[] %reduce.142, f32[] %constant.137), direction=NE, metadata="];
	"constant.143" [label="constant.143 \n f32[] constant(1), metadata="];
	"select.145" [label="select.145 \n f32[] select(pred[] %compare.144, f32[] %reduce.142, f32[] %constant.143), metadata="];
	"broadcast.147" [label="broadcast.147 \n f32[16,10]"];
	"divide.148" [label="divide.148 \n f32[16,10]"];
	"p4.29" [label="p4.29 \n f32[16,1,28,28]"];
	"reshape.30" [label="reshape.30 \n f32[16,784]"];
	"custom-call.12" [label="custom-call.12 \n f32[120,784]"];
	"transpose.28" [label="transpose.28 \n f32[784,120]"];
	"dot.31" [label="dot.31 \n f32[16,120]"];
	"p2.12" [label="p2.12 \n f32[120]"];
	"custom-call.13" [label="custom-call.13 \n f32[120]"];
	"broadcast.35" [label="broadcast.35 \n f32[16,120]"];
	"add.36" [label="add.36 \n f32[16,120]"];
	"constant.37" [label="constant.37 \n f32[] constant(0), metadata="];
	"broadcast.38" [label="broadcast.38 \n f32[16,120]"];
	"maximum.39" [label="maximum.39 \n f32[16,120]"];
	"p5.40" [label="p5.40 \n f32[84,120]"];
	"custom-call.14" [label="custom-call.14 \n f32[84,120]"];
	"transpose.58" [label="transpose.58 \n f32[120,84]"];
	"dot.59" [label="dot.59 \n f32[16,84]"];
	"p6.50" [label="p6.50 \n f32[84]"];
	"custom-call.16" [label="custom-call.16 \n f32[84]"];
	"broadcast.63" [label="broadcast.63 \n f32[16,84]"];
	"add.64" [label="add.64 \n f32[16,84]"];
	"constant.65" [label="constant.65 \n f32[] constant(0), metadata="];
	"broadcast.66" [label="broadcast.66 \n f32[16,84]"];
	"maximum.67" [label="maximum.67 \n f32[16,84]"];
	"p7.68" [label="p7.68 \n f32[10,84]"];
	"custom-call.17" [label="custom-call.17 \n f32[10,84]"];
	"transpose.86" [label="transpose.86 \n f32[84,10]"];
	"dot.87" [label="dot.87 \n f32[16,10]"];
	"p8.78" [label="p8.78 \n f32[10]"];
	"custom-call.18" [label="custom-call.18 \n f32[10]"];
	"broadcast.91" [label="broadcast.91 \n f32[16,10]"];
	"add.92" [label="add.92 \n f32[16,10]"];
	"constant.93" [label="constant.93 \n f32[] constant(-inf), metadata="];
	"reduce.98" [label="reduce.98 \n f32[16]"];
	"broadcast.99" [label="broadcast.99 \n f32[16,10]"];
	"subtract.100" [label="subtract.100 \n f32[16,10]"];
	"exponential.101" [label="exponential.101 \n f32[16,10]"];
	"constant.102" [label="constant.102 \n f32[] constant(0), metadata="];
	"reduce.107" [label="reduce.107 \n f32[16]"];
	"log.108" [label="log.108 \n f32[16]"];
	"broadcast.109" [label="broadcast.109 \n f32[16,10]"];
	"subtract.110" [label="subtract.110 \n f32[16,10]"];
	"exponential.155" [label="exponential.155 \n f32[16,10]"];
	"constant.149" [label="constant.149 \n f32[] constant(0), metadata="];
	"reduce.154" [label="reduce.154 \n f32[16]"];
	"broadcast.156" [label="broadcast.156 \n f32[16,10]"];
	"multiply.157" [label="multiply.157 \n f32[16,10]"];
	"subtract.158" [label="subtract.158 \n f32[16,10]"];
	"constant.276" [label="constant.276 \n f32[] constant(0), metadata="];
	"reduce.282" [label="reduce.282 \n f32[10]"];
	"custom-call.19" [label="custom-call.19 \n f32[10]"];
	"add.294" [label="add.294 \n f32[10]"];
	"p14.269" [label="p14.269 \n f32[10,84]"];
	"transpose.258" [label="transpose.258 \n f32[84,16]"];
	"dot" [label="dot \n f32[10,84]"];
	"custom-call.20" [label="custom-call.20 \n f32[10,84]"];
	"add.270" [label="add.270 \n f32[10,84]"];
	"p13.251" [label="p13.251 \n f32[84]"];
	"constant.160" [label="constant.160 \n f32[] constant(0), metadata="];
	"broadcast.163" [label="broadcast.163 \n f32[16,84]"];
	"compare.164" [label="compare.164 \n pred[16,84]"];
	"dot.159" [label="dot.159 \n f32[16,84]"];
	"constant.161" [label="constant.161 \n f32[] constant(0), metadata="];
	"broadcast.162" [label="broadcast.162 \n f32[16,84]"];
	"select.165" [label="select.165 \n f32[16,84]"];
	"constant.234" [label="constant.234 \n f32[] constant(0), metadata="];
	"reduce.240" [label="reduce.240 \n f32[84]"];
	"custom-call.21" [label="custom-call.21 \n f32[84]"];
	"add.252" [label="add.252 \n f32[84]"];
	"p12.227" [label="p12.227 \n f32[84,120]"];
	"transpose.216" [label="transpose.216 \n f32[120,16]"];
	"dot.1" [label="dot.1 \n f32[84,120]"];
	"custom-call.22" [label="custom-call.22 \n f32[84,120]"];
	"add.228" [label="add.228 \n f32[84,120]"];
	"p11.209" [label="p11.209 \n f32[120]"];
	"constant.167" [label="constant.167 \n f32[] constant(0), metadata="];
	"broadcast.170" [label="broadcast.170 \n f32[16,120]"];
	"compare.171" [label="compare.171 \n pred[16,120]"];
	"dot.166" [label="dot.166 \n f32[16,120]"];
	"constant.168" [label="constant.168 \n f32[] constant(0), metadata="];
	"broadcast.169" [label="broadcast.169 \n f32[16,120]"];
	"select.172" [label="select.172 \n f32[16,120]"];
	"constant.192" [label="constant.192 \n f32[] constant(0), metadata="];
	"reduce.198" [label="reduce.198 \n f32[120]"];
	"custom-call.24" [label="custom-call.24 \n f32[120]"];
	"add.210" [label="add.210 \n f32[120]"];
	"p10.185" [label="p10.185 \n f32[120,784]"];
	"reshape.173" [label="reshape.173 \n f32[16,784]"];
	"transpose.174" [label="transpose.174 \n f32[784,16]"];
	"dot.2" [label="dot.2 \n f32[120,784]"];
	"custom-call.25" [label="custom-call.25 \n f32[120,784]"];
	"add.186" [label="add.186 \n f32[120,784]"];
	"p1.6" [label="p1.6 \n f32[] parameter(1), frontend_attributes="];
	"all-reduce.307" [label="all-reduce.307 \n (f32[10]"];
	"get-tuple-element.328" [label="get-tuple-element.328 \n f32[120,784]"];
	"p0.1" [label="p0.1 \n f32[] parameter(0), frontend_attributes="];
	"constant.329" [label="constant.329 \n f32[] constant(0.5), metadata="];
	"multiply" [label="multiply \n f32[] multiply(f32[] %p0.1, f32[] %constant.329), metadata="];
	"broadcast.6" [label="broadcast.6 \n f32[120,784]"];
	"multiply.333" [label="multiply.333 \n f32[120,784]"];
	"add.334" [label="add.334 \n f32[120,784]"];
	"get-tuple-element.324" [label="get-tuple-element.324 \n f32[120]"];
	"constant.325" [label="constant.325 \n f32[] constant(0.5), metadata="];
	"multiply.2" [label="multiply.2 \n f32[] multiply(f32[] %p0.1, f32[] %constant.325), metadata="];
	"broadcast.7" [label="broadcast.7 \n f32[120]"];
	"multiply.339" [label="multiply.339 \n f32[120]"];
	"add.340" [label="add.340 \n f32[120]"];
	"get-tuple-element.320" [label="get-tuple-element.320 \n f32[84,120]"];
	"constant.321" [label="constant.321 \n f32[] constant(0.5), metadata="];
	"multiply.4" [label="multiply.4 \n f32[] multiply(f32[] %p0.1, f32[] %constant.321), metadata="];
	"broadcast.8" [label="broadcast.8 \n f32[84,120]"];
	"multiply.345" [label="multiply.345 \n f32[84,120]"];
	"add.346" [label="add.346 \n f32[84,120]"];
	"get-tuple-element.316" [label="get-tuple-element.316 \n f32[84]"];
	"constant.317" [label="constant.317 \n f32[] constant(0.5), metadata="];
	"multiply.6" [label="multiply.6 \n f32[] multiply(f32[] %p0.1, f32[] %constant.317), metadata="];
	"broadcast.10" [label="broadcast.10 \n f32[84]"];
	"multiply.351" [label="multiply.351 \n f32[84]"];
	"add.352" [label="add.352 \n f32[84]"];
	"get-tuple-element.312" [label="get-tuple-element.312 \n f32[10,84]"];
	"constant.313" [label="constant.313 \n f32[] constant(0.5), metadata="];
	"multiply.8" [label="multiply.8 \n f32[] multiply(f32[] %p0.1, f32[] %constant.313), metadata="];
	"broadcast.12" [label="broadcast.12 \n f32[10,84]"];
	"multiply.357" [label="multiply.357 \n f32[10,84]"];
	"add.358" [label="add.358 \n f32[10,84]"];
	"get-tuple-element.308" [label="get-tuple-element.308 \n f32[10]"];
	"constant.309" [label="constant.309 \n f32[] constant(0.5), metadata="];
	"multiply.10" [label="multiply.10 \n f32[] multiply(f32[] %p0.1, f32[] %constant.309), metadata="];
	"broadcast.13" [label="broadcast.13 \n f32[10]"];
	"multiply.363" [label="multiply.363 \n f32[10]"];
	"add.364" [label="add.364 \n f32[10]"];
	"broadcast.310" [label="broadcast.310 \n f32[10]"];
	"multiply.311" [label="multiply.311 \n f32[10]"];
	"broadcast.314" [label="broadcast.314 \n f32[10,84]"];
	"multiply.315" [label="multiply.315 \n f32[10,84]"];
	"broadcast.318" [label="broadcast.318 \n f32[84]"];
	"multiply.319" [label="multiply.319 \n f32[84]"];
	"broadcast.322" [label="broadcast.322 \n f32[84,120]"];
	"multiply.323" [label="multiply.323 \n f32[84,120]"];
	"broadcast.326" [label="broadcast.326 \n f32[120]"];
	"multiply.327" [label="multiply.327 \n f32[120]"];
	"broadcast.330" [label="broadcast.330 \n f32[120,784]"];
	"multiply.331" [label="multiply.331 \n f32[120,784]"];
	"broadcast.368" [label="broadcast.368 \n s64[16,10]"];
	"iota.3" [label="iota.3 \n s64[16,10]"];
	"compare.371" [label="compare.371 \n pred[16,10]"];
	"constant.366" [label="constant.366 \n f32[] constant(1), metadata="];
	"broadcast.373" [label="broadcast.373 \n f32[16,10]"];
	"constant.365" [label="constant.365 \n f32[] constant(0), metadata="];
	"broadcast.372" [label="broadcast.372 \n f32[16,10]"];
	"select.374" [label="select.374 \n f32[16,10]"];
	"broadcast.377" [label="broadcast.377 \n f32[16,10]"];
	"compare.378" [label="compare.378 \n pred[16,10]"];
	"broadcast.379" [label="broadcast.379 \n f32[16,10]"];
	"negate.375" [label="negate.375 \n f32[16,10]"];
	"multiply.376" [label="multiply.376 \n f32[16,10]"];
	"select.380" [label="select.380 \n f32[16,10]"];
	"constant.381" [label="constant.381 \n s64[] constant(-100), metadata="];
	"broadcast.382" [label="broadcast.382 \n s64[16]"];
	"compare.383" [label="compare.383 \n pred[16]"];
	"constant.384" [label="constant.384 \n f32[] constant(1), metadata="];
	"broadcast.14" [label="broadcast.14 \n f32[16]"];
	"constant.386" [label="constant.386 \n f32[] constant(0), metadata="];
	"broadcast.15" [label="broadcast.15 \n f32[16]"];
	"select.1" [label="select.1 \n f32[16]"];
	"broadcast.16" [label="broadcast.16 \n f32[16,10]"];
	"multiply.390" [label="multiply.390 \n f32[16,10]"];
	"multiply.397" [label="multiply.397 \n f32[16,10]"];
	"reduce.402" [label="reduce.402 \n f32[] reduce(f32[16,10]"];
	"constant.391" [label="constant.391 \n f32[] constant(0), metadata="];
	"reduce.396" [label="reduce.396 \n f32[] reduce(f32[16,10]"];
	"divide.403" [label="divide.403 \n f32[] divide(f32[] %reduce.402, f32[] %reduce.396), metadata="];
	"tuple.404" [label="tuple.404 \n (f32[120,784]"]; 
 	"p9.111" -> "broadcast.117";
	"broadcast.117" -> "compare.120";
	"iota.1" -> "compare.120";
	"constant.115" -> "broadcast.122";
	"constant.114" -> "broadcast.121";
	"compare.120" -> "select.123";
	"broadcast.122" -> "select.123";
	"broadcast.121" -> "select.123";
	"select.123" -> "negate.124";
	"constant.127" -> "broadcast.128";
	"p9.111" -> "compare.129";
	"broadcast.128" -> "compare.129";
	"constant.130" -> "broadcast.1";
	"constant.132" -> "broadcast.2";
	"compare.129" -> "select.0";
	"broadcast.1" -> "select.0";
	"broadcast.2" -> "select.0";
	"select.0" -> "broadcast.4";
	"broadcast.4" -> "multiply.136";
	"select.123" -> "multiply.136";
	"negate.124" -> "multiply.146";
	"multiply.136" -> "multiply.146";
	"multiply.136" -> "reduce.142";
	"constant.137" -> "reduce.142";
	"AddComputation.138" -> "reduce.142";
	"reduce.142" -> "compare.144";
	"constant.137" -> "compare.144";
	"compare.144" -> "select.145";
	"reduce.142" -> "select.145";
	"constant.143" -> "select.145";
	"select.145" -> "broadcast.147";
	"multiply.146" -> "divide.148";
	"broadcast.147" -> "divide.148";
	"p4.29" -> "reshape.30";
	"p3.20" -> "custom-call.12";
	"custom-call.12" -> "transpose.28";
	"reshape.30" -> "dot.31";
	"transpose.28" -> "dot.31";
	"p2.12" -> "custom-call.13";
	"custom-call.13" -> "broadcast.35";
	"dot.31" -> "add.36";
	"broadcast.35" -> "add.36";
	"constant.37" -> "broadcast.38";
	"add.36" -> "maximum.39";
	"broadcast.38" -> "maximum.39";
	"p5.40" -> "custom-call.14";
	"custom-call.14" -> "transpose.58";
	"maximum.39" -> "dot.59";
	"transpose.58" -> "dot.59";
	"p6.50" -> "custom-call.16";
	"custom-call.16" -> "broadcast.63";
	"dot.59" -> "add.64";
	"broadcast.63" -> "add.64";
	"constant.65" -> "broadcast.66";
	"add.64" -> "maximum.67";
	"broadcast.66" -> "maximum.67";
	"p7.68" -> "custom-call.17";
	"custom-call.17" -> "transpose.86";
	"maximum.67" -> "dot.87";
	"transpose.86" -> "dot.87";
	"p8.78" -> "custom-call.18";
	"custom-call.18" -> "broadcast.91";
	"dot.87" -> "add.92";
	"broadcast.91" -> "add.92";
	"add.92" -> "reduce.98";
	"constant.93" -> "reduce.98";
	"MaxComputation.94" -> "reduce.98";
	"reduce.98" -> "broadcast.99";
	"add.92" -> "subtract.100";
	"broadcast.99" -> "subtract.100";
	"subtract.100" -> "exponential.101";
	"exponential.101" -> "reduce.107";
	"constant.102" -> "reduce.107";
	"AddComputation.103" -> "reduce.107";
	"reduce.107" -> "log.108";
	"log.108" -> "broadcast.109";
	"subtract.100" -> "subtract.110";
	"broadcast.109" -> "subtract.110";
	"subtract.110" -> "exponential.155";
	"divide.148" -> "reduce.154";
	"constant.149" -> "reduce.154";
	"AddComputation.150" -> "reduce.154";
	"reduce.154" -> "broadcast.156";
	"exponential.155" -> "multiply.157";
	"broadcast.156" -> "multiply.157";
	"divide.148" -> "subtract.158";
	"multiply.157" -> "subtract.158";
	"subtract.158" -> "reduce.282";
	"constant.276" -> "reduce.282";
	"AddComputation.278" -> "reduce.282";
	"reduce.282" -> "custom-call.19";
	"p15.293" -> "add.294";
	"custom-call.19" -> "add.294";
	"maximum.67" -> "transpose.258";
	"subtract.158" -> "dot";
	"transpose.258" -> "dot";
	"dot" -> "custom-call.20";
	"p14.269" -> "add.270";
	"custom-call.20" -> "add.270";
	"constant.160" -> "broadcast.163";
	"maximum.67" -> "compare.164";
	"broadcast.163" -> "compare.164";
	"subtract.158" -> "dot.159";
	"custom-call.17" -> "dot.159";
	"constant.161" -> "broadcast.162";
	"compare.164" -> "select.165";
	"dot.159" -> "select.165";
	"broadcast.162" -> "select.165";
	"select.165" -> "reduce.240";
	"constant.234" -> "reduce.240";
	"AddComputation.236" -> "reduce.240";
	"reduce.240" -> "custom-call.21";
	"p13.251" -> "add.252";
	"custom-call.21" -> "add.252";
	"maximum.39" -> "transpose.216";
	"select.165" -> "dot.1";
	"transpose.216" -> "dot.1";
	"dot.1" -> "custom-call.22";
	"p12.227" -> "add.228";
	"custom-call.22" -> "add.228";
	"constant.167" -> "broadcast.170";
	"maximum.39" -> "compare.171";
	"broadcast.170" -> "compare.171";
	"select.165" -> "dot.166";
	"custom-call.14" -> "dot.166";
	"constant.168" -> "broadcast.169";
	"compare.171" -> "select.172";
	"dot.166" -> "select.172";
	"broadcast.169" -> "select.172";
	"select.172" -> "reduce.198";
	"constant.192" -> "reduce.198";
	"AddComputation.194" -> "reduce.198";
	"reduce.198" -> "custom-call.24";
	"p11.209" -> "add.210";
	"custom-call.24" -> "add.210";
	"p4.29" -> "reshape.173";
	"reshape.173" -> "transpose.174";
	"select.172" -> "dot.2";
	"transpose.174" -> "dot.2";
	"dot.2" -> "custom-call.25";
	"p10.185" -> "add.186";
	"custom-call.25" -> "add.186";
	"add.294" -> "all-reduce.307";
	"add.270" -> "all-reduce.307";
	"add.252" -> "all-reduce.307";
	"add.228" -> "all-reduce.307";
	"add.210" -> "all-reduce.307";
	"add.186" -> "all-reduce.307";
	"p1.6" -> "all-reduce.307";
	"AddComputation.303" -> "all-reduce.307";
	"all-reduce.307" -> "get-tuple-element.328";
	"p0.1" -> "multiply";
	"constant.329" -> "multiply";
	"multiply" -> "broadcast.6";
	"get-tuple-element.328" -> "multiply.333";
	"broadcast.6" -> "multiply.333";
	"p3.20" -> "add.334";
	"multiply.333" -> "add.334";
	"all-reduce.307" -> "get-tuple-element.324";
	"p0.1" -> "multiply.2";
	"constant.325" -> "multiply.2";
	"multiply.2" -> "broadcast.7";
	"get-tuple-element.324" -> "multiply.339";
	"broadcast.7" -> "multiply.339";
	"p2.12" -> "add.340";
	"multiply.339" -> "add.340";
	"all-reduce.307" -> "get-tuple-element.320";
	"p0.1" -> "multiply.4";
	"constant.321" -> "multiply.4";
	"multiply.4" -> "broadcast.8";
	"get-tuple-element.320" -> "multiply.345";
	"broadcast.8" -> "multiply.345";
	"p5.40" -> "add.346";
	"multiply.345" -> "add.346";
	"all-reduce.307" -> "get-tuple-element.316";
	"p0.1" -> "multiply.6";
	"constant.317" -> "multiply.6";
	"multiply.6" -> "broadcast.10";
	"get-tuple-element.316" -> "multiply.351";
	"broadcast.10" -> "multiply.351";
	"p6.50" -> "add.352";
	"multiply.351" -> "add.352";
	"all-reduce.307" -> "get-tuple-element.312";
	"p0.1" -> "multiply.8";
	"constant.313" -> "multiply.8";
	"multiply.8" -> "broadcast.12";
	"get-tuple-element.312" -> "multiply.357";
	"broadcast.12" -> "multiply.357";
	"p7.68" -> "add.358";
	"multiply.357" -> "add.358";
	"all-reduce.307" -> "get-tuple-element.308";
	"p0.1" -> "multiply.10";
	"constant.309" -> "multiply.10";
	"multiply.10" -> "broadcast.13";
	"get-tuple-element.308" -> "multiply.363";
	"broadcast.13" -> "multiply.363";
	"p8.78" -> "add.364";
	"multiply.363" -> "add.364";
	"constant.309" -> "broadcast.310";
	"get-tuple-element.308" -> "multiply.311";
	"broadcast.310" -> "multiply.311";
	"constant.313" -> "broadcast.314";
	"get-tuple-element.312" -> "multiply.315";
	"broadcast.314" -> "multiply.315";
	"constant.317" -> "broadcast.318";
	"get-tuple-element.316" -> "multiply.319";
	"broadcast.318" -> "multiply.319";
	"constant.321" -> "broadcast.322";
	"get-tuple-element.320" -> "multiply.323";
	"broadcast.322" -> "multiply.323";
	"constant.325" -> "broadcast.326";
	"get-tuple-element.324" -> "multiply.327";
	"broadcast.326" -> "multiply.327";
	"constant.329" -> "broadcast.330";
	"get-tuple-element.328" -> "multiply.331";
	"broadcast.330" -> "multiply.331";
	"p9.111" -> "broadcast.368";
	"broadcast.368" -> "compare.371";
	"iota.3" -> "compare.371";
	"constant.366" -> "broadcast.373";
	"constant.365" -> "broadcast.372";
	"compare.371" -> "select.374";
	"broadcast.373" -> "select.374";
	"broadcast.372" -> "select.374";
	"constant.366" -> "broadcast.377";
	"select.374" -> "compare.378";
	"broadcast.377" -> "compare.378";
	"constant.365" -> "broadcast.379";
	"select.374" -> "negate.375";
	"negate.375" -> "multiply.376";
	"subtract.110" -> "multiply.376";
	"compare.378" -> "select.380";
	"broadcast.379" -> "select.380";
	"multiply.376" -> "select.380";
	"constant.381" -> "broadcast.382";
	"p9.111" -> "compare.383";
	"broadcast.382" -> "compare.383";
	"constant.384" -> "broadcast.14";
	"constant.386" -> "broadcast.15";
	"compare.383" -> "select.1";
	"broadcast.14" -> "select.1";
	"broadcast.15" -> "select.1";
	"select.1" -> "broadcast.16";
	"broadcast.16" -> "multiply.390";
	"select.374" -> "multiply.390";
	"select.380" -> "multiply.397";
	"multiply.390" -> "multiply.397";
	"multiply.397" -> "reduce.402";
	"constant.365" -> "reduce.402";
	"AddComputation.398" -> "reduce.402";
	"multiply.390" -> "reduce.396";
	"constant.391" -> "reduce.396";
	"AddComputation.392" -> "reduce.396";
	"reduce.402" -> "divide.403";
	"reduce.396" -> "divide.403";
	"add.334" -> "tuple.404";
	"add.340" -> "tuple.404";
	"add.346" -> "tuple.404";
	"add.352" -> "tuple.404";
	"add.358" -> "tuple.404";
	"add.364" -> "tuple.404";
	"multiply.311" -> "tuple.404";
	"multiply.315" -> "tuple.404";
	"multiply.319" -> "tuple.404";
	"multiply.323" -> "tuple.404";
	"multiply.327" -> "tuple.404";
	"multiply.331" -> "tuple.404";
	"reshape.30" -> "tuple.404";
	"subtract.110" -> "tuple.404";
	"divide.403" -> "tuple.404";
}