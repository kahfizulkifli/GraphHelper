digraph HloModule {
	"p41.943" [label="p41.943 \n f32[1]"];
	"p35.754" [label="p35.754 \n s64[16,128]"];
	"broadcast.144" [label="broadcast.144 \n s64[16,128]"];
	"compare.8" [label="compare.8 \n pred[16,128]"];
	"reshape.350" [label="reshape.350 \n pred[2048]"];
	"p40.854" [label="p40.854 \n f32[16]"];
	"broadcast.867" [label="broadcast.867 \n f32[16,128,16]"];
	"p34.659" [label="p34.659 \n f32[16]"];
	"broadcast.672" [label="broadcast.672 \n f32[16,128,16]"];
	"p29.530" [label="p29.530 \n f32[16]"];
	"broadcast.543" [label="broadcast.543 \n f32[16,128,16]"];
	"p17.240" [label="p17.240 \n f32[16]"];
	"broadcast.253" [label="broadcast.253 \n f32[16,128,16]"];
	"p16.214" [label="p16.214 \n f32[30522,16]"];
	"p15.212" [label="p15.212 \n s64[16,128]"];
	"convert.6" [label="convert.6 \n u32[16,128]"];
	"reshape.261" [label="reshape.261 \n u32[2048]"];
	"gather.223" [label="gather.223 \n f32[2048,16]"];
	"p14.200" [label="p14.200 \n f32[2,16]"];
	"p13.198" [label="p13.198 \n s64[16,128]"];
	"convert.5" [label="convert.5 \n u32[16,128]"];
	"reshape.260" [label="reshape.260 \n u32[2048]"];
	"gather.209" [label="gather.209 \n f32[2048,16]"];
	"add.12" [label="add.12 \n f32[2048,16]"];
	"reshape.336" [label="reshape.336 \n f32[16,128,16]"];
	"p12.181" [label="p12.181 \n f32[512,16]"];
	"p11.177" [label="p11.177 \n s64[1,512]"];
	"convert.4" [label="convert.4 \n u32[1,512]"];
	"slice.0" [label="slice.0 \n u32[1,128]"];
	"reshape.259" [label="reshape.259 \n u32[128]"];
	"gather.190" [label="gather.190 \n f32[128,16]"];
	"broadcast.228" [label="broadcast.228 \n f32[16,128,16]"];
	"add.229" [label="add.229 \n f32[16,128,16]"];
	"reshape.230" [label="reshape.230 \n f32[1,2048,16]"];
	"constant.167" [label="constant.167 \n f32[] constant(1), metadata="];
	"broadcast.171" [label="broadcast.171 \n f32[2048]"];
	"constant.162" [label="constant.162 \n f32[] constant(0), metadata="];
	"broadcast.166" [label="broadcast.166 \n f32[2048]"];
	"reshape.239" [label="reshape.239 \n f32[16,128,16]"];
	"p10.144" [label="p10.144 \n f32[16]"];
	"broadcast.249" [label="broadcast.249 \n f32[16,128,16]"];
	"multiply.252" [label="multiply.252 \n f32[16,128,16]"];
	"add.254" [label="add.254 \n f32[16,128,16]"];
	"constant.109" [label="constant.109 \n s64[] constant(214013), metadata="];
	"p9.108" [label="p9.108 \n s64[] parameter(9), frontend_attributes="];
	"multiply.110" [label="multiply.110 \n s64[] multiply(s64[] %constant.109, s64[] %p9.108), metadata="];
	"constant.111" [label="constant.111 \n s64[] constant(2531011), metadata="];
	"add.112" [label="add.112 \n s64[] add(s64[] %multiply.110, s64[] %constant.111), metadata="];
	"convert.119" [label="convert.119 \n u64[] convert(s64[] %add.112), metadata="];
	"reshape.121" [label="reshape.121 \n u64[1]"];
	"constant.35" [label="constant.35 \n u64[1]"];
	"concatenate.123" [label="concatenate.123 \n u64[2]"];
	"constant.127" [label="constant.127 \n u32[] constant(9), metadata="];
	"broadcast.128" [label="broadcast.128 \n u32[16,128,16]"];
	"convert.130" [label="convert.130 \n f32[16,128,16]"];
	"constant.131" [label="constant.131 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.132" [label="broadcast.132 \n f32[16,128,16]"];
	"multiply.136" [label="multiply.136 \n f32[16,128,16]"];
	"p8.107" [label="p8.107 \n f32[] parameter(8), frontend_attributes="];
	"broadcast.116" [label="broadcast.116 \n f32[16,128,16]"];
	"compare.139" [label="compare.139 \n pred[16,128,16]"];
	"constant.22" [label="constant.22 \n f32[] constant(1), metadata="];
	"broadcast.41" [label="broadcast.41 \n f32[16,128,16]"];
	"broadcast.66" [label="broadcast.66 \n f32[16,128,16]"];
	"select.13" [label="select.13 \n f32[16,128,16]"];
	"multiply.256" [label="multiply.256 \n f32[16,128,16]"];
	"reshape.468" [label="reshape.468 \n f32[2048,16]"];
	"p28.459" [label="p28.459 \n f32[16,16]"];
	"transpose.467" [label="transpose.467 \n f32[16,16]"];
	"dot.469" [label="dot.469 \n f32[2048,16]"];
	"reshape.470" [label="reshape.470 \n f32[16,128,16]"];
	"p27.450" [label="p27.450 \n f32[16]"];
	"broadcast.471" [label="broadcast.471 \n f32[16,128,16]"];
	"add.472" [label="add.472 \n f32[16,128,16]"];
	"reshape.475" [label="reshape.475 \n f32[16,128,2,8]"];
	"transpose.476" [label="transpose.476 \n f32[16,2,128,8]"];
	"reshape.478" [label="reshape.478 \n f32[32,128,8]"];
	"reshape.433" [label="reshape.433 \n f32[2048,16]"];
	"p26.424" [label="p26.424 \n f32[16,16]"];
	"transpose.432" [label="transpose.432 \n f32[16,16]"];
	"dot.434" [label="dot.434 \n f32[2048,16]"];
	"reshape.435" [label="reshape.435 \n f32[16,128,16]"];
	"p25.415" [label="p25.415 \n f32[16]"];
	"broadcast.436" [label="broadcast.436 \n f32[16,128,16]"];
	"add.437" [label="add.437 \n f32[16,128,16]"];
	"reshape.440" [label="reshape.440 \n f32[16,128,2,8]"];
	"transpose.442" [label="transpose.442 \n f32[16,2,8,128]"];
	"reshape.444" [label="reshape.444 \n f32[32,8,128]"];
	"dot.479" [label="dot.479 \n f32[32,128,128]"];
	"p24.409" [label="p24.409 \n f32[] parameter(24), frontend_attributes="];
	"broadcast.146" [label="broadcast.146 \n f32[32,128,128]"];
	"divide.10" [label="divide.10 \n f32[32,128,128]"];
	"reshape.344" [label="reshape.344 \n f32[16,2,128,128]"];
	"constant.400" [label="constant.400 \n f32[] constant(1), metadata="];
	"broadcast.148" [label="broadcast.148 \n f32[16,128]"];
	"p23.388" [label="p23.388 \n s64[16,128]"];
	"convert.2" [label="convert.2 \n f32[16,128]"];
	"subtract.4" [label="subtract.4 \n f32[16,128]"];
	"p22.387" [label="p22.387 \n f32[] parameter(22), frontend_attributes="];
	"broadcast.150" [label="broadcast.150 \n f32[16,128]"];
	"multiply.23" [label="multiply.23 \n f32[16,128]"];
	"broadcast.485" [label="broadcast.485 \n f32[16,2,128,128]"];
	"add.486" [label="add.486 \n f32[16,2,128,128]"];
	"constant.487" [label="constant.487 \n f32[] constant(-inf), metadata="];
	"reduce.492" [label="reduce.492 \n f32[16,2,128]"];
	"broadcast.493" [label="broadcast.493 \n f32[16,2,128,128]"];
	"subtract.494" [label="subtract.494 \n f32[16,2,128,128]"];
	"exponential.495" [label="exponential.495 \n f32[16,2,128,128]"];
	"constant.496" [label="constant.496 \n f32[] constant(0), metadata="];
	"reduce.501" [label="reduce.501 \n f32[16,2,128]"];
	"broadcast.502" [label="broadcast.502 \n f32[16,2,128,128]"];
	"divide.503" [label="divide.503 \n f32[16,2,128,128]"];
	"constant.257" [label="constant.257 \n s64[] constant(214013), metadata="];
	"multiply.258" [label="multiply.258 \n s64[] multiply(s64[] %constant.257, s64[] %add.112), metadata="];
	"constant.259" [label="constant.259 \n s64[] constant(2531011), metadata="];
	"add.260" [label="add.260 \n s64[] add(s64[] %multiply.258, s64[] %constant.259), metadata="];
	"convert.358" [label="convert.358 \n u64[] convert(s64[] %add.260), metadata="];
	"reshape.360" [label="reshape.360 \n u64[1]"];
	"constant.36" [label="constant.36 \n u64[1]"];
	"concatenate.362" [label="concatenate.362 \n u64[2]"];
	"constant.366" [label="constant.366 \n u32[] constant(9), metadata="];
	"broadcast.367" [label="broadcast.367 \n u32[16,2,128,128]"];
	"convert.369" [label="convert.369 \n f32[16,2,128,128]"];
	"constant.370" [label="constant.370 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.371" [label="broadcast.371 \n f32[16,2,128,128]"];
	"multiply.375" [label="multiply.375 \n f32[16,2,128,128]"];
	"broadcast.355" [label="broadcast.355 \n f32[16,2,128,128]"];
	"compare.378" [label="compare.378 \n pred[16,2,128,128]"];
	"constant.23" [label="constant.23 \n f32[] constant(1), metadata="];
	"broadcast.45" [label="broadcast.45 \n f32[16,2,128,128]"];
	"broadcast.64" [label="broadcast.64 \n f32[16,2,128,128]"];
	"select.12" [label="select.12 \n f32[16,2,128,128]"];
	"multiply.504" [label="multiply.504 \n f32[16,2,128,128]"];
	"reshape.506" [label="reshape.506 \n f32[32,128,128]"];
	"reshape.341" [label="reshape.341 \n f32[2048,16]"];
	"p21.332" [label="p21.332 \n f32[16,16]"];
	"transpose.340" [label="transpose.340 \n f32[16,16]"];
	"dot.342" [label="dot.342 \n f32[2048,16]"];
	"reshape.343" [label="reshape.343 \n f32[16,128,16]"];
	"p20.323" [label="p20.323 \n f32[16]"];
	"broadcast.344" [label="broadcast.344 \n f32[16,128,16]"];
	"add.345" [label="add.345 \n f32[16,128,16]"];
	"reshape.348" [label="reshape.348 \n f32[16,128,2,8]"];
	"transpose.349" [label="transpose.349 \n f32[16,2,128,8]"];
	"reshape.351" [label="reshape.351 \n f32[32,128,8]"];
	"dot.507" [label="dot.507 \n f32[32,128,8]"];
	"reshape.508" [label="reshape.508 \n f32[16,2,128,8]"];
	"transpose.509" [label="transpose.509 \n f32[16,128,2,8]"];
	"reshape.511" [label="reshape.511 \n f32[2048,16]"];
	"p19.309" [label="p19.309 \n f32[16,16]"];
	"transpose.317" [label="transpose.317 \n f32[16,16]"];
	"dot.512" [label="dot.512 \n f32[2048,16]"];
	"reshape.513" [label="reshape.513 \n f32[16,128,16]"];
	"p18.300" [label="p18.300 \n f32[16]"];
	"broadcast.514" [label="broadcast.514 \n f32[16,128,16]"];
	"add.515" [label="add.515 \n f32[16,128,16]"];
	"constant.261" [label="constant.261 \n s64[] constant(214013), metadata="];
	"multiply.262" [label="multiply.262 \n s64[] multiply(s64[] %constant.261, s64[] %add.260), metadata="];
	"constant.263" [label="constant.263 \n s64[] constant(2531011), metadata="];
	"add.264" [label="add.264 \n s64[] add(s64[] %multiply.262, s64[] %constant.263), metadata="];
	"convert.271" [label="convert.271 \n u64[] convert(s64[] %add.264), metadata="];
	"reshape.273" [label="reshape.273 \n u64[1]"];
	"constant.37" [label="constant.37 \n u64[1]"];
	"concatenate.275" [label="concatenate.275 \n u64[2]"];
	"constant.279" [label="constant.279 \n u32[] constant(9), metadata="];
	"broadcast.280" [label="broadcast.280 \n u32[16,128,16]"];
	"convert.282" [label="convert.282 \n f32[16,128,16]"];
	"constant.283" [label="constant.283 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.284" [label="broadcast.284 \n f32[16,128,16]"];
	"multiply.288" [label="multiply.288 \n f32[16,128,16]"];
	"broadcast.268" [label="broadcast.268 \n f32[16,128,16]"];
	"compare.291" [label="compare.291 \n pred[16,128,16]"];
	"constant.24" [label="constant.24 \n f32[] constant(1), metadata="];
	"broadcast.46" [label="broadcast.46 \n f32[16,128,16]"];
	"broadcast.63" [label="broadcast.63 \n f32[16,128,16]"];
	"select.11" [label="select.11 \n f32[16,128,16]"];
	"multiply.518" [label="multiply.518 \n f32[16,128,16]"];
	"add.519" [label="add.519 \n f32[16,128,16]"];
	"reshape.520" [label="reshape.520 \n f32[1,2048,16]"];
	"constant.97" [label="constant.97 \n f32[] constant(1), metadata="];
	"broadcast.101" [label="broadcast.101 \n f32[2048]"];
	"constant.92" [label="constant.92 \n f32[] constant(0), metadata="];
	"broadcast.96" [label="broadcast.96 \n f32[2048]"];
	"reshape.529" [label="reshape.529 \n f32[16,128,16]"];
	"p7.74" [label="p7.74 \n f32[16]"];
	"broadcast.539" [label="broadcast.539 \n f32[16,128,16]"];
	"multiply.542" [label="multiply.542 \n f32[16,128,16]"];
	"add.544" [label="add.544 \n f32[16,128,16]"];
	"reshape.626" [label="reshape.626 \n f32[2048,16]"];
	"p33.617" [label="p33.617 \n f32[4096,16]"];
	"transpose.625" [label="transpose.625 \n f32[16,4096]"];
	"dot.627" [label="dot.627 \n f32[2048,4096]"];
	"reshape.628" [label="reshape.628 \n f32[16,128,4096]"];
	"p32.608" [label="p32.608 \n f32[4096]"];
	"broadcast.629" [label="broadcast.629 \n f32[16,128,4096]"];
	"add.630" [label="add.630 \n f32[16,128,4096]"];
	"reshape.640" [label="reshape.640 \n f32[2048,4096]"];
	"p31.594" [label="p31.594 \n f32[16,4096]"];
	"transpose.602" [label="transpose.602 \n f32[4096,16]"];
	"dot.641" [label="dot.641 \n f32[2048,16]"];
	"reshape.642" [label="reshape.642 \n f32[16,128,16]"];
	"p30.585" [label="p30.585 \n f32[16]"];
	"broadcast.643" [label="broadcast.643 \n f32[16,128,16]"];
	"add.644" [label="add.644 \n f32[16,128,16]"];
	"constant.546" [label="constant.546 \n s64[] constant(214013), metadata="];
	"multiply.547" [label="multiply.547 \n s64[] multiply(s64[] %constant.546, s64[] %add.264), metadata="];
	"constant.548" [label="constant.548 \n s64[] constant(2531011), metadata="];
	"add.549" [label="add.549 \n s64[] add(s64[] %multiply.547, s64[] %constant.548), metadata="];
	"convert.556" [label="convert.556 \n u64[] convert(s64[] %add.549), metadata="];
	"reshape.558" [label="reshape.558 \n u64[1]"];
	"constant.40" [label="constant.40 \n u64[1]"];
	"concatenate.560" [label="concatenate.560 \n u64[2]"];
	"constant.564" [label="constant.564 \n u32[] constant(9), metadata="];
	"broadcast.565" [label="broadcast.565 \n u32[16,128,16]"];
	"convert.567" [label="convert.567 \n f32[16,128,16]"];
	"constant.568" [label="constant.568 \n f32[] constant(1.1920929e-07), metadata="];
	"broadcast.569" [label="broadcast.569 \n f32[16,128,16]"];
	"multiply.573" [label="multiply.573 \n f32[16,128,16]"];
	"broadcast.553" [label="broadcast.553 \n f32[16,128,16]"];
	"compare.576" [label="compare.576 \n pred[16,128,16]"];
	"constant.25" [label="constant.25 \n f32[] constant(1), metadata="];
	"broadcast.47" [label="broadcast.47 \n f32[16,128,16]"];
	"broadcast.61" [label="broadcast.61 \n f32[16,128,16]"];
	"select.10" [label="select.10 \n f32[16,128,16]"];
	"multiply.647" [label="multiply.647 \n f32[16,128,16]"];
	"add.648" [label="add.648 \n f32[16,128,16]"];
	"reshape.649" [label="reshape.649 \n f32[1,2048,16]"];
	"constant.63" [label="constant.63 \n f32[] constant(1), metadata="];
	"broadcast.67" [label="broadcast.67 \n f32[2048]"];
	"constant.58" [label="constant.58 \n f32[] constant(0), metadata="];
	"broadcast.62" [label="broadcast.62 \n f32[2048]"];
	"reshape.658" [label="reshape.658 \n f32[16,128,16]"];
	"p6.40" [label="p6.40 \n f32[16]"];
	"broadcast.668" [label="broadcast.668 \n f32[16,128,16]"];
	"multiply.671" [label="multiply.671 \n f32[16,128,16]"];
	"add.673" [label="add.673 \n f32[16,128,16]"];
	"reshape.830" [label="reshape.830 \n f32[2048,16]"];
	"p39.821" [label="p39.821 \n f32[16,16]"];
	"transpose.829" [label="transpose.829 \n f32[16,16]"];
	"dot.831" [label="dot.831 \n f32[2048,16]"];
	"reshape.832" [label="reshape.832 \n f32[16,128,16]"];
	"p38.812" [label="p38.812 \n f32[16]"];
	"broadcast.833" [label="broadcast.833 \n f32[16,128,16]"];
	"add.834" [label="add.834 \n f32[16,128,16]"];
	"reshape.844" [label="reshape.844 \n f32[1,2048,16]"];
	"constant.802" [label="constant.802 \n f32[] constant(1), metadata="];
	"broadcast.806" [label="broadcast.806 \n f32[2048]"];
	"constant.797" [label="constant.797 \n f32[] constant(0), metadata="];
	"broadcast.801" [label="broadcast.801 \n f32[2048]"];
	"reshape.853" [label="reshape.853 \n f32[16,128,16]"];
	"p37.779" [label="p37.779 \n f32[16]"];
	"broadcast.863" [label="broadcast.863 \n f32[16,128,16]"];
	"multiply.866" [label="multiply.866 \n f32[16,128,16]"];
	"add.868" [label="add.868 \n f32[16,128,16]"];
	"reshape.869" [label="reshape.869 \n f32[2048,16]"];
	"transpose.777" [label="transpose.777 \n f32[16,30522]"];
	"dot.870" [label="dot.870 \n f32[2048,30522]"];
	"reshape.871" [label="reshape.871 \n f32[16,128,30522]"];
	"p36.761" [label="p36.761 \n f32[30522]"];
	"broadcast.872" [label="broadcast.872 \n f32[16,128,30522]"];
	"add.873" [label="add.873 \n f32[16,128,30522]"];
	"reshape.876" [label="reshape.876 \n f32[2048,30522]"];
	"reduce.0" [label="reduce.0 \n f32[2048]"];
	"broadcast.0" [label="broadcast.0 \n f32[2048,30522]"];
	"subtract.0" [label="subtract.0 \n f32[2048,30522]"];
	"exponential.0" [label="exponential.0 \n f32[2048,30522]"];
	"reduce.1" [label="reduce.1 \n f32[2048]"];
	"log.0" [label="log.0 \n f32[2048]"];
	"broadcast.1" [label="broadcast.1 \n f32[2048,30522]"];
	"subtract.1" [label="subtract.1 \n f32[2048,30522]"];
	"reshape.1" [label="reshape.1 \n s64[2048]"];
	"broadcast.3" [label="broadcast.3 \n s64[2048,30522]"];
	"iota.5" [label="iota.5 \n s64[2048,30522]"];
	"compare.0" [label="compare.0 \n pred[2048,30522]"];
	"broadcast.6" [label="broadcast.6 \n f32[2048,30522]"];
	"broadcast.7" [label="broadcast.7 \n f32[2048,30522]"];
	"select.0" [label="select.0 \n f32[2048,30522]"];
	"multiply.2" [label="multiply.2 \n f32[2048,30522]"];
	"reduce.2" [label="reduce.2 \n f32[2048]"];
	"broadcast.48" [label="broadcast.48 \n f32[2048]"];
	"select.6" [label="select.6 \n f32[2048]"];
	"reduce.3" [label="reduce.3 \n f32[] reduce(f32[2048]"];
	"convert.0" [label="convert.0 \n f32[2048]"];
	"reduce.4" [label="reduce.4 \n f32[] reduce(f32[2048]"];
	"negate.0" [label="negate.0 \n f32[] negate(f32[] %divide.0), metadata="];
	"p1.4" [label="p1.4 \n s64[16]"];
	"broadcast.25" [label="broadcast.25 \n s64[16]"];
	"compare.4" [label="compare.4 \n pred[16]"];
	"slice.675" [label="slice.675 \n f32[16,1,16]"];
	"reshape.676" [label="reshape.676 \n f32[16,16]"];
	"p5.30" [label="p5.30 \n f32[16,16]"];
	"transpose.38" [label="transpose.38 \n f32[16,16]"];
	"dot.677" [label="dot.677 \n f32[16,16]"];
	"p4.22" [label="p4.22 \n f32[16]"];
	"broadcast.681" [label="broadcast.681 \n f32[16,16]"];
	"add.682" [label="add.682 \n f32[16,16]"];
	"tanh.683" [label="tanh.683 \n f32[16,16]"];
	"p3.13" [label="p3.13 \n f32[2,16]"];
	"transpose.21" [label="transpose.21 \n f32[16,2]"];
	"dot.684" [label="dot.684 \n f32[16,2]"];
	"p2.5" [label="p2.5 \n f32[2]"];
	"broadcast.688" [label="broadcast.688 \n f32[16,2]"];
	"add.689" [label="add.689 \n f32[16,2]"];
	"reduce.6" [label="reduce.6 \n f32[16]"];
	"broadcast.17" [label="broadcast.17 \n f32[16,2]"];
	"subtract.2" [label="subtract.2 \n f32[16,2]"];
	"exponential.2" [label="exponential.2 \n f32[16,2]"];
	"reduce.7" [label="reduce.7 \n f32[16]"];
	"log.1" [label="log.1 \n f32[16]"];
	"broadcast.18" [label="broadcast.18 \n f32[16,2]"];
	"subtract.3" [label="subtract.3 \n f32[16,2]"];
	"broadcast.20" [label="broadcast.20 \n s64[16,2]"];
	"iota.7" [label="iota.7 \n s64[16,2]"];
	"compare.3" [label="compare.3 \n pred[16,2]"];
	"broadcast.23" [label="broadcast.23 \n f32[16,2]"];
	"broadcast.24" [label="broadcast.24 \n f32[16,2]"];
	"select.2" [label="select.2 \n f32[16,2]"];
	"multiply.7" [label="multiply.7 \n f32[16,2]"];
	"reduce.8" [label="reduce.8 \n f32[16]"];
	"broadcast.49" [label="broadcast.49 \n f32[16]"];
	"select.7" [label="select.7 \n f32[16]"];
	"reduce.9" [label="reduce.9 \n f32[] reduce(f32[16]"];
	"convert.1" [label="convert.1 \n f32[16]"];
	"reduce.10" [label="reduce.10 \n f32[] reduce(f32[16]"];
	"negate.2" [label="negate.2 \n f32[] negate(f32[] %divide.2), metadata="];
	"add.940" [label="add.940 \n f32[] add(f32[] %negate.0, f32[] %negate.2), metadata="];
	"p0.2" [label="p0.2 \n f32[] parameter(0), frontend_attributes="];
	"divide.941" [label="divide.941 \n f32[] divide(f32[] %add.940, f32[] %p0.2), metadata="];
	"reshape.139" [label="reshape.139 \n f32[1]"];
	"add.945" [label="add.945 \n f32[1]"];
	"exponential.3" [label="exponential.3 \n f32[16,2]"];
	"constant.947" [label="constant.947 \n f32[] constant(1), metadata="];
	"reduce.11" [label="reduce.11 \n f32[] reduce(f32[16]"];
	"broadcast.26" [label="broadcast.26 \n f32[16]"];
	"broadcast.51" [label="broadcast.51 \n f32[16]"];
	"select.8" [label="select.8 \n f32[16]"];
	"broadcast.27" [label="broadcast.27 \n f32[16,2]"];
	"multiply.10" [label="multiply.10 \n f32[16,2]"];
	"broadcast.29" [label="broadcast.29 \n s64[16,2]"];
	"iota.9" [label="iota.9 \n s64[16,2]"];
	"compare.5" [label="compare.5 \n pred[16,2]"];
	"broadcast.32" [label="broadcast.32 \n f32[16,2]"];
	"broadcast.33" [label="broadcast.33 \n f32[16,2]"];
	"select.3" [label="select.3 \n f32[16,2]"];
	"add.1" [label="add.1 \n f32[16,2]"];
	"constant.983" [label="constant.983 \n f32[] constant(0), metadata="];
	"reduce.989" [label="reduce.989 \n f32[2]"];
	"transpose.999" [label="transpose.999 \n f32[16,16]"];
	"exponential.1" [label="exponential.1 \n f32[2048,30522]"];
	"reduce.5" [label="reduce.5 \n f32[] reduce(f32[2048]"];
	"broadcast.9" [label="broadcast.9 \n f32[2048]"];
	"broadcast.53" [label="broadcast.53 \n f32[2048]"];
	"select.9" [label="select.9 \n f32[2048]"];
	"broadcast.10" [label="broadcast.10 \n f32[2048,30522]"];
	"multiply.5" [label="multiply.5 \n f32[2048,30522]"];
	"reshape.4" [label="reshape.4 \n s64[2048]"];
	"broadcast.12" [label="broadcast.12 \n s64[2048,30522]"];
	"iota.11" [label="iota.11 \n s64[2048,30522]"];
	"compare.2" [label="compare.2 \n pred[2048,30522]"];
	"broadcast.15" [label="broadcast.15 \n f32[2048,30522]"];
	"broadcast.16" [label="broadcast.16 \n f32[2048,30522]"];
	"select.1" [label="select.1 \n f32[2048,30522]"];
	"add.0" [label="add.0 \n f32[2048,30522]"];
	"constant.1043" [label="constant.1043 \n f32[] constant(0), metadata="];
	"reduce.1049" [label="reduce.1049 \n f32[30522]"];
	"reshape.1395" [label="reshape.1395 \n f32[2048,16]"];
	"transpose.1396" [label="transpose.1396 \n f32[16,2048]"];
	"dot.1" [label="dot.1 \n f32[30522,16]"];
	"constant.1375" [label="constant.1375 \n f32[] constant(0), metadata="];
	"broadcast.1379" [label="broadcast.1379 \n f32[30522,16]"];
	"reshape.1354" [label="reshape.1354 \n s64[2048]"];
	"constant.1369" [label="constant.1369 \n s64[] constant(0), metadata="];
	"broadcast.1370" [label="broadcast.1370 \n s64[2048]"];
	"compare.1371" [label="compare.1371 \n pred[2048]"];
	"p42.1363" [label="p42.1363 \n s64[] parameter(42), frontend_attributes="];
	"broadcast.1367" [label="broadcast.1367 \n s64[2048]"];
	"add.1368" [label="add.1368 \n s64[2048]"];
	"select.1372" [label="select.1372 \n s64[2048]"];
	"reshape.1373" [label="reshape.1373 \n s64[2048,1]"];
	"convert.1355" [label="convert.1355 \n f32[2048]"];
	"constant.1353" [label="constant.1353 \n f32[] constant(0), metadata="];
	"broadcast.1356" [label="broadcast.1356 \n f32[2048]"];
	"compare.1357" [label="compare.1357 \n pred[2048]"];
	"broadcast.1361" [label="broadcast.1361 \n pred[2048,16]"];
	"constant.1069" [label="constant.1069 \n f32[] constant(1), metadata="];
	"broadcast.1073" [label="broadcast.1073 \n f32[2048]"];
	"constant.235" [label="constant.235 \n f32[] constant(1e-12), metadata="];
	"broadcast.236" [label="broadcast.236 \n f32[2048]"];
	"add.237" [label="add.237 \n f32[2048]"];
	"multiply.1344" [label="multiply.1344 \n f32[2048]"];
	"broadcast.54" [label="broadcast.54 \n f32[2048]"];
	"add.8" [label="add.8 \n f32[2048]"];
	"constant.1093" [label="constant.1093 \n f32[] constant(1), metadata="];
	"broadcast.1097" [label="broadcast.1097 \n f32[2048]"];
	"constant.525" [label="constant.525 \n f32[] constant(1e-12), metadata="];
	"broadcast.526" [label="broadcast.526 \n f32[2048]"];
	"add.527" [label="add.527 \n f32[2048]"];
	"sqrt.1" [label="sqrt.1 \n f32[2048]"];
	"multiply.1259" [label="multiply.1259 \n f32[2048]"];
	"broadcast.56" [label="broadcast.56 \n f32[2048]"];
	"add.9" [label="add.9 \n f32[2048]"];
	"constant.1113" [label="constant.1113 \n f32[] constant(1), metadata="];
	"broadcast.1117" [label="broadcast.1117 \n f32[2048]"];
	"constant.654" [label="constant.654 \n f32[] constant(1e-12), metadata="];
	"broadcast.655" [label="broadcast.655 \n f32[2048]"];
	"add.656" [label="add.656 \n f32[2048]"];
	"sqrt.2" [label="sqrt.2 \n f32[2048]"];
	"multiply.1225" [label="multiply.1225 \n f32[2048]"];
	"broadcast.58" [label="broadcast.58 \n f32[2048]"];
	"add.10" [label="add.10 \n f32[2048]"];
	"constant.1172" [label="constant.1172 \n f32[] constant(1), metadata="];
	"broadcast.1176" [label="broadcast.1176 \n f32[2048]"];
	"constant.849" [label="constant.849 \n f32[] constant(1e-12), metadata="];
	"broadcast.850" [label="broadcast.850 \n f32[2048]"];
	"add.851" [label="add.851 \n f32[2048]"];
	"sqrt.3" [label="sqrt.3 \n f32[2048]"];
	"multiply.1196" [label="multiply.1196 \n f32[2048]"];
	"broadcast.59" [label="broadcast.59 \n f32[2048]"];
	"add.11" [label="add.11 \n f32[2048]"];
	"dot.1187" [label="dot.1187 \n f32[2048,16]"];
	"reshape.1188" [label="reshape.1188 \n f32[16,128,16]"];
	"broadcast.1189" [label="broadcast.1189 \n f32[16,128,16]"];
	"multiply.1190" [label="multiply.1190 \n f32[16,128,16]"];
	"reshape.1191" [label="reshape.1191 \n f32[1,2048,16]"];
	"reshape.1203" [label="reshape.1203 \n f32[16,128,16]"];
	"multiply.6" [label="multiply.6 \n f32[16,128,16]"];
	"reshape.1214" [label="reshape.1214 \n f32[2048,16]"];
	"dot.1215" [label="dot.1215 \n f32[2048,16]"];
	"reshape.1216" [label="reshape.1216 \n f32[16,128,16]"];
	"dot.1151" [label="dot.1151 \n f32[16,16]"];
	"constant.1143" [label="constant.1143 \n f32[] constant(1), metadata="];
	"broadcast.1147" [label="broadcast.1147 \n f32[16,16]"];
	"multiply.1142" [label="multiply.1142 \n f32[16,16]"];
	"subtract.1148" [label="subtract.1148 \n f32[16,16]"];
	"multiply.1152" [label="multiply.1152 \n f32[16,16]"];
	"dot.1153" [label="dot.1153 \n f32[16,16]"];
	"reshape.1154" [label="reshape.1154 \n f32[16,1,16]"];
	"add.1217" [label="add.1217 \n f32[16,128,16]"];
	"broadcast.1218" [label="broadcast.1218 \n f32[16,128,16]"];
	"multiply.1219" [label="multiply.1219 \n f32[16,128,16]"];
	"reshape.1220" [label="reshape.1220 \n f32[1,2048,16]"];
	"reshape.1232" [label="reshape.1232 \n f32[16,128,16]"];
	"multiply.1233" [label="multiply.1233 \n f32[16,128,16]"];
	"reshape.1234" [label="reshape.1234 \n f32[2048,16]"];
	"dot.1235" [label="dot.1235 \n f32[2048,4096]"];
	"reshape.1236" [label="reshape.1236 \n f32[16,128,4096]"];
	"multiply.11" [label="multiply.11 \n f32[16,128,4096]"];
	"reshape.1247" [label="reshape.1247 \n f32[2048,4096]"];
	"dot.1248" [label="dot.1248 \n f32[2048,16]"];
	"reshape.1249" [label="reshape.1249 \n f32[16,128,16]"];
	"add.1251" [label="add.1251 \n f32[16,128,16]"];
	"broadcast.1252" [label="broadcast.1252 \n f32[16,128,16]"];
	"multiply.1253" [label="multiply.1253 \n f32[16,128,16]"];
	"reshape.1254" [label="reshape.1254 \n f32[1,2048,16]"];
	"reshape.1266" [label="reshape.1266 \n f32[16,128,16]"];
	"reshape.1323" [label="reshape.1323 \n f32[32,128,128]"];
	"transpose.1324" [label="transpose.1324 \n f32[32,128,128]"];
	"multiply.1267" [label="multiply.1267 \n f32[16,128,16]"];
	"reshape.1268" [label="reshape.1268 \n f32[2048,16]"];
	"dot.1269" [label="dot.1269 \n f32[2048,16]"];
	"reshape.1271" [label="reshape.1271 \n f32[16,128,2,8]"];
	"transpose.1272" [label="transpose.1272 \n f32[16,2,128,8]"];
	"reshape.1273" [label="reshape.1273 \n f32[32,128,8]"];
	"dot.1325" [label="dot.1325 \n f32[32,128,8]"];
	"reshape.1326" [label="reshape.1326 \n f32[16,2,128,8]"];
	"transpose.1327" [label="transpose.1327 \n f32[16,128,2,8]"];
	"reshape.1329" [label="reshape.1329 \n f32[2048,16]"];
	"dot.1330" [label="dot.1330 \n f32[2048,16]"];
	"reshape.1331" [label="reshape.1331 \n f32[16,128,16]"];
	"add.1333" [label="add.1333 \n f32[16,128,16]"];
	"reshape.1305" [label="reshape.1305 \n f32[32,128,8]"];
	"transpose.1306" [label="transpose.1306 \n f32[32,8,128]"];
	"reshape.1089" [label="reshape.1089 \n f32[32,128,8]"];
	"transpose.1090" [label="transpose.1090 \n f32[32,8,128]"];
	"dot.1274" [label="dot.1274 \n f32[32,128,128]"];
	"reshape.1275" [label="reshape.1275 \n f32[16,2,128,128]"];
	"multiply.1276" [label="multiply.1276 \n f32[16,2,128,128]"];
	"multiply.1277" [label="multiply.1277 \n f32[16,2,128,128]"];
	"constant.1278" [label="constant.1278 \n f32[] constant(0), metadata="];
	"reduce.1283" [label="reduce.1283 \n f32[16,2,128]"];
	"broadcast.1284" [label="broadcast.1284 \n f32[16,2,128,128]"];
	"subtract.1285" [label="subtract.1285 \n f32[16,2,128,128]"];
	"multiply.1286" [label="multiply.1286 \n f32[16,2,128,128]"];
	"broadcast.1287" [label="broadcast.1287 \n f32[16,2,128,128]"];
	"divide.1288" [label="divide.1288 \n f32[16,2,128,128]"];
	"reshape.1289" [label="reshape.1289 \n f32[32,128,128]"];
	"dot.1307" [label="dot.1307 \n f32[32,8,128]"];
	"reshape.1308" [label="reshape.1308 \n f32[16,2,8,128]"];
	"transpose.1310" [label="transpose.1310 \n f32[16,128,2,8]"];
	"reshape.1312" [label="reshape.1312 \n f32[2048,16]"];
	"dot.1313" [label="dot.1313 \n f32[2048,16]"];
	"reshape.1314" [label="reshape.1314 \n f32[16,128,16]"];
	"add.1334" [label="add.1334 \n f32[16,128,16]"];
	"reshape.1087" [label="reshape.1087 \n f32[32,8,128]"];
	"transpose.1088" [label="transpose.1088 \n f32[32,128,8]"];
	"dot.1290" [label="dot.1290 \n f32[32,128,8]"];
	"reshape.1291" [label="reshape.1291 \n f32[16,2,128,8]"];
	"transpose.1292" [label="transpose.1292 \n f32[16,128,2,8]"];
	"reshape.1294" [label="reshape.1294 \n f32[2048,16]"];
	"dot.1295" [label="dot.1295 \n f32[2048,16]"];
	"reshape.1296" [label="reshape.1296 \n f32[16,128,16]"];
	"add.1335" [label="add.1335 \n f32[16,128,16]"];
	"multiply.1336" [label="multiply.1336 \n f32[16,128,16]"];
	"broadcast.1337" [label="broadcast.1337 \n f32[16,128,16]"];
	"multiply.1338" [label="multiply.1338 \n f32[16,128,16]"];
	"reshape.1339" [label="reshape.1339 \n f32[1,2048,16]"];
	"reshape.1352" [label="reshape.1352 \n f32[2048,16]"];
	"constant.1064" [label="constant.1064 \n f32[] constant(0), metadata="];
	"broadcast.1068" [label="broadcast.1068 \n f32[2048,16]"];
	"select.1362" [label="select.1362 \n f32[2048,16]"];
	"scatter.1385" [label="scatter.1385 \n f32[30522,16]"];
	"add.1406" [label="add.1406 \n f32[30522,16]"];
	"constant.1407" [label="constant.1407 \n f32[] constant(0), metadata="];
	"reduce.1413" [label="reduce.1413 \n f32[16]"];
	"multiply.1429" [label="multiply.1429 \n f32[16,128,16]"];
	"constant.1430" [label="constant.1430 \n f32[] constant(0), metadata="];
	"reduce.1436" [label="reduce.1436 \n f32[16]"];
	"constant.1446" [label="constant.1446 \n f32[] constant(0), metadata="];
	"reduce.1452" [label="reduce.1452 \n f32[16]"];
	"reshape.1462" [label="reshape.1462 \n f32[2048,16]"];
	"transpose.1463" [label="transpose.1463 \n f32[16,2048]"];
	"dot.2" [label="dot.2 \n f32[16,16]"];
	"constant.1473" [label="constant.1473 \n f32[] constant(0), metadata="];
	"reduce.1479" [label="reduce.1479 \n f32[16]"];
	"slice.1490" [label="slice.1490 \n f32[16,1,16]"];
	"reshape.1491" [label="reshape.1491 \n f32[16,16]"];
	"transpose.1492" [label="transpose.1492 \n f32[16,16]"];
	"dot.3" [label="dot.3 \n f32[16,16]"];
	"constant.1502" [label="constant.1502 \n f32[] constant(0), metadata="];
	"reduce.1508" [label="reduce.1508 \n f32[16]"];
	"multiply.1524" [label="multiply.1524 \n f32[16,128,16]"];
	"constant.1525" [label="constant.1525 \n f32[] constant(0), metadata="];
	"reduce.1531" [label="reduce.1531 \n f32[16]"];
	"constant.1541" [label="constant.1541 \n f32[] constant(0), metadata="];
	"reduce.1547" [label="reduce.1547 \n f32[16]"];
	"reshape.1557" [label="reshape.1557 \n f32[2048,4096]"];
	"transpose.1558" [label="transpose.1558 \n f32[4096,2048]"];
	"dot.4" [label="dot.4 \n f32[16,4096]"];
	"constant.1568" [label="constant.1568 \n f32[] constant(0), metadata="];
	"reduce.1574" [label="reduce.1574 \n f32[4096]"];
	"reshape.1584" [label="reshape.1584 \n f32[2048,16]"];
	"transpose.1585" [label="transpose.1585 \n f32[16,2048]"];
	"dot.5" [label="dot.5 \n f32[4096,16]"];
	"constant.1595" [label="constant.1595 \n f32[] constant(0), metadata="];
	"reduce.1601" [label="reduce.1601 \n f32[16]"];
	"multiply.1617" [label="multiply.1617 \n f32[16,128,16]"];
	"constant.1618" [label="constant.1618 \n f32[] constant(0), metadata="];
	"reduce.1624" [label="reduce.1624 \n f32[16]"];
	"constant.1634" [label="constant.1634 \n f32[] constant(0), metadata="];
	"reduce.1640" [label="reduce.1640 \n f32[16]"];
	"reshape.1650" [label="reshape.1650 \n f32[16,2,128,8]"];
	"transpose.1651" [label="transpose.1651 \n f32[16,128,2,8]"];
	"reshape.1653" [label="reshape.1653 \n f32[2048,16]"];
	"transpose.1654" [label="transpose.1654 \n f32[16,2048]"];
	"dot.6" [label="dot.6 \n f32[16,16]"];
	"reshape.1664" [label="reshape.1664 \n f32[16,2,128,8]"];
	"constant.1667" [label="constant.1667 \n f32[] constant(0), metadata="];
	"reduce.14" [label="reduce.14 \n f32[2,8]"];
	"reshape.1675" [label="reshape.1675 \n f32[16]"];
	"reshape.1683" [label="reshape.1683 \n f32[2048,16]"];
	"transpose.1684" [label="transpose.1684 \n f32[16,2048]"];
	"dot.7" [label="dot.7 \n f32[16,16]"];
	"reshape.1694" [label="reshape.1694 \n f32[16,2,8,128]"];
	"constant.1698" [label="constant.1698 \n f32[] constant(0), metadata="];
	"reduce.15" [label="reduce.15 \n f32[2,8]"];
	"reshape.1706" [label="reshape.1706 \n f32[16]"];
	"reshape.1714" [label="reshape.1714 \n f32[2048,16]"];
	"transpose.1715" [label="transpose.1715 \n f32[16,2048]"];
	"dot.8" [label="dot.8 \n f32[16,16]"];
	"reshape.1725" [label="reshape.1725 \n f32[16,2,128,8]"];
	"constant.1728" [label="constant.1728 \n f32[] constant(0), metadata="];
	"reduce.16" [label="reduce.16 \n f32[2,8]"];
	"reshape.1736" [label="reshape.1736 \n f32[16]"];
	"reshape.1744" [label="reshape.1744 \n f32[2048,16]"];
	"transpose.1745" [label="transpose.1745 \n f32[16,2048]"];
	"dot.9" [label="dot.9 \n f32[16,16]"];
	"constant.1755" [label="constant.1755 \n f32[] constant(0), metadata="];
	"reduce.1761" [label="reduce.1761 \n f32[16]"];
	"multiply.1777" [label="multiply.1777 \n f32[16,128,16]"];
	"constant.1778" [label="constant.1778 \n f32[] constant(0), metadata="];
	"reduce.1784" [label="reduce.1784 \n f32[16]"];
	"broadcast.34" [label="broadcast.34 \n f32[512,16]"];
	"slice.1795" [label="slice.1795 \n s64[1,128]"];
	"reshape.12" [label="reshape.12 \n s64[128]"];
	"broadcast.35" [label="broadcast.35 \n s64[128]"];
	"compare.6" [label="compare.6 \n pred[128]"];
	"broadcast.36" [label="broadcast.36 \n s64[128]"];
	"add.2" [label="add.2 \n s64[128]"];
	"select.4" [label="select.4 \n s64[128]"];
	"reshape.13" [label="reshape.13 \n s64[128,1]"];
	"reshape.1796" [label="reshape.1796 \n f32[16,128,16]"];
	"constant.1797" [label="constant.1797 \n f32[] constant(0), metadata="];
	"reduce.1803" [label="reduce.1803 \n f32[128,16]"];
	"scatter.0" [label="scatter.0 \n f32[512,16]"];
	"broadcast.37" [label="broadcast.37 \n f32[2,16]"];
	"reshape.15" [label="reshape.15 \n s64[2048]"];
	"broadcast.38" [label="broadcast.38 \n s64[2048]"];
	"compare.7" [label="compare.7 \n pred[2048]"];
	"broadcast.39" [label="broadcast.39 \n s64[2048]"];
	"add.3" [label="add.3 \n s64[2048]"];
	"select.5" [label="select.5 \n s64[2048]"];
	"reshape.16" [label="reshape.16 \n s64[2048,1]"];
	"reshape.17" [label="reshape.17 \n f32[2048,16]"];
	"scatter.1" [label="scatter.1 \n f32[2,16]"];
	"tuple.1863" [label="tuple.1863 \n (f32[1]"]; 
 	"constant.6" -> "broadcast.144";
	"p35.754" -> "compare.8";
	"broadcast.144" -> "compare.8";
	"compare.8" -> "reshape.350";
	"p40.854" -> "custom-call.97";
	"custom-call.97" -> "broadcast.867";
	"p34.659" -> "custom-call.71";
	"custom-call.71" -> "broadcast.672";
	"p29.530" -> "custom-call.72";
	"custom-call.72" -> "broadcast.543";
	"p17.240" -> "custom-call.73";
	"custom-call.73" -> "broadcast.253";
	"p16.214" -> "custom-call.74";
	"p15.212" -> "convert.6";
	"convert.6" -> "reshape.261";
	"custom-call.74" -> "gather.223";
	"reshape.261" -> "gather.223";
	"p14.200" -> "custom-call.75";
	"p13.198" -> "convert.5";
	"convert.5" -> "reshape.260";
	"custom-call.75" -> "gather.209";
	"reshape.260" -> "gather.209";
	"gather.223" -> "add.12";
	"gather.209" -> "add.12";
	"add.12" -> "reshape.336";
	"p12.181" -> "custom-call.76";
	"p11.177" -> "convert.4";
	"convert.4" -> "slice.0";
	"slice.0" -> "reshape.259";
	"custom-call.76" -> "gather.190";
	"reshape.259" -> "gather.190";
	"gather.190" -> "broadcast.228";
	"reshape.336" -> "add.229";
	"broadcast.228" -> "add.229";
	"add.229" -> "reshape.230";
	"constant.167" -> "broadcast.171";
	"constant.162" -> "broadcast.166";
	"reshape.230" -> "batch-norm-training.231";
	"broadcast.171" -> "batch-norm-training.231";
	"broadcast.166" -> "batch-norm-training.231";
	"batch-norm-training.231" -> "get-tuple-element.232";
	"get-tuple-element.232" -> "reshape.239";
	"p10.144" -> "custom-call.78";
	"custom-call.78" -> "broadcast.249";
	"reshape.239" -> "multiply.252";
	"broadcast.249" -> "multiply.252";
	"broadcast.253" -> "add.254";
	"multiply.252" -> "add.254";
	"constant.109" -> "multiply.110";
	"p9.108" -> "multiply.110";
	"multiply.110" -> "add.112";
	"constant.111" -> "add.112";
	"add.112" -> "convert.119";
	"convert.119" -> "reshape.121";
	"reshape.121" -> "concatenate.123";
	"constant.35" -> "concatenate.123";
	"concatenate.123" -> "rng-bit-generator.124";
	"rng-bit-generator.124" -> "get-tuple-element.125";
	"constant.127" -> "broadcast.128";
	"get-tuple-element.125" -> "shift-right-logical.129";
	"broadcast.128" -> "shift-right-logical.129";
	"shift-right-logical.129" -> "convert.130";
	"constant.131" -> "broadcast.132";
	"convert.130" -> "multiply.136";
	"broadcast.132" -> "multiply.136";
	"p8.107" -> "broadcast.116";
	"multiply.136" -> "compare.139";
	"broadcast.116" -> "compare.139";
	"constant.22" -> "divide.4";
	"p8.107" -> "divide.4";
	"divide.4" -> "broadcast.41";
	"constant.33" -> "broadcast.66";
	"compare.139" -> "select.13";
	"broadcast.41" -> "select.13";
	"broadcast.66" -> "select.13";
	"add.254" -> "multiply.256";
	"select.13" -> "multiply.256";
	"multiply.256" -> "reshape.468";
	"p28.459" -> "custom-call.79";
	"custom-call.79" -> "transpose.467";
	"reshape.468" -> "dot.469";
	"transpose.467" -> "dot.469";
	"dot.469" -> "reshape.470";
	"p27.450" -> "custom-call.80";
	"custom-call.80" -> "broadcast.471";
	"reshape.470" -> "add.472";
	"broadcast.471" -> "add.472";
	"add.472" -> "reshape.475";
	"reshape.475" -> "transpose.476";
	"transpose.476" -> "reshape.478";
	"multiply.256" -> "reshape.433";
	"p26.424" -> "custom-call.81";
	"custom-call.81" -> "transpose.432";
	"reshape.433" -> "dot.434";
	"transpose.432" -> "dot.434";
	"dot.434" -> "reshape.435";
	"p25.415" -> "custom-call.82";
	"custom-call.82" -> "broadcast.436";
	"reshape.435" -> "add.437";
	"broadcast.436" -> "add.437";
	"add.437" -> "reshape.440";
	"reshape.440" -> "transpose.442";
	"transpose.442" -> "reshape.444";
	"reshape.478" -> "dot.479";
	"reshape.444" -> "dot.479";
	"p24.409" -> "broadcast.146";
	"dot.479" -> "divide.10";
	"broadcast.146" -> "divide.10";
	"divide.10" -> "reshape.344";
	"constant.400" -> "broadcast.148";
	"p23.388" -> "convert.2";
	"broadcast.148" -> "subtract.4";
	"convert.2" -> "subtract.4";
	"p22.387" -> "broadcast.150";
	"subtract.4" -> "multiply.23";
	"broadcast.150" -> "multiply.23";
	"multiply.23" -> "broadcast.485";
	"reshape.344" -> "add.486";
	"broadcast.485" -> "add.486";
	"add.486" -> "reduce.492";
	"constant.487" -> "reduce.492";
	"MaxComputation.488" -> "reduce.492";
	"reduce.492" -> "broadcast.493";
	"add.486" -> "subtract.494";
	"broadcast.493" -> "subtract.494";
	"subtract.494" -> "exponential.495";
	"exponential.495" -> "reduce.501";
	"constant.496" -> "reduce.501";
	"AddComputation.497" -> "reduce.501";
	"reduce.501" -> "broadcast.502";
	"exponential.495" -> "divide.503";
	"broadcast.502" -> "divide.503";
	"constant.257" -> "multiply.258";
	"add.112" -> "multiply.258";
	"multiply.258" -> "add.260";
	"constant.259" -> "add.260";
	"add.260" -> "convert.358";
	"convert.358" -> "reshape.360";
	"reshape.360" -> "concatenate.362";
	"constant.36" -> "concatenate.362";
	"concatenate.362" -> "rng-bit-generator.363";
	"rng-bit-generator.363" -> "get-tuple-element.364";
	"constant.366" -> "broadcast.367";
	"get-tuple-element.364" -> "shift-right-logical.368";
	"broadcast.367" -> "shift-right-logical.368";
	"shift-right-logical.368" -> "convert.369";
	"constant.370" -> "broadcast.371";
	"convert.369" -> "multiply.375";
	"broadcast.371" -> "multiply.375";
	"p8.107" -> "broadcast.355";
	"multiply.375" -> "compare.378";
	"broadcast.355" -> "compare.378";
	"constant.23" -> "divide.5";
	"p8.107" -> "divide.5";
	"divide.5" -> "broadcast.45";
	"constant.32" -> "broadcast.64";
	"compare.378" -> "select.12";
	"broadcast.45" -> "select.12";
	"broadcast.64" -> "select.12";
	"divide.503" -> "multiply.504";
	"select.12" -> "multiply.504";
	"multiply.504" -> "reshape.506";
	"multiply.256" -> "reshape.341";
	"p21.332" -> "custom-call.83";
	"custom-call.83" -> "transpose.340";
	"reshape.341" -> "dot.342";
	"transpose.340" -> "dot.342";
	"dot.342" -> "reshape.343";
	"p20.323" -> "custom-call.84";
	"custom-call.84" -> "broadcast.344";
	"reshape.343" -> "add.345";
	"broadcast.344" -> "add.345";
	"add.345" -> "reshape.348";
	"reshape.348" -> "transpose.349";
	"transpose.349" -> "reshape.351";
	"reshape.506" -> "dot.507";
	"reshape.351" -> "dot.507";
	"dot.507" -> "reshape.508";
	"reshape.508" -> "transpose.509";
	"transpose.509" -> "reshape.511";
	"p19.309" -> "custom-call.85";
	"custom-call.85" -> "transpose.317";
	"reshape.511" -> "dot.512";
	"transpose.317" -> "dot.512";
	"dot.512" -> "reshape.513";
	"p18.300" -> "custom-call.86";
	"custom-call.86" -> "broadcast.514";
	"reshape.513" -> "add.515";
	"broadcast.514" -> "add.515";
	"constant.261" -> "multiply.262";
	"add.260" -> "multiply.262";
	"multiply.262" -> "add.264";
	"constant.263" -> "add.264";
	"add.264" -> "convert.271";
	"convert.271" -> "reshape.273";
	"reshape.273" -> "concatenate.275";
	"constant.37" -> "concatenate.275";
	"concatenate.275" -> "rng-bit-generator.276";
	"rng-bit-generator.276" -> "get-tuple-element.277";
	"constant.279" -> "broadcast.280";
	"get-tuple-element.277" -> "shift-right-logical.281";
	"broadcast.280" -> "shift-right-logical.281";
	"shift-right-logical.281" -> "convert.282";
	"constant.283" -> "broadcast.284";
	"convert.282" -> "multiply.288";
	"broadcast.284" -> "multiply.288";
	"p8.107" -> "broadcast.268";
	"multiply.288" -> "compare.291";
	"broadcast.268" -> "compare.291";
	"constant.24" -> "divide.6";
	"p8.107" -> "divide.6";
	"divide.6" -> "broadcast.46";
	"constant.31" -> "broadcast.63";
	"compare.291" -> "select.11";
	"broadcast.46" -> "select.11";
	"broadcast.63" -> "select.11";
	"add.515" -> "multiply.518";
	"select.11" -> "multiply.518";
	"multiply.518" -> "add.519";
	"multiply.256" -> "add.519";
	"add.519" -> "reshape.520";
	"constant.97" -> "broadcast.101";
	"constant.92" -> "broadcast.96";
	"reshape.520" -> "batch-norm-training.521";
	"broadcast.101" -> "batch-norm-training.521";
	"broadcast.96" -> "batch-norm-training.521";
	"batch-norm-training.521" -> "get-tuple-element.522";
	"get-tuple-element.522" -> "reshape.529";
	"p7.74" -> "custom-call.87";
	"custom-call.87" -> "broadcast.539";
	"reshape.529" -> "multiply.542";
	"broadcast.539" -> "multiply.542";
	"broadcast.543" -> "add.544";
	"multiply.542" -> "add.544";
	"add.544" -> "reshape.626";
	"p33.617" -> "custom-call.88";
	"custom-call.88" -> "transpose.625";
	"reshape.626" -> "dot.627";
	"transpose.625" -> "dot.627";
	"dot.627" -> "reshape.628";
	"p32.608" -> "custom-call.89";
	"custom-call.89" -> "broadcast.629";
	"reshape.628" -> "add.630";
	"broadcast.629" -> "add.630";
	"add.630" -> "custom-call.90";
	"custom-call.90" -> "reshape.640";
	"p31.594" -> "custom-call.91";
	"custom-call.91" -> "transpose.602";
	"reshape.640" -> "dot.641";
	"transpose.602" -> "dot.641";
	"dot.641" -> "reshape.642";
	"p30.585" -> "custom-call.92";
	"custom-call.92" -> "broadcast.643";
	"reshape.642" -> "add.644";
	"broadcast.643" -> "add.644";
	"constant.546" -> "multiply.547";
	"add.264" -> "multiply.547";
	"multiply.547" -> "add.549";
	"constant.548" -> "add.549";
	"add.549" -> "convert.556";
	"convert.556" -> "reshape.558";
	"reshape.558" -> "concatenate.560";
	"constant.40" -> "concatenate.560";
	"concatenate.560" -> "rng-bit-generator.561";
	"rng-bit-generator.561" -> "get-tuple-element.562";
	"constant.564" -> "broadcast.565";
	"get-tuple-element.562" -> "shift-right-logical.566";
	"broadcast.565" -> "shift-right-logical.566";
	"shift-right-logical.566" -> "convert.567";
	"constant.568" -> "broadcast.569";
	"convert.567" -> "multiply.573";
	"broadcast.569" -> "multiply.573";
	"p8.107" -> "broadcast.553";
	"multiply.573" -> "compare.576";
	"broadcast.553" -> "compare.576";
	"constant.25" -> "divide.7";
	"p8.107" -> "divide.7";
	"divide.7" -> "broadcast.47";
	"constant.30" -> "broadcast.61";
	"compare.576" -> "select.10";
	"broadcast.47" -> "select.10";
	"broadcast.61" -> "select.10";
	"add.644" -> "multiply.647";
	"select.10" -> "multiply.647";
	"multiply.647" -> "add.648";
	"add.544" -> "add.648";
	"add.648" -> "reshape.649";
	"constant.63" -> "broadcast.67";
	"constant.58" -> "broadcast.62";
	"reshape.649" -> "batch-norm-training.650";
	"broadcast.67" -> "batch-norm-training.650";
	"broadcast.62" -> "batch-norm-training.650";
	"batch-norm-training.650" -> "get-tuple-element.651";
	"get-tuple-element.651" -> "reshape.658";
	"p6.40" -> "custom-call.93";
	"custom-call.93" -> "broadcast.668";
	"reshape.658" -> "multiply.671";
	"broadcast.668" -> "multiply.671";
	"broadcast.672" -> "add.673";
	"multiply.671" -> "add.673";
	"add.673" -> "reshape.830";
	"p39.821" -> "custom-call.94";
	"custom-call.94" -> "transpose.829";
	"reshape.830" -> "dot.831";
	"transpose.829" -> "dot.831";
	"dot.831" -> "reshape.832";
	"p38.812" -> "custom-call.95";
	"custom-call.95" -> "broadcast.833";
	"reshape.832" -> "add.834";
	"broadcast.833" -> "add.834";
	"add.834" -> "custom-call.96";
	"custom-call.96" -> "reshape.844";
	"constant.802" -> "broadcast.806";
	"constant.797" -> "broadcast.801";
	"reshape.844" -> "batch-norm-training.845";
	"broadcast.806" -> "batch-norm-training.845";
	"broadcast.801" -> "batch-norm-training.845";
	"batch-norm-training.845" -> "get-tuple-element.846";
	"get-tuple-element.846" -> "reshape.853";
	"p37.779" -> "custom-call.98";
	"custom-call.98" -> "broadcast.863";
	"reshape.853" -> "multiply.866";
	"broadcast.863" -> "multiply.866";
	"broadcast.867" -> "add.868";
	"multiply.866" -> "add.868";
	"add.868" -> "reshape.869";
	"p16.214" -> "custom-call.99";
	"custom-call.99" -> "transpose.777";
	"reshape.869" -> "dot.870";
	"transpose.777" -> "dot.870";
	"dot.870" -> "reshape.871";
	"p36.761" -> "custom-call.100";
	"custom-call.100" -> "broadcast.872";
	"reshape.871" -> "add.873";
	"broadcast.872" -> "add.873";
	"add.873" -> "reshape.876";
	"reshape.876" -> "reduce.0";
	"constant.0" -> "reduce.0";
	"SimpleCrossEntropyLossForwardMax.877" -> "reduce.0";
	"reduce.0" -> "broadcast.0";
	"reshape.876" -> "subtract.0";
	"broadcast.0" -> "subtract.0";
	"subtract.0" -> "exponential.0";
	"exponential.0" -> "reduce.1";
	"constant.2" -> "reduce.1";
	"SimpleCrossEntropyLossForwardAdd.881" -> "reduce.1";
	"reduce.1" -> "log.0";
	"log.0" -> "broadcast.1";
	"subtract.0" -> "subtract.1";
	"broadcast.1" -> "subtract.1";
	"p35.754" -> "reshape.1";
	"reshape.1" -> "broadcast.3";
	"broadcast.3" -> "compare.0";
	"iota.5" -> "compare.0";
	"constant.4" -> "broadcast.6";
	"constant.5" -> "broadcast.7";
	"compare.0" -> "select.0";
	"broadcast.6" -> "select.0";
	"broadcast.7" -> "select.0";
	"subtract.1" -> "multiply.2";
	"select.0" -> "multiply.2";
	"multiply.2" -> "reduce.2";
	"constant.2" -> "reduce.2";
	"SimpleCrossEntropyLossForwardAdd.885" -> "reduce.2";
	"constant.26" -> "broadcast.48";
	"reshape.350" -> "select.6";
	"reduce.2" -> "select.6";
	"broadcast.48" -> "select.6";
	"select.6" -> "reduce.3";
	"constant.2" -> "reduce.3";
	"SimpleCrossEntropyLossForwardAdd.889" -> "reduce.3";
	"reshape.350" -> "convert.0";
	"convert.0" -> "reduce.4";
	"constant.2" -> "reduce.4";
	"SimpleCrossEntropyLossForwardAdd.893" -> "reduce.4";
	"reduce.3" -> "divide.0";
	"reduce.4" -> "divide.0";
	"divide.0" -> "negate.0";
	"constant.13" -> "broadcast.25";
	"p1.4" -> "compare.4";
	"broadcast.25" -> "compare.4";
	"add.673" -> "slice.675";
	"slice.675" -> "reshape.676";
	"p5.30" -> "custom-call.102";
	"custom-call.102" -> "transpose.38";
	"reshape.676" -> "dot.677";
	"transpose.38" -> "dot.677";
	"p4.22" -> "custom-call.103";
	"custom-call.103" -> "broadcast.681";
	"dot.677" -> "add.682";
	"broadcast.681" -> "add.682";
	"add.682" -> "tanh.683";
	"p3.13" -> "custom-call.104";
	"custom-call.104" -> "transpose.21";
	"tanh.683" -> "dot.684";
	"transpose.21" -> "dot.684";
	"p2.5" -> "custom-call.105";
	"custom-call.105" -> "broadcast.688";
	"dot.684" -> "add.689";
	"broadcast.688" -> "add.689";
	"add.689" -> "reduce.6";
	"constant.9" -> "reduce.6";
	"SimpleCrossEntropyLossForwardMax.690" -> "reduce.6";
	"reduce.6" -> "broadcast.17";
	"add.689" -> "subtract.2";
	"broadcast.17" -> "subtract.2";
	"subtract.2" -> "exponential.2";
	"exponential.2" -> "reduce.7";
	"constant.10" -> "reduce.7";
	"SimpleCrossEntropyLossForwardAdd.694" -> "reduce.7";
	"reduce.7" -> "log.1";
	"log.1" -> "broadcast.18";
	"subtract.2" -> "subtract.3";
	"broadcast.18" -> "subtract.3";
	"p1.4" -> "broadcast.20";
	"broadcast.20" -> "compare.3";
	"iota.7" -> "compare.3";
	"constant.11" -> "broadcast.23";
	"constant.12" -> "broadcast.24";
	"compare.3" -> "select.2";
	"broadcast.23" -> "select.2";
	"broadcast.24" -> "select.2";
	"subtract.3" -> "multiply.7";
	"select.2" -> "multiply.7";
	"multiply.7" -> "reduce.8";
	"constant.10" -> "reduce.8";
	"SimpleCrossEntropyLossForwardAdd.698" -> "reduce.8";
	"constant.27" -> "broadcast.49";
	"compare.4" -> "select.7";
	"reduce.8" -> "select.7";
	"broadcast.49" -> "select.7";
	"select.7" -> "reduce.9";
	"constant.10" -> "reduce.9";
	"SimpleCrossEntropyLossForwardAdd.702" -> "reduce.9";
	"compare.4" -> "convert.1";
	"convert.1" -> "reduce.10";
	"constant.10" -> "reduce.10";
	"SimpleCrossEntropyLossForwardAdd.706" -> "reduce.10";
	"reduce.9" -> "divide.2";
	"reduce.10" -> "divide.2";
	"divide.2" -> "negate.2";
	"negate.0" -> "add.940";
	"negate.2" -> "add.940";
	"add.940" -> "divide.941";
	"p0.2" -> "divide.941";
	"divide.941" -> "reshape.139";
	"p41.943" -> "add.945";
	"reshape.139" -> "add.945";
	"subtract.3" -> "exponential.3";
	"convert.1" -> "reduce.11";
	"constant.14" -> "reduce.11";
	"SimpleCrossEntropyLossBackwardAdd.950" -> "reduce.11";
	"p0.2" -> "multiply.16";
	"reduce.11" -> "multiply.16";
	"constant.947" -> "divide.3";
	"multiply.16" -> "divide.3";
	"divide.3" -> "broadcast.26";
	"constant.28" -> "broadcast.51";
	"compare.4" -> "select.8";
	"broadcast.26" -> "select.8";
	"broadcast.51" -> "select.8";
	"select.8" -> "broadcast.27";
	"exponential.3" -> "multiply.10";
	"broadcast.27" -> "multiply.10";
	"p1.4" -> "broadcast.29";
	"broadcast.29" -> "compare.5";
	"iota.9" -> "compare.5";
	"divide.3" -> "negate.3";
	"negate.3" -> "broadcast.32";
	"constant.15" -> "broadcast.33";
	"compare.5" -> "select.3";
	"broadcast.32" -> "select.3";
	"broadcast.33" -> "select.3";
	"multiply.10" -> "add.1";
	"select.3" -> "add.1";
	"add.1" -> "reduce.989";
	"constant.983" -> "reduce.989";
	"AddComputation.985" -> "reduce.989";
	"reduce.989" -> "custom-call.107";
	"tanh.683" -> "transpose.999";
	"add.1" -> "dot";
	"transpose.999" -> "dot";
	"dot" -> "custom-call.108";
	"subtract.1" -> "exponential.1";
	"convert.0" -> "reduce.5";
	"constant.7" -> "reduce.5";
	"SimpleCrossEntropyLossBackwardAdd.1009" -> "reduce.5";
	"p0.2" -> "multiply.17";
	"reduce.5" -> "multiply.17";
	"constant.947" -> "divide.1";
	"multiply.17" -> "divide.1";
	"divide.1" -> "broadcast.9";
	"constant.29" -> "broadcast.53";
	"reshape.350" -> "select.9";
	"broadcast.9" -> "select.9";
	"broadcast.53" -> "select.9";
	"select.9" -> "broadcast.10";
	"exponential.1" -> "multiply.5";
	"broadcast.10" -> "multiply.5";
	"p35.754" -> "reshape.4";
	"reshape.4" -> "broadcast.12";
	"broadcast.12" -> "compare.2";
	"iota.11" -> "compare.2";
	"divide.1" -> "negate.1";
	"negate.1" -> "broadcast.15";
	"constant.8" -> "broadcast.16";
	"compare.2" -> "select.1";
	"broadcast.15" -> "select.1";
	"broadcast.16" -> "select.1";
	"multiply.5" -> "add.0";
	"select.1" -> "add.0";
	"add.0" -> "reduce.1049";
	"constant.1043" -> "reduce.1049";
	"AddComputation.1045" -> "reduce.1049";
	"reduce.1049" -> "custom-call.109";
	"add.868" -> "reshape.1395";
	"reshape.1395" -> "transpose.1396";
	"add.0" -> "dot.1";
	"transpose.1396" -> "dot.1";
	"dot.1" -> "custom-call.110";
	"constant.1375" -> "broadcast.1379";
	"p15.212" -> "reshape.1354";
	"constant.1369" -> "broadcast.1370";
	"reshape.1354" -> "compare.1371";
	"broadcast.1370" -> "compare.1371";
	"p42.1363" -> "broadcast.1367";
	"reshape.1354" -> "add.1368";
	"broadcast.1367" -> "add.1368";
	"compare.1371" -> "select.1372";
	"add.1368" -> "select.1372";
	"reshape.1354" -> "select.1372";
	"select.1372" -> "reshape.1373";
	"reshape.1354" -> "convert.1355";
	"constant.1353" -> "broadcast.1356";
	"convert.1355" -> "compare.1357";
	"broadcast.1356" -> "compare.1357";
	"compare.1357" -> "broadcast.1361";
	"constant.1069" -> "broadcast.1073";
	"batch-norm-training.231" -> "get-tuple-element.233";
	"batch-norm-training.231" -> "get-tuple-element.234";
	"constant.235" -> "broadcast.236";
	"get-tuple-element.234" -> "add.237";
	"broadcast.236" -> "add.237";
	"add.237" -> "sqrt";
	"sqrt" -> "multiply.1344";
	"sqrt" -> "multiply.1344";
	"constant.43" -> "broadcast.54";
	"multiply.1344" -> "add.8";
	"broadcast.54" -> "add.8";
	"constant.1093" -> "broadcast.1097";
	"batch-norm-training.521" -> "get-tuple-element.523";
	"batch-norm-training.521" -> "get-tuple-element.524";
	"constant.525" -> "broadcast.526";
	"get-tuple-element.524" -> "add.527";
	"broadcast.526" -> "add.527";
	"add.527" -> "sqrt.1";
	"sqrt.1" -> "multiply.1259";
	"sqrt.1" -> "multiply.1259";
	"constant.44" -> "broadcast.56";
	"multiply.1259" -> "add.9";
	"broadcast.56" -> "add.9";
	"constant.1113" -> "broadcast.1117";
	"batch-norm-training.650" -> "get-tuple-element.652";
	"batch-norm-training.650" -> "get-tuple-element.653";
	"constant.654" -> "broadcast.655";
	"get-tuple-element.653" -> "add.656";
	"broadcast.655" -> "add.656";
	"add.656" -> "sqrt.2";
	"sqrt.2" -> "multiply.1225";
	"sqrt.2" -> "multiply.1225";
	"constant.45" -> "broadcast.58";
	"multiply.1225" -> "add.10";
	"broadcast.58" -> "add.10";
	"constant.1172" -> "broadcast.1176";
	"batch-norm-training.845" -> "get-tuple-element.847";
	"batch-norm-training.845" -> "get-tuple-element.848";
	"constant.849" -> "broadcast.850";
	"get-tuple-element.848" -> "add.851";
	"broadcast.850" -> "add.851";
	"add.851" -> "sqrt.3";
	"sqrt.3" -> "multiply.1196";
	"sqrt.3" -> "multiply.1196";
	"constant.46" -> "broadcast.59";
	"multiply.1196" -> "add.11";
	"broadcast.59" -> "add.11";
	"add.0" -> "dot.1187";
	"custom-call.99" -> "dot.1187";
	"dot.1187" -> "reshape.1188";
	"custom-call.98" -> "broadcast.1189";
	"reshape.1188" -> "multiply.1190";
	"broadcast.1189" -> "multiply.1190";
	"multiply.1190" -> "reshape.1191";
	"reshape.844" -> "batch-norm-grad.1199";
	"broadcast.1176" -> "batch-norm-grad.1199";
	"get-tuple-element.847" -> "batch-norm-grad.1199";
	"add.11" -> "batch-norm-grad.1199";
	"reshape.1191" -> "batch-norm-grad.1199";
	"batch-norm-grad.1199" -> "get-tuple-element.1200";
	"get-tuple-element.1200" -> "reshape.1203";
	"add.834" -> "custom-call.101";
	"reshape.1203" -> "multiply.6";
	"custom-call.101" -> "multiply.6";
	"multiply.6" -> "reshape.1214";
	"reshape.1214" -> "dot.1215";
	"custom-call.94" -> "dot.1215";
	"dot.1215" -> "reshape.1216";
	"add.1" -> "dot.1151";
	"custom-call.104" -> "dot.1151";
	"constant.1143" -> "broadcast.1147";
	"tanh.683" -> "multiply.1142";
	"tanh.683" -> "multiply.1142";
	"broadcast.1147" -> "subtract.1148";
	"multiply.1142" -> "subtract.1148";
	"dot.1151" -> "multiply.1152";
	"subtract.1148" -> "multiply.1152";
	"multiply.1152" -> "dot.1153";
	"custom-call.102" -> "dot.1153";
	"dot.1153" -> "reshape.1154";
	"reshape.1154" -> "pad";
	"constant.47" -> "pad";
	"reshape.1216" -> "add.1217";
	"pad" -> "add.1217";
	"custom-call.93" -> "broadcast.1218";
	"add.1217" -> "multiply.1219";
	"broadcast.1218" -> "multiply.1219";
	"multiply.1219" -> "reshape.1220";
	"reshape.649" -> "batch-norm-grad.1228";
	"broadcast.1117" -> "batch-norm-grad.1228";
	"get-tuple-element.652" -> "batch-norm-grad.1228";
	"add.10" -> "batch-norm-grad.1228";
	"reshape.1220" -> "batch-norm-grad.1228";
	"batch-norm-grad.1228" -> "get-tuple-element.1229";
	"get-tuple-element.1229" -> "reshape.1232";
	"reshape.1232" -> "multiply.1233";
	"select.10" -> "multiply.1233";
	"multiply.1233" -> "reshape.1234";
	"reshape.1234" -> "dot.1235";
	"custom-call.91" -> "dot.1235";
	"dot.1235" -> "reshape.1236";
	"add.630" -> "custom-call.106";
	"reshape.1236" -> "multiply.11";
	"custom-call.106" -> "multiply.11";
	"multiply.11" -> "reshape.1247";
	"reshape.1247" -> "dot.1248";
	"custom-call.88" -> "dot.1248";
	"dot.1248" -> "reshape.1249";
	"reshape.1232" -> "add.1251";
	"reshape.1249" -> "add.1251";
	"custom-call.87" -> "broadcast.1252";
	"add.1251" -> "multiply.1253";
	"broadcast.1252" -> "multiply.1253";
	"multiply.1253" -> "reshape.1254";
	"reshape.520" -> "batch-norm-grad.1262";
	"broadcast.1097" -> "batch-norm-grad.1262";
	"get-tuple-element.523" -> "batch-norm-grad.1262";
	"add.9" -> "batch-norm-grad.1262";
	"reshape.1254" -> "batch-norm-grad.1262";
	"batch-norm-grad.1262" -> "get-tuple-element.1263";
	"get-tuple-element.1263" -> "reshape.1266";
	"multiply.504" -> "reshape.1323";
	"reshape.1323" -> "transpose.1324";
	"reshape.1266" -> "multiply.1267";
	"select.11" -> "multiply.1267";
	"multiply.1267" -> "reshape.1268";
	"reshape.1268" -> "dot.1269";
	"custom-call.85" -> "dot.1269";
	"dot.1269" -> "reshape.1271";
	"reshape.1271" -> "transpose.1272";
	"transpose.1272" -> "reshape.1273";
	"transpose.1324" -> "dot.1325";
	"reshape.1273" -> "dot.1325";
	"dot.1325" -> "reshape.1326";
	"reshape.1326" -> "transpose.1327";
	"transpose.1327" -> "reshape.1329";
	"reshape.1329" -> "dot.1330";
	"custom-call.83" -> "dot.1330";
	"dot.1330" -> "reshape.1331";
	"reshape.1266" -> "add.1333";
	"reshape.1331" -> "add.1333";
	"transpose.476" -> "reshape.1305";
	"reshape.1305" -> "transpose.1306";
	"transpose.349" -> "reshape.1089";
	"reshape.1089" -> "transpose.1090";
	"reshape.1273" -> "dot.1274";
	"transpose.1090" -> "dot.1274";
	"dot.1274" -> "reshape.1275";
	"reshape.1275" -> "multiply.1276";
	"select.12" -> "multiply.1276";
	"multiply.1276" -> "multiply.1277";
	"divide.503" -> "multiply.1277";
	"multiply.1277" -> "reduce.1283";
	"constant.1278" -> "reduce.1283";
	"AddComputation.1279" -> "reduce.1283";
	"reduce.1283" -> "broadcast.1284";
	"multiply.1276" -> "subtract.1285";
	"broadcast.1284" -> "subtract.1285";
	"divide.503" -> "multiply.1286";
	"subtract.1285" -> "multiply.1286";
	"p24.409" -> "broadcast.1287";
	"multiply.1286" -> "divide.1288";
	"broadcast.1287" -> "divide.1288";
	"divide.1288" -> "reshape.1289";
	"transpose.1306" -> "dot.1307";
	"reshape.1289" -> "dot.1307";
	"dot.1307" -> "reshape.1308";
	"reshape.1308" -> "transpose.1310";
	"transpose.1310" -> "reshape.1312";
	"reshape.1312" -> "dot.1313";
	"custom-call.81" -> "dot.1313";
	"dot.1313" -> "reshape.1314";
	"add.1333" -> "add.1334";
	"reshape.1314" -> "add.1334";
	"transpose.442" -> "reshape.1087";
	"reshape.1087" -> "transpose.1088";
	"reshape.1289" -> "dot.1290";
	"transpose.1088" -> "dot.1290";
	"dot.1290" -> "reshape.1291";
	"reshape.1291" -> "transpose.1292";
	"transpose.1292" -> "reshape.1294";
	"reshape.1294" -> "dot.1295";
	"custom-call.79" -> "dot.1295";
	"dot.1295" -> "reshape.1296";
	"add.1334" -> "add.1335";
	"reshape.1296" -> "add.1335";
	"add.1335" -> "multiply.1336";
	"select.13" -> "multiply.1336";
	"custom-call.78" -> "broadcast.1337";
	"multiply.1336" -> "multiply.1338";
	"broadcast.1337" -> "multiply.1338";
	"multiply.1338" -> "reshape.1339";
	"reshape.230" -> "batch-norm-grad.1347";
	"broadcast.1073" -> "batch-norm-grad.1347";
	"get-tuple-element.233" -> "batch-norm-grad.1347";
	"add.8" -> "batch-norm-grad.1347";
	"reshape.1339" -> "batch-norm-grad.1347";
	"batch-norm-grad.1347" -> "get-tuple-element.1348";
	"get-tuple-element.1348" -> "reshape.1352";
	"constant.1064" -> "broadcast.1068";
	"broadcast.1361" -> "select.1362";
	"reshape.1352" -> "select.1362";
	"broadcast.1068" -> "select.1362";
	"broadcast.1379" -> "scatter.1385";
	"reshape.1373" -> "scatter.1385";
	"select.1362" -> "scatter.1385";
	"ScatterCombiner.1381" -> "scatter.1385";
	"scatter.1385" -> "custom-call.111";
	"custom-call.110" -> "add.1406";
	"custom-call.111" -> "add.1406";
	"dot.1187" -> "reduce.1413";
	"constant.1407" -> "reduce.1413";
	"AddComputation.1409" -> "reduce.1413";
	"reduce.1413" -> "custom-call.112";
	"reshape.1188" -> "multiply.1429";
	"reshape.853" -> "multiply.1429";
	"multiply.1429" -> "reduce.1436";
	"constant.1430" -> "reduce.1436";
	"AddComputation.1432" -> "reduce.1436";
	"reduce.1436" -> "custom-call.113";
	"multiply.6" -> "reduce.1452";
	"constant.1446" -> "reduce.1452";
	"AddComputation.1448" -> "reduce.1452";
	"reduce.1452" -> "custom-call.114";
	"add.673" -> "reshape.1462";
	"reshape.1462" -> "transpose.1463";
	"reshape.1214" -> "dot.2";
	"transpose.1463" -> "dot.2";
	"dot.2" -> "custom-call.115";
	"multiply.1152" -> "reduce.1479";
	"constant.1473" -> "reduce.1479";
	"AddComputation.1475" -> "reduce.1479";
	"reduce.1479" -> "custom-call.116";
	"add.673" -> "slice.1490";
	"slice.1490" -> "reshape.1491";
	"reshape.1491" -> "transpose.1492";
	"multiply.1152" -> "dot.3";
	"transpose.1492" -> "dot.3";
	"dot.3" -> "custom-call.117";
	"add.1217" -> "reduce.1508";
	"constant.1502" -> "reduce.1508";
	"AddComputation.1504" -> "reduce.1508";
	"reduce.1508" -> "custom-call.118";
	"add.1217" -> "multiply.1524";
	"reshape.658" -> "multiply.1524";
	"multiply.1524" -> "reduce.1531";
	"constant.1525" -> "reduce.1531";
	"AddComputation.1527" -> "reduce.1531";
	"reduce.1531" -> "custom-call.119";
	"multiply.1233" -> "reduce.1547";
	"constant.1541" -> "reduce.1547";
	"AddComputation.1543" -> "reduce.1547";
	"reduce.1547" -> "custom-call.120";
	"custom-call.90" -> "reshape.1557";
	"reshape.1557" -> "transpose.1558";
	"reshape.1234" -> "dot.4";
	"transpose.1558" -> "dot.4";
	"dot.4" -> "custom-call.121";
	"multiply.11" -> "reduce.1574";
	"constant.1568" -> "reduce.1574";
	"AddComputation.1570" -> "reduce.1574";
	"reduce.1574" -> "custom-call.122";
	"add.544" -> "reshape.1584";
	"reshape.1584" -> "transpose.1585";
	"reshape.1247" -> "dot.5";
	"transpose.1585" -> "dot.5";
	"dot.5" -> "custom-call.123";
	"add.1251" -> "reduce.1601";
	"constant.1595" -> "reduce.1601";
	"AddComputation.1597" -> "reduce.1601";
	"reduce.1601" -> "custom-call.124";
	"add.1251" -> "multiply.1617";
	"reshape.529" -> "multiply.1617";
	"multiply.1617" -> "reduce.1624";
	"constant.1618" -> "reduce.1624";
	"AddComputation.1620" -> "reduce.1624";
	"reduce.1624" -> "custom-call.125";
	"multiply.1267" -> "reduce.1640";
	"constant.1634" -> "reduce.1640";
	"AddComputation.1636" -> "reduce.1640";
	"reduce.1640" -> "custom-call.126";
	"dot.507" -> "reshape.1650";
	"reshape.1650" -> "transpose.1651";
	"transpose.1651" -> "reshape.1653";
	"reshape.1653" -> "transpose.1654";
	"reshape.1268" -> "dot.6";
	"transpose.1654" -> "dot.6";
	"dot.6" -> "custom-call.127";
	"dot.1325" -> "reshape.1664";
	"reshape.1664" -> "reduce.14";
	"constant.1667" -> "reduce.14";
	"AddComputation.1669" -> "reduce.14";
	"reduce.14" -> "reshape.1675";
	"reshape.1675" -> "custom-call.128";
	"multiply.256" -> "reshape.1683";
	"reshape.1683" -> "transpose.1684";
	"reshape.1329" -> "dot.7";
	"transpose.1684" -> "dot.7";
	"dot.7" -> "custom-call.129";
	"dot.1307" -> "reshape.1694";
	"reshape.1694" -> "reduce.15";
	"constant.1698" -> "reduce.15";
	"AddComputation.1700" -> "reduce.15";
	"reduce.15" -> "reshape.1706";
	"reshape.1706" -> "custom-call.130";
	"multiply.256" -> "reshape.1714";
	"reshape.1714" -> "transpose.1715";
	"reshape.1312" -> "dot.8";
	"transpose.1715" -> "dot.8";
	"dot.8" -> "custom-call.131";
	"dot.1290" -> "reshape.1725";
	"reshape.1725" -> "reduce.16";
	"constant.1728" -> "reduce.16";
	"AddComputation.1730" -> "reduce.16";
	"reduce.16" -> "reshape.1736";
	"reshape.1736" -> "custom-call.132";
	"multiply.256" -> "reshape.1744";
	"reshape.1744" -> "transpose.1745";
	"reshape.1294" -> "dot.9";
	"transpose.1745" -> "dot.9";
	"dot.9" -> "custom-call.133";
	"multiply.1336" -> "reduce.1761";
	"constant.1755" -> "reduce.1761";
	"AddComputation.1757" -> "reduce.1761";
	"reduce.1761" -> "custom-call.134";
	"multiply.1336" -> "multiply.1777";
	"reshape.239" -> "multiply.1777";
	"multiply.1777" -> "reduce.1784";
	"constant.1778" -> "reduce.1784";
	"AddComputation.1780" -> "reduce.1784";
	"reduce.1784" -> "custom-call.135";
	"constant.16" -> "broadcast.34";
	"p11.177" -> "slice.1795";
	"slice.1795" -> "reshape.12";
	"constant.17" -> "broadcast.35";
	"reshape.12" -> "compare.6";
	"broadcast.35" -> "compare.6";
	"constant.18" -> "broadcast.36";
	"reshape.12" -> "add.2";
	"broadcast.36" -> "add.2";
	"compare.6" -> "select.4";
	"reshape.12" -> "select.4";
	"add.2" -> "select.4";
	"select.4" -> "reshape.13";
	"get-tuple-element.1348" -> "reshape.1796";
	"reshape.1796" -> "reduce.1803";
	"constant.1797" -> "reduce.1803";
	"AddComputation.1799" -> "reduce.1803";
	"broadcast.34" -> "scatter.0";
	"reshape.13" -> "scatter.0";
	"reduce.1803" -> "scatter.0";
	"Int32PermissiveEmbeddingScatterCombiner.1805" -> "scatter.0";
	"scatter.0" -> "custom-call.136";
	"constant.19" -> "broadcast.37";
	"p13.198" -> "reshape.15";
	"constant.20" -> "broadcast.38";
	"reshape.15" -> "compare.7";
	"broadcast.38" -> "compare.7";
	"constant.21" -> "broadcast.39";
	"reshape.15" -> "add.3";
	"broadcast.39" -> "add.3";
	"compare.7" -> "select.5";
	"reshape.15" -> "select.5";
	"add.3" -> "select.5";
	"select.5" -> "reshape.16";
	"get-tuple-element.1348" -> "reshape.17";
	"broadcast.37" -> "scatter.1";
	"reshape.16" -> "scatter.1";
	"reshape.17" -> "scatter.1";
	"Int32PermissiveEmbeddingScatterCombiner.1834" -> "scatter.1";
	"scatter.1" -> "custom-call.137";
	"add.945" -> "tuple.1863";
	"add.873" -> "tuple.1863";
	"add.689" -> "tuple.1863";
	"add.940" -> "tuple.1863";
	"divide.941" -> "tuple.1863";
	"custom-call.107" -> "tuple.1863";
	"custom-call.108" -> "tuple.1863";
	"custom-call.109" -> "tuple.1863";
	"add.1406" -> "tuple.1863";
	"custom-call.112" -> "tuple.1863";
	"custom-call.113" -> "tuple.1863";
	"custom-call.114" -> "tuple.1863";
	"custom-call.115" -> "tuple.1863";
	"custom-call.116" -> "tuple.1863";
	"custom-call.117" -> "tuple.1863";
	"custom-call.118" -> "tuple.1863";
	"custom-call.119" -> "tuple.1863";
	"custom-call.120" -> "tuple.1863";
	"custom-call.121" -> "tuple.1863";
	"custom-call.122" -> "tuple.1863";
	"custom-call.123" -> "tuple.1863";
	"custom-call.124" -> "tuple.1863";
	"custom-call.125" -> "tuple.1863";
	"custom-call.126" -> "tuple.1863";
	"custom-call.127" -> "tuple.1863";
	"custom-call.128" -> "tuple.1863";
	"custom-call.129" -> "tuple.1863";
	"custom-call.130" -> "tuple.1863";
	"custom-call.131" -> "tuple.1863";
	"custom-call.132" -> "tuple.1863";
	"custom-call.133" -> "tuple.1863";
	"custom-call.134" -> "tuple.1863";
	"custom-call.135" -> "tuple.1863";
	"custom-call.136" -> "tuple.1863";
	"custom-call.137" -> "tuple.1863";
}